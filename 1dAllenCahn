{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "74b3f2d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-20T14:52:17.726505Z",
     "iopub.status.busy": "2024-08-20T14:52:17.726123Z",
     "iopub.status.idle": "2024-08-20T14:52:34.463552Z",
     "shell.execute_reply": "2024-08-20T14:52:34.462644Z"
    },
    "papermill": {
     "duration": 16.74415,
     "end_time": "2024-08-20T14:52:34.466114",
     "exception": false,
     "start_time": "2024-08-20T14:52:17.721964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting deepxde\r\n",
      "  Downloading DeepXDE-1.12.0-py3-none-any.whl.metadata (12 kB)\r\n",
      "Requirement already satisfied: tensorflow in /opt/conda/lib/python3.10/site-packages (2.15.0)\r\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from deepxde) (3.7.5)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.26.4)\r\n",
      "Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.2.2)\r\n",
      "Requirement already satisfied: scikit-optimize>=0.9.0 in /opt/conda/lib/python3.10/site-packages (from deepxde) (0.10.2)\r\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.11.4)\r\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (23.5.26)\r\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.10.0)\r\n",
      "Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (16.0.6)\r\n",
      "Requirement already satisfied: ml-dtypes~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow) (21.3)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.20.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow) (69.0.3)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (4.9.0)\r\n",
      "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.14.1)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.35.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.60.0)\r\n",
      "Requirement already satisfied: tensorboard<2.16,>=2.15 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.1)\r\n",
      "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.0)\r\n",
      "Collecting keras<2.16,>=2.15.0 (from tensorflow)\r\n",
      "  Downloading keras-2.15.0-py3-none-any.whl.metadata (2.4 kB)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow) (0.42.0)\r\n",
      "Requirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.10/site-packages (from scikit-optimize>=0.9.0->deepxde) (1.4.2)\r\n",
      "Requirement already satisfied: pyaml>=16.9 in /opt/conda/lib/python3.10/site-packages (from scikit-optimize>=0.9.0->deepxde) (24.4.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow) (3.1.1)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->deepxde) (3.2.0)\r\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.26.1)\r\n",
      "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.5.2)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.32.3)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.3)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (1.2.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (4.47.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (1.4.5)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (9.5.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (2.9.0.post0)\r\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.2.4)\r\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.3.0)\r\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\r\n",
      "Requirement already satisfied: PyYAML in /opt/conda/lib/python3.10/site-packages (from pyaml>=16.9->scikit-optimize>=0.9.0->deepxde) (6.0.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.7.4)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.3)\r\n",
      "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.5.1)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\r\n",
      "Downloading DeepXDE-1.12.0-py3-none-any.whl (183 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m183.7/183.7 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading keras-2.15.0-py3-none-any.whl (1.7 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m29.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: keras, deepxde\r\n",
      "  Attempting uninstall: keras\r\n",
      "    Found existing installation: keras 3.4.1\r\n",
      "    Uninstalling keras-3.4.1:\r\n",
      "      Successfully uninstalled keras-3.4.1\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed deepxde-1.12.0 keras-2.15.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install deepxde tensorflow\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4439fec0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-20T14:52:34.476138Z",
     "iopub.status.busy": "2024-08-20T14:52:34.475818Z",
     "iopub.status.idle": "2024-08-20T16:05:50.474406Z",
     "shell.execute_reply": "2024-08-20T16:05:50.473319Z"
    },
    "papermill": {
     "duration": 4396.006361,
     "end_time": "2024-08-20T16:05:50.476732",
     "exception": false,
     "start_time": "2024-08-20T14:52:34.470371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-20 14:52:36.329483: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-20 14:52:36.329633: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-20 14:52:36.465701: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "Using backend: tensorflow\n",
      "Other supported backends: tensorflow.compat.v1, pytorch, jax, paddle.\n",
      "paddle supports more examples now and is recommended.\n",
      "Enable just-in-time compilation with XLA.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-1.          0.         -0.97347814  4.68327951]\n",
      " [-0.99        0.         -0.97071463  4.68033266]\n",
      " [-0.98        0.         -0.96758276  4.6894865 ]\n",
      " ...\n",
      " [ 0.98        0.02       -0.898314    4.6621666 ]\n",
      " [ 0.99        0.02       -0.89778441  4.64194965]\n",
      " [ 1.          0.02       -0.89689517  4.63153839]]\n",
      "Compiling model...\n",
      "'compile' took 0.003728 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotNormal is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1724165576.773873      24 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "0         [9.08e-01, 2.58e-01, 1.96e-05, 5.25e-01, 5.51e+04]    [9.19e-01, 2.58e-01, 1.96e-05, 5.25e-01, 5.51e+04]    []  \n",
      "0 [1.00e+00]\n",
      "0 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724165586.652287      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000      [3.87e+02, 1.60e-03, 1.35e+01, 4.49e+00, 4.71e+04]    [3.73e+02, 1.60e-03, 1.35e+01, 4.49e+00, 4.71e+04]    []  \n",
      "1000 [1.03e-02]\n",
      "1000 [1.00e+00]\n",
      "\n",
      "Best model at step 1000:\n",
      "  train loss: 4.75e+04\n",
      "  test loss: 4.75e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 54.943069 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.010738 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "1000      [3.87e+02, 1.60e-03, 1.35e+01, 4.49e+00, 4.71e+04]    [3.73e+02, 1.60e-03, 1.35e+01, 4.49e+00, 4.71e+04]    []  \n",
      "1000 [1.03e-02]\n",
      "1000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724165634.268231      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2000      [1.21e+03, 9.83e-04, 1.40e+01, 4.89e+00, 4.68e+04]    [1.18e+03, 9.83e-04, 1.40e+01, 4.89e+00, 4.68e+04]    []  \n",
      "2000 [4.88e-03]\n",
      "2000 [1.00e+00]\n",
      "\n",
      "Best model at step 1000:\n",
      "  train loss: 4.75e+04\n",
      "  test loss: 4.75e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.596725 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009090 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "2000      [1.21e+03, 9.83e-04, 1.40e+01, 4.89e+00, 4.68e+04]    [1.18e+03, 9.83e-04, 1.40e+01, 4.89e+00, 4.68e+04]    []  \n",
      "2000 [4.88e-03]\n",
      "2000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724165681.760930      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3000      [3.37e+02, 5.60e-04, 1.35e+01, 4.97e+00, 4.67e+04]    [3.18e+02, 5.60e-04, 1.35e+01, 4.97e+00, 4.67e+04]    []  \n",
      "3000 [4.06e-03]\n",
      "3000 [1.00e+00]\n",
      "\n",
      "Best model at step 3000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.71e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.430656 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008289 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "3000      [3.37e+02, 5.60e-04, 1.35e+01, 4.97e+00, 4.67e+04]    [3.18e+02, 5.60e-04, 1.35e+01, 4.97e+00, 4.67e+04]    []  \n",
      "3000 [4.06e-03]\n",
      "3000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724165729.318825      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4000      [3.49e+02, 8.55e-04, 1.30e+01, 5.01e+00, 4.67e+04]    [3.29e+02, 8.55e-04, 1.30e+01, 5.01e+00, 4.67e+04]    []  \n",
      "4000 [3.82e-03]\n",
      "4000 [1.00e+00]\n",
      "\n",
      "Best model at step 3000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.71e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.518326 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008488 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "4000      [3.49e+02, 8.55e-04, 1.30e+01, 5.01e+00, 4.67e+04]    [3.29e+02, 8.55e-04, 1.30e+01, 5.01e+00, 4.67e+04]    []  \n",
      "4000 [3.82e-03]\n",
      "4000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724165776.940453      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5000      [3.33e+02, 2.26e-04, 1.31e+01, 5.17e+00, 4.67e+04]    [3.14e+02, 2.26e-04, 1.31e+01, 5.17e+00, 4.67e+04]    []  \n",
      "5000 [3.43e-03]\n",
      "5000 [1.00e+00]\n",
      "\n",
      "Best model at step 5000:\n",
      "  train loss: 4.70e+04\n",
      "  test loss: 4.70e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.641723 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008051 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "5000      [3.33e+02, 2.26e-04, 1.31e+01, 5.17e+00, 4.67e+04]    [3.14e+02, 2.26e-04, 1.31e+01, 5.17e+00, 4.67e+04]    []  \n",
      "5000 [3.43e-03]\n",
      "5000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724165824.319889      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6000      [3.07e+02, 1.64e-04, 1.29e+01, 5.27e+00, 4.66e+04]    [2.75e+02, 1.64e-04, 1.29e+01, 5.27e+00, 4.66e+04]    []  \n",
      "6000 [3.30e-03]\n",
      "6000 [1.00e+00]\n",
      "\n",
      "Best model at step 6000:\n",
      "  train loss: 4.70e+04\n",
      "  test loss: 4.69e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.355076 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009393 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "6000      [3.07e+02, 1.64e-04, 1.29e+01, 5.27e+00, 4.66e+04]    [2.75e+02, 1.64e-04, 1.29e+01, 5.27e+00, 4.66e+04]    []  \n",
      "6000 [3.30e-03]\n",
      "6000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724165871.594083      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7000      [3.00e+02, 2.19e-04, 1.26e+01, 5.39e+00, 4.66e+04]    [2.69e+02, 2.19e-04, 1.26e+01, 5.39e+00, 4.66e+04]    []  \n",
      "7000 [3.29e-03]\n",
      "7000 [1.00e+00]\n",
      "\n",
      "Best model at step 7000:\n",
      "  train loss: 4.69e+04\n",
      "  test loss: 4.69e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.262548 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011752 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "7000      [3.00e+02, 2.19e-04, 1.26e+01, 5.39e+00, 4.66e+04]    [2.69e+02, 2.19e-04, 1.26e+01, 5.39e+00, 4.66e+04]    []  \n",
      "7000 [3.29e-03]\n",
      "7000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724165918.996156      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8000      [3.70e+02, 1.54e-04, 1.10e+01, 5.30e+00, 4.68e+04]    [3.46e+02, 1.54e-04, 1.10e+01, 5.30e+00, 4.68e+04]    []  \n",
      "8000 [3.37e-03]\n",
      "8000 [1.00e+00]\n",
      "\n",
      "Best model at step 7000:\n",
      "  train loss: 4.69e+04\n",
      "  test loss: 4.69e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.409201 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007754 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "8000      [3.70e+02, 1.54e-04, 1.10e+01, 5.30e+00, 4.68e+04]    [3.46e+02, 1.54e-04, 1.10e+01, 5.30e+00, 4.68e+04]    []  \n",
      "8000 [3.37e-03]\n",
      "8000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724165966.850421      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9000      [2.57e+02, 2.66e-04, 1.16e+01, 5.86e+00, 4.66e+04]    [2.19e+02, 2.66e-04, 1.16e+01, 5.86e+00, 4.66e+04]    []  \n",
      "9000 [3.42e-03]\n",
      "9000 [1.00e+00]\n",
      "\n",
      "Best model at step 9000:\n",
      "  train loss: 4.68e+04\n",
      "  test loss: 4.68e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.880269 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011653 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "9000      [2.57e+02, 2.66e-04, 1.16e+01, 5.86e+00, 4.66e+04]    [2.19e+02, 2.66e-04, 1.16e+01, 5.86e+00, 4.66e+04]    []  \n",
      "9000 [3.42e-03]\n",
      "9000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166014.264240      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000     [2.52e+02, 3.98e-04, 1.12e+01, 6.07e+00, 4.65e+04]    [2.21e+02, 3.98e-04, 1.12e+01, 6.07e+00, 4.65e+04]    []  \n",
      "10000 [3.55e-03]\n",
      "10000 [1.00e+00]\n",
      "\n",
      "Best model at step 10000:\n",
      "  train loss: 4.68e+04\n",
      "  test loss: 4.68e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.344287 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008028 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "10000     [2.52e+02, 3.98e-04, 1.12e+01, 6.07e+00, 4.65e+04]    [2.21e+02, 3.98e-04, 1.12e+01, 6.07e+00, 4.65e+04]    []  \n",
      "10000 [3.55e-03]\n",
      "10000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166061.620803      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11000     [2.30e+02, 4.88e-04, 1.09e+01, 6.28e+00, 4.65e+04]    [1.98e+02, 4.88e-04, 1.09e+01, 6.28e+00, 4.65e+04]    []  \n",
      "11000 [3.55e-03]\n",
      "11000 [1.00e+00]\n",
      "\n",
      "Best model at step 11000:\n",
      "  train loss: 4.67e+04\n",
      "  test loss: 4.67e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.329193 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008009 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "11000     [2.30e+02, 4.88e-04, 1.09e+01, 6.28e+00, 4.65e+04]    [1.98e+02, 4.88e-04, 1.09e+01, 6.28e+00, 4.65e+04]    []  \n",
      "11000 [3.55e-03]\n",
      "11000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166109.069328      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12000     [2.12e+02, 7.17e-04, 1.05e+01, 6.46e+00, 4.65e+04]    [1.79e+02, 7.17e-04, 1.05e+01, 6.46e+00, 4.65e+04]    []  \n",
      "12000 [3.69e-03]\n",
      "12000 [1.00e+00]\n",
      "\n",
      "Best model at step 12000:\n",
      "  train loss: 4.67e+04\n",
      "  test loss: 4.67e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.566063 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007876 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "12000     [2.12e+02, 7.17e-04, 1.05e+01, 6.46e+00, 4.65e+04]    [1.79e+02, 7.17e-04, 1.05e+01, 6.46e+00, 4.65e+04]    []  \n",
      "12000 [3.69e-03]\n",
      "12000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166156.630133      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13000     [2.00e+02, 4.54e-04, 1.04e+01, 6.72e+00, 4.64e+04]    [1.82e+02, 4.54e-04, 1.04e+01, 6.72e+00, 4.64e+04]    []  \n",
      "13000 [3.78e-03]\n",
      "13000 [1.00e+00]\n",
      "\n",
      "Best model at step 13000:\n",
      "  train loss: 4.66e+04\n",
      "  test loss: 4.66e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.542848 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008203 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "13000     [2.00e+02, 4.54e-04, 1.04e+01, 6.72e+00, 4.64e+04]    [1.82e+02, 4.54e-04, 1.04e+01, 6.72e+00, 4.64e+04]    []  \n",
      "13000 [3.78e-03]\n",
      "13000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166204.266347      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14000     [6.50e+02, 5.65e-04, 9.86e+00, 6.83e+00, 4.64e+04]    [5.93e+02, 5.65e-04, 9.86e+00, 6.83e+00, 4.64e+04]    []  \n",
      "14000 [3.78e-03]\n",
      "14000 [1.00e+00]\n",
      "\n",
      "Best model at step 13000:\n",
      "  train loss: 4.66e+04\n",
      "  test loss: 4.66e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.621089 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008039 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "14000     [6.50e+02, 5.65e-04, 9.86e+00, 6.83e+00, 4.64e+04]    [5.93e+02, 5.65e-04, 9.86e+00, 6.83e+00, 4.64e+04]    []  \n",
      "14000 [3.78e-03]\n",
      "14000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166252.342999      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15000     [1.54e+02, 9.03e-04, 9.41e+00, 7.10e+00, 4.63e+04]    [1.65e+02, 9.03e-04, 9.41e+00, 7.10e+00, 4.63e+04]    []  \n",
      "15000 [3.92e-03]\n",
      "15000 [1.00e+00]\n",
      "\n",
      "Best model at step 15000:\n",
      "  train loss: 4.65e+04\n",
      "  test loss: 4.65e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.005230 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.013347 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "15000     [1.54e+02, 9.03e-04, 9.41e+00, 7.10e+00, 4.63e+04]    [1.65e+02, 9.03e-04, 9.41e+00, 7.10e+00, 4.63e+04]    []  \n",
      "15000 [3.92e-03]\n",
      "15000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166299.897667      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16000     [1.60e+02, 1.40e-03, 9.02e+00, 7.62e+00, 4.62e+04]    [1.67e+02, 1.40e-03, 9.02e+00, 7.62e+00, 4.62e+04]    []  \n",
      "16000 [3.91e-03]\n",
      "16000 [1.00e+00]\n",
      "\n",
      "Best model at step 16000:\n",
      "  train loss: 4.64e+04\n",
      "  test loss: 4.64e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.527951 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011886 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "16000     [1.60e+02, 1.40e-03, 9.02e+00, 7.62e+00, 4.62e+04]    [1.67e+02, 1.40e-03, 9.02e+00, 7.62e+00, 4.62e+04]    []  \n",
      "16000 [3.91e-03]\n",
      "16000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166347.318833      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17000     [1.37e+02, 2.03e-03, 8.53e+00, 7.64e+00, 4.62e+04]    [1.51e+02, 2.03e-03, 8.53e+00, 7.64e+00, 4.62e+04]    []  \n",
      "17000 [3.94e-03]\n",
      "17000 [1.00e+00]\n",
      "\n",
      "Best model at step 17000:\n",
      "  train loss: 4.64e+04\n",
      "  test loss: 4.64e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.554793 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008383 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "17000     [1.37e+02, 2.03e-03, 8.53e+00, 7.64e+00, 4.62e+04]    [1.51e+02, 2.03e-03, 8.53e+00, 7.64e+00, 4.62e+04]    []  \n",
      "17000 [3.94e-03]\n",
      "17000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166395.212024      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18000     [1.57e+02, 2.75e-03, 8.81e+00, 8.17e+00, 4.61e+04]    [1.69e+02, 2.75e-03, 8.81e+00, 8.17e+00, 4.61e+04]    []  \n",
      "18000 [4.00e-03]\n",
      "18000 [1.00e+00]\n",
      "\n",
      "Best model at step 18000:\n",
      "  train loss: 4.63e+04\n",
      "  test loss: 4.63e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.954768 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012084 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "18000     [1.57e+02, 2.75e-03, 8.81e+00, 8.17e+00, 4.61e+04]    [1.69e+02, 2.75e-03, 8.81e+00, 8.17e+00, 4.61e+04]    []  \n",
      "18000 [4.00e-03]\n",
      "18000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166443.250172      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19000     [1.51e+02, 2.79e-03, 7.87e+00, 8.32e+00, 4.61e+04]    [1.72e+02, 2.79e-03, 7.87e+00, 8.32e+00, 4.61e+04]    []  \n",
      "19000 [3.95e-03]\n",
      "19000 [1.00e+00]\n",
      "\n",
      "Best model at step 19000:\n",
      "  train loss: 4.63e+04\n",
      "  test loss: 4.63e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.024423 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008456 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "19000     [1.51e+02, 2.79e-03, 7.87e+00, 8.32e+00, 4.61e+04]    [1.72e+02, 2.79e-03, 7.87e+00, 8.32e+00, 4.61e+04]    []  \n",
      "19000 [3.95e-03]\n",
      "19000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166491.109400      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20000     [1.56e+02, 3.14e-03, 7.95e+00, 8.72e+00, 4.60e+04]    [1.69e+02, 3.14e-03, 7.95e+00, 8.72e+00, 4.60e+04]    []  \n",
      "20000 [3.96e-03]\n",
      "20000 [1.00e+00]\n",
      "\n",
      "Best model at step 20000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.836722 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008667 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "20000     [1.56e+02, 3.14e-03, 7.95e+00, 8.72e+00, 4.60e+04]    [1.69e+02, 3.14e-03, 7.95e+00, 8.72e+00, 4.60e+04]    []  \n",
      "20000 [3.96e-03]\n",
      "20000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166539.004025      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21000     [1.75e+02, 3.12e-03, 8.20e+00, 8.85e+00, 4.60e+04]    [1.87e+02, 3.12e-03, 8.20e+00, 8.85e+00, 4.60e+04]    []  \n",
      "21000 [4.14e-03]\n",
      "21000 [1.00e+00]\n",
      "\n",
      "Best model at step 20000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.887850 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008089 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "21000     [1.75e+02, 3.12e-03, 8.20e+00, 8.85e+00, 4.60e+04]    [1.87e+02, 3.12e-03, 8.20e+00, 8.85e+00, 4.60e+04]    []  \n",
      "21000 [4.14e-03]\n",
      "21000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166587.610195      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22000     [1.67e+02, 2.52e-03, 7.98e+00, 8.95e+00, 4.60e+04]    [1.64e+02, 2.52e-03, 7.98e+00, 8.95e+00, 4.60e+04]    []  \n",
      "22000 [4.20e-03]\n",
      "22000 [1.00e+00]\n",
      "\n",
      "Best model at step 22000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.605534 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012138 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "22000     [1.67e+02, 2.52e-03, 7.98e+00, 8.95e+00, 4.60e+04]    [1.64e+02, 2.52e-03, 7.98e+00, 8.95e+00, 4.60e+04]    []  \n",
      "22000 [4.20e-03]\n",
      "22000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166635.482655      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23000     [2.22e+02, 2.85e-03, 8.12e+00, 9.17e+00, 4.60e+04]    [2.00e+02, 2.85e-03, 8.12e+00, 9.17e+00, 4.60e+04]    []  \n",
      "23000 [4.29e-03]\n",
      "23000 [1.00e+00]\n",
      "\n",
      "Best model at step 22000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.782621 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011663 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "23000     [2.22e+02, 2.85e-03, 8.12e+00, 9.17e+00, 4.60e+04]    [2.00e+02, 2.85e-03, 8.12e+00, 9.17e+00, 4.60e+04]    []  \n",
      "23000 [4.29e-03]\n",
      "23000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166683.104361      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24000     [1.39e+02, 2.94e-03, 8.09e+00, 9.36e+00, 4.60e+04]    [1.59e+02, 2.94e-03, 8.09e+00, 9.36e+00, 4.60e+04]    []  \n",
      "24000 [4.25e-03]\n",
      "24000 [1.00e+00]\n",
      "\n",
      "Best model at step 24000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.644640 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007777 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "24000     [1.39e+02, 2.94e-03, 8.09e+00, 9.36e+00, 4.60e+04]    [1.59e+02, 2.94e-03, 8.09e+00, 9.36e+00, 4.60e+04]    []  \n",
      "24000 [4.25e-03]\n",
      "24000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166730.864130      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25000     [1.56e+02, 2.76e-03, 7.87e+00, 9.42e+00, 4.60e+04]    [1.57e+02, 2.76e-03, 7.87e+00, 9.42e+00, 4.60e+04]    []  \n",
      "25000 [4.21e-03]\n",
      "25000 [1.00e+00]\n",
      "\n",
      "Best model at step 24000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.754328 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007727 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "25000     [1.56e+02, 2.76e-03, 7.87e+00, 9.42e+00, 4.60e+04]    [1.57e+02, 2.76e-03, 7.87e+00, 9.42e+00, 4.60e+04]    []  \n",
      "25000 [4.21e-03]\n",
      "25000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166778.697134      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26000     [1.33e+02, 2.89e-03, 8.07e+00, 9.61e+00, 4.60e+04]    [1.54e+02, 2.89e-03, 8.07e+00, 9.61e+00, 4.60e+04]    []  \n",
      "26000 [4.30e-03]\n",
      "26000 [1.00e+00]\n",
      "\n",
      "Best model at step 26000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.806922 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008028 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "26000     [1.33e+02, 2.89e-03, 8.07e+00, 9.61e+00, 4.60e+04]    [1.54e+02, 2.89e-03, 8.07e+00, 9.61e+00, 4.60e+04]    []  \n",
      "26000 [4.30e-03]\n",
      "26000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166826.428066      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "27000     [1.30e+02, 2.73e-03, 7.83e+00, 9.30e+00, 4.60e+04]    [1.43e+02, 2.73e-03, 7.83e+00, 9.30e+00, 4.60e+04]    []  \n",
      "27000 [4.36e-03]\n",
      "27000 [1.00e+00]\n",
      "\n",
      "Best model at step 26000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.720223 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012133 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "27000     [1.30e+02, 2.73e-03, 7.83e+00, 9.30e+00, 4.60e+04]    [1.43e+02, 2.73e-03, 7.83e+00, 9.30e+00, 4.60e+04]    []  \n",
      "27000 [4.36e-03]\n",
      "27000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166874.317205      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28000     [1.33e+02, 2.50e-03, 8.11e+00, 9.78e+00, 4.59e+04]    [1.53e+02, 2.50e-03, 8.11e+00, 9.78e+00, 4.59e+04]    []  \n",
      "28000 [4.46e-03]\n",
      "28000 [1.00e+00]\n",
      "\n",
      "Best model at step 28000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.865624 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007933 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "28000     [1.33e+02, 2.50e-03, 8.11e+00, 9.78e+00, 4.59e+04]    [1.53e+02, 2.50e-03, 8.11e+00, 9.78e+00, 4.59e+04]    []  \n",
      "28000 [4.46e-03]\n",
      "28000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166922.093017      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29000     [1.60e+02, 2.25e-03, 7.86e+00, 9.66e+00, 4.59e+04]    [1.52e+02, 2.25e-03, 7.86e+00, 9.66e+00, 4.59e+04]    []  \n",
      "29000 [4.45e-03]\n",
      "29000 [1.00e+00]\n",
      "\n",
      "Best model at step 28000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.798056 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008216 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "29000     [1.60e+02, 2.25e-03, 7.86e+00, 9.66e+00, 4.59e+04]    [1.52e+02, 2.25e-03, 7.86e+00, 9.66e+00, 4.59e+04]    []  \n",
      "29000 [4.45e-03]\n",
      "29000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724166969.888334      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30000     [1.58e+02, 2.01e-03, 8.12e+00, 9.95e+00, 4.59e+04]    [1.66e+02, 2.01e-03, 8.12e+00, 9.95e+00, 4.59e+04]    []  \n",
      "30000 [4.51e-03]\n",
      "30000 [1.00e+00]\n",
      "\n",
      "Best model at step 28000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.761007 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008033 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "30000     [1.58e+02, 2.01e-03, 8.12e+00, 9.95e+00, 4.59e+04]    [1.66e+02, 2.01e-03, 8.12e+00, 9.95e+00, 4.59e+04]    []  \n",
      "30000 [4.51e-03]\n",
      "30000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167018.512713      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31000     [1.57e+02, 1.99e-03, 8.06e+00, 9.88e+00, 4.59e+04]    [1.55e+02, 1.99e-03, 8.06e+00, 9.88e+00, 4.59e+04]    []  \n",
      "31000 [4.55e-03]\n",
      "31000 [1.00e+00]\n",
      "\n",
      "Best model at step 28000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.439253 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008252 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "31000     [1.57e+02, 1.99e-03, 8.06e+00, 9.88e+00, 4.59e+04]    [1.55e+02, 1.99e-03, 8.06e+00, 9.88e+00, 4.59e+04]    []  \n",
      "31000 [4.55e-03]\n",
      "31000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167065.902376      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32000     [1.32e+02, 1.62e-03, 8.21e+00, 1.01e+01, 4.59e+04]    [1.52e+02, 1.62e-03, 8.21e+00, 1.01e+01, 4.59e+04]    []  \n",
      "32000 [4.60e-03]\n",
      "32000 [1.00e+00]\n",
      "\n",
      "Best model at step 32000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.494970 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007901 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "32000     [1.32e+02, 1.62e-03, 8.21e+00, 1.01e+01, 4.59e+04]    [1.52e+02, 1.62e-03, 8.21e+00, 1.01e+01, 4.59e+04]    []  \n",
      "32000 [4.60e-03]\n",
      "32000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167113.392813      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33000     [1.58e+02, 1.38e-03, 8.04e+00, 9.50e+00, 4.59e+04]    [1.60e+02, 1.38e-03, 8.04e+00, 9.50e+00, 4.59e+04]    []  \n",
      "33000 [4.70e-03]\n",
      "33000 [1.00e+00]\n",
      "\n",
      "Best model at step 32000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.300325 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008411 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "33000     [1.58e+02, 1.38e-03, 8.04e+00, 9.50e+00, 4.59e+04]    [1.60e+02, 1.38e-03, 8.04e+00, 9.50e+00, 4.59e+04]    []  \n",
      "33000 [4.70e-03]\n",
      "33000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167160.678987      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34000     [1.37e+02, 1.18e-03, 8.19e+00, 9.98e+00, 4.59e+04]    [1.45e+02, 1.18e-03, 8.19e+00, 9.98e+00, 4.59e+04]    []  \n",
      "34000 [4.57e-03]\n",
      "34000 [1.00e+00]\n",
      "\n",
      "Best model at step 34000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.532367 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007716 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "34000     [1.37e+02, 1.18e-03, 8.19e+00, 9.98e+00, 4.59e+04]    [1.45e+02, 1.18e-03, 8.19e+00, 9.98e+00, 4.59e+04]    []  \n",
      "34000 [4.57e-03]\n",
      "34000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167208.405002      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35000     [1.36e+02, 8.53e-04, 8.41e+00, 1.01e+01, 4.59e+04]    [1.54e+02, 8.53e-04, 8.41e+00, 1.01e+01, 4.59e+04]    []  \n",
      "35000 [4.64e-03]\n",
      "35000 [1.00e+00]\n",
      "\n",
      "Best model at step 35000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.748565 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007920 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "35000     [1.36e+02, 8.53e-04, 8.41e+00, 1.01e+01, 4.59e+04]    [1.54e+02, 8.53e-04, 8.41e+00, 1.01e+01, 4.59e+04]    []  \n",
      "35000 [4.64e-03]\n",
      "35000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167256.100980      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36000     [1.17e+02, 6.12e-04, 8.42e+00, 9.76e+00, 4.59e+04]    [1.43e+02, 6.12e-04, 8.42e+00, 9.76e+00, 4.59e+04]    []  \n",
      "36000 [4.66e-03]\n",
      "36000 [1.00e+00]\n",
      "\n",
      "Best model at step 36000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.682656 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007829 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "36000     [1.17e+02, 6.12e-04, 8.42e+00, 9.76e+00, 4.59e+04]    [1.43e+02, 6.12e-04, 8.42e+00, 9.76e+00, 4.59e+04]    []  \n",
      "36000 [4.66e-03]\n",
      "36000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167303.794844      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37000     [1.31e+02, 4.55e-04, 8.71e+00, 1.03e+01, 4.59e+04]    [1.52e+02, 4.55e-04, 8.71e+00, 1.03e+01, 4.59e+04]    []  \n",
      "37000 [4.76e-03]\n",
      "37000 [1.00e+00]\n",
      "\n",
      "Best model at step 37000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.685681 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.014384 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "37000     [1.31e+02, 4.55e-04, 8.71e+00, 1.03e+01, 4.59e+04]    [1.52e+02, 4.55e-04, 8.71e+00, 1.03e+01, 4.59e+04]    []  \n",
      "37000 [4.76e-03]\n",
      "37000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167352.563743      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38000     [2.41e+02, 2.93e-04, 8.68e+00, 1.03e+01, 4.58e+04]    [2.06e+02, 2.93e-04, 8.68e+00, 1.03e+01, 4.58e+04]    []  \n",
      "38000 [4.66e-03]\n",
      "38000 [1.00e+00]\n",
      "\n",
      "Best model at step 37000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.820549 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009410 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "38000     [2.41e+02, 2.93e-04, 8.68e+00, 1.03e+01, 4.58e+04]    [2.06e+02, 2.93e-04, 8.68e+00, 1.03e+01, 4.58e+04]    []  \n",
      "38000 [4.66e-03]\n",
      "38000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167401.271869      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39000     [1.28e+02, 1.63e-04, 8.69e+00, 1.03e+01, 4.58e+04]    [1.46e+02, 1.63e-04, 8.69e+00, 1.03e+01, 4.58e+04]    []  \n",
      "39000 [4.58e-03]\n",
      "39000 [1.00e+00]\n",
      "\n",
      "Best model at step 39000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.632477 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009198 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "39000     [1.28e+02, 1.63e-04, 8.69e+00, 1.03e+01, 4.58e+04]    [1.46e+02, 1.63e-04, 8.69e+00, 1.03e+01, 4.58e+04]    []  \n",
      "39000 [4.58e-03]\n",
      "39000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167450.250353      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40000     [1.47e+02, 5.33e-05, 8.69e+00, 1.03e+01, 4.58e+04]    [1.54e+02, 5.33e-05, 8.69e+00, 1.03e+01, 4.58e+04]    []  \n",
      "40000 [4.57e-03]\n",
      "40000 [1.00e+00]\n",
      "\n",
      "Best model at step 39000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.065812 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.013569 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "40000     [1.47e+02, 5.33e-05, 8.69e+00, 1.03e+01, 4.58e+04]    [1.54e+02, 5.33e-05, 8.69e+00, 1.03e+01, 4.58e+04]    []  \n",
      "40000 [4.57e-03]\n",
      "40000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167499.319440      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41000     [1.57e+02, 6.78e-05, 8.89e+00, 1.02e+01, 4.58e+04]    [1.62e+02, 6.78e-05, 8.89e+00, 1.02e+01, 4.58e+04]    []  \n",
      "41000 [4.54e-03]\n",
      "41000 [1.00e+00]\n",
      "\n",
      "Best model at step 39000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.965834 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012087 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "41000     [1.57e+02, 6.78e-05, 8.89e+00, 1.02e+01, 4.58e+04]    [1.62e+02, 6.78e-05, 8.89e+00, 1.02e+01, 4.58e+04]    []  \n",
      "41000 [4.54e-03]\n",
      "41000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167549.453067      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42000     [1.26e+02, 1.10e-04, 9.02e+00, 1.04e+01, 4.58e+04]    [1.44e+02, 1.10e-04, 9.02e+00, 1.04e+01, 4.58e+04]    []  \n",
      "42000 [4.70e-03]\n",
      "42000 [1.00e+00]\n",
      "\n",
      "Best model at step 42000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 50.157481 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012181 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "42000     [1.26e+02, 1.10e-04, 9.02e+00, 1.04e+01, 4.58e+04]    [1.44e+02, 1.10e-04, 9.02e+00, 1.04e+01, 4.58e+04]    []  \n",
      "42000 [4.70e-03]\n",
      "42000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167598.883298      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43000     [2.68e+02, 2.18e-04, 9.20e+00, 9.74e+00, 4.59e+04]    [2.28e+02, 2.18e-04, 9.20e+00, 9.74e+00, 4.59e+04]    []  \n",
      "43000 [4.64e-03]\n",
      "43000 [1.00e+00]\n",
      "\n",
      "Best model at step 42000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.482967 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.014109 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "43000     [2.68e+02, 2.18e-04, 9.20e+00, 9.74e+00, 4.59e+04]    [2.28e+02, 2.18e-04, 9.20e+00, 9.74e+00, 4.59e+04]    []  \n",
      "43000 [4.64e-03]\n",
      "43000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167648.574898      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44000     [1.70e+02, 5.88e-04, 9.28e+00, 1.04e+01, 4.58e+04]    [1.63e+02, 5.88e-04, 9.28e+00, 1.04e+01, 4.58e+04]    []  \n",
      "44000 [4.73e-03]\n",
      "44000 [1.00e+00]\n",
      "\n",
      "Best model at step 42000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.636453 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.013336 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "44000     [1.70e+02, 5.88e-04, 9.28e+00, 1.04e+01, 4.58e+04]    [1.63e+02, 5.88e-04, 9.28e+00, 1.04e+01, 4.58e+04]    []  \n",
      "44000 [4.73e-03]\n",
      "44000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167698.447458      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45000     [4.51e+02, 9.73e-04, 9.46e+00, 1.05e+01, 4.58e+04]    [2.76e+02, 9.73e-04, 9.46e+00, 1.05e+01, 4.58e+04]    []  \n",
      "45000 [4.59e-03]\n",
      "45000 [1.00e+00]\n",
      "\n",
      "Best model at step 42000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.932764 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012360 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "45000     [4.51e+02, 9.73e-04, 9.46e+00, 1.05e+01, 4.58e+04]    [2.76e+02, 9.73e-04, 9.46e+00, 1.05e+01, 4.58e+04]    []  \n",
      "45000 [4.59e-03]\n",
      "45000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167748.530522      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46000     [1.31e+02, 1.76e-03, 9.64e+00, 1.05e+01, 4.57e+04]    [1.41e+02, 1.76e-03, 9.64e+00, 1.05e+01, 4.57e+04]    []  \n",
      "46000 [4.72e-03]\n",
      "46000 [1.00e+00]\n",
      "\n",
      "Best model at step 46000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.59e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 50.044158 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008997 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "46000     [1.31e+02, 1.76e-03, 9.64e+00, 1.05e+01, 4.57e+04]    [1.41e+02, 1.76e-03, 9.64e+00, 1.05e+01, 4.57e+04]    []  \n",
      "46000 [4.72e-03]\n",
      "46000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167798.546116      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "47000     [3.97e+02, 2.24e-03, 9.95e+00, 1.02e+01, 4.58e+04]    [2.63e+02, 2.24e-03, 9.95e+00, 1.02e+01, 4.58e+04]    []  \n",
      "47000 [4.76e-03]\n",
      "47000 [1.00e+00]\n",
      "\n",
      "Best model at step 46000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.59e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 50.034285 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.013521 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "47000     [3.97e+02, 2.24e-03, 9.95e+00, 1.02e+01, 4.58e+04]    [2.63e+02, 2.24e-03, 9.95e+00, 1.02e+01, 4.58e+04]    []  \n",
      "47000 [4.76e-03]\n",
      "47000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167848.252981      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48000     [2.36e+02, 2.95e-03, 9.94e+00, 1.04e+01, 4.57e+04]    [1.74e+02, 2.95e-03, 9.94e+00, 1.04e+01, 4.57e+04]    []  \n",
      "48000 [4.68e-03]\n",
      "48000 [1.00e+00]\n",
      "\n",
      "Best model at step 46000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.59e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.630035 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008942 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "48000     [2.36e+02, 2.95e-03, 9.94e+00, 1.04e+01, 4.57e+04]    [1.74e+02, 2.95e-03, 9.94e+00, 1.04e+01, 4.57e+04]    []  \n",
      "48000 [4.68e-03]\n",
      "48000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167898.041722      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49000     [1.32e+02, 3.09e-03, 1.02e+01, 1.06e+01, 4.57e+04]    [1.47e+02, 3.09e-03, 1.02e+01, 1.06e+01, 4.57e+04]    []  \n",
      "49000 [4.74e-03]\n",
      "49000 [1.00e+00]\n",
      "\n",
      "Best model at step 49000:\n",
      "  train loss: 4.58e+04\n",
      "  test loss: 4.58e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.800870 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009184 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "49000     [1.32e+02, 3.09e-03, 1.02e+01, 1.06e+01, 4.57e+04]    [1.47e+02, 3.09e-03, 1.02e+01, 1.06e+01, 4.57e+04]    []  \n",
      "49000 [4.74e-03]\n",
      "49000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167948.188936      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50000     [1.83e+02, 3.25e-03, 1.04e+01, 1.05e+01, 4.57e+04]    [1.55e+02, 3.25e-03, 1.04e+01, 1.05e+01, 4.57e+04]    []  \n",
      "50000 [4.79e-03]\n",
      "50000 [1.00e+00]\n",
      "\n",
      "Best model at step 49000:\n",
      "  train loss: 4.58e+04\n",
      "  test loss: 4.58e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 50.177820 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.014570 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "50000     [1.83e+02, 3.25e-03, 1.04e+01, 1.05e+01, 4.57e+04]    [1.55e+02, 3.25e-03, 1.04e+01, 1.05e+01, 4.57e+04]    []  \n",
      "50000 [4.79e-03]\n",
      "50000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724167998.510827      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51000     [1.36e+02, 3.40e-03, 1.06e+01, 1.06e+01, 4.56e+04]    [1.48e+02, 3.40e-03, 1.06e+01, 1.06e+01, 4.56e+04]    []  \n",
      "51000 [4.81e-03]\n",
      "51000 [1.00e+00]\n",
      "\n",
      "Best model at step 51000:\n",
      "  train loss: 4.58e+04\n",
      "  test loss: 4.58e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 50.260424 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008995 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "51000     [1.36e+02, 3.40e-03, 1.06e+01, 1.06e+01, 4.56e+04]    [1.48e+02, 3.40e-03, 1.06e+01, 1.06e+01, 4.56e+04]    []  \n",
      "51000 [4.81e-03]\n",
      "51000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168048.457692      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "52000     [1.46e+02, 7.00e-03, 1.10e+01, 1.01e+01, 4.57e+04]    [1.50e+02, 7.00e-03, 1.10e+01, 1.01e+01, 4.57e+04]    []  \n",
      "52000 [4.76e-03]\n",
      "52000 [1.00e+00]\n",
      "\n",
      "Best model at step 51000:\n",
      "  train loss: 4.58e+04\n",
      "  test loss: 4.58e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.941793 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.014086 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "52000     [1.46e+02, 7.00e-03, 1.10e+01, 1.01e+01, 4.57e+04]    [1.50e+02, 7.00e-03, 1.10e+01, 1.01e+01, 4.57e+04]    []  \n",
      "52000 [4.76e-03]\n",
      "52000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168098.079256      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53000     [1.54e+02, 5.35e-03, 1.10e+01, 1.02e+01, 4.56e+04]    [1.50e+02, 5.35e-03, 1.10e+01, 1.02e+01, 4.56e+04]    []  \n",
      "53000 [4.82e-03]\n",
      "53000 [1.00e+00]\n",
      "\n",
      "Best model at step 51000:\n",
      "  train loss: 4.58e+04\n",
      "  test loss: 4.58e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.589482 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012517 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "53000     [1.54e+02, 5.35e-03, 1.10e+01, 1.02e+01, 4.56e+04]    [1.50e+02, 5.35e-03, 1.10e+01, 1.02e+01, 4.56e+04]    []  \n",
      "53000 [4.82e-03]\n",
      "53000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168147.788043      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54000     [2.27e+02, 5.56e-03, 1.13e+01, 1.05e+01, 4.56e+04]    [1.81e+02, 5.56e-03, 1.13e+01, 1.05e+01, 4.56e+04]    []  \n",
      "54000 [4.94e-03]\n",
      "54000 [1.00e+00]\n",
      "\n",
      "Best model at step 51000:\n",
      "  train loss: 4.58e+04\n",
      "  test loss: 4.58e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.694240 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009039 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "54000     [2.27e+02, 5.56e-03, 1.13e+01, 1.05e+01, 4.56e+04]    [1.81e+02, 5.56e-03, 1.13e+01, 1.05e+01, 4.56e+04]    []  \n",
      "54000 [4.94e-03]\n",
      "54000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168198.926572      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55000     [1.38e+02, 6.25e-03, 1.15e+01, 1.06e+01, 4.56e+04]    [1.50e+02, 6.25e-03, 1.15e+01, 1.06e+01, 4.56e+04]    []  \n",
      "55000 [4.88e-03]\n",
      "55000 [1.00e+00]\n",
      "\n",
      "Best model at step 55000:\n",
      "  train loss: 4.57e+04\n",
      "  test loss: 4.57e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 51.090529 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008856 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "55000     [1.38e+02, 6.25e-03, 1.15e+01, 1.06e+01, 4.56e+04]    [1.50e+02, 6.25e-03, 1.15e+01, 1.06e+01, 4.56e+04]    []  \n",
      "55000 [4.88e-03]\n",
      "55000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168248.049579      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56000     [1.71e+02, 8.72e-03, 1.18e+01, 1.04e+01, 4.55e+04]    [1.54e+02, 8.72e-03, 1.18e+01, 1.04e+01, 4.55e+04]    []  \n",
      "56000 [4.81e-03]\n",
      "56000 [1.00e+00]\n",
      "\n",
      "Best model at step 55000:\n",
      "  train loss: 4.57e+04\n",
      "  test loss: 4.57e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.061345 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008689 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "56000     [1.71e+02, 8.72e-03, 1.18e+01, 1.04e+01, 4.55e+04]    [1.54e+02, 8.72e-03, 1.18e+01, 1.04e+01, 4.55e+04]    []  \n",
      "56000 [4.81e-03]\n",
      "56000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168297.345108      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57000     [2.32e+02, 8.06e-03, 1.21e+01, 1.06e+01, 4.55e+04]    [1.80e+02, 8.06e-03, 1.21e+01, 1.06e+01, 4.55e+04]    []  \n",
      "57000 [4.91e-03]\n",
      "57000 [1.00e+00]\n",
      "\n",
      "Best model at step 55000:\n",
      "  train loss: 4.57e+04\n",
      "  test loss: 4.57e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.355564 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008684 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "57000     [2.32e+02, 8.06e-03, 1.21e+01, 1.06e+01, 4.55e+04]    [1.80e+02, 8.06e-03, 1.21e+01, 1.06e+01, 4.55e+04]    []  \n",
      "57000 [4.91e-03]\n",
      "57000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168346.708084      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58000     [1.52e+02, 9.84e-03, 1.24e+01, 1.02e+01, 4.54e+04]    [1.56e+02, 9.84e-03, 1.24e+01, 1.02e+01, 4.54e+04]    []  \n",
      "58000 [5.07e-03]\n",
      "58000 [1.00e+00]\n",
      "\n",
      "Best model at step 58000:\n",
      "  train loss: 4.56e+04\n",
      "  test loss: 4.56e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.315366 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008621 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "58000     [1.52e+02, 9.84e-03, 1.24e+01, 1.02e+01, 4.54e+04]    [1.56e+02, 9.84e-03, 1.24e+01, 1.02e+01, 4.54e+04]    []  \n",
      "58000 [5.07e-03]\n",
      "58000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168396.002548      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59000     [1.60e+02, 1.02e-02, 1.28e+01, 1.03e+01, 4.54e+04]    [1.62e+02, 1.02e-02, 1.28e+01, 1.03e+01, 4.54e+04]    []  \n",
      "59000 [4.93e-03]\n",
      "59000 [1.00e+00]\n",
      "\n",
      "Best model at step 59000:\n",
      "  train loss: 4.56e+04\n",
      "  test loss: 4.56e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.275077 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012118 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "59000     [1.60e+02, 1.02e-02, 1.28e+01, 1.03e+01, 4.54e+04]    [1.62e+02, 1.02e-02, 1.28e+01, 1.03e+01, 4.54e+04]    []  \n",
      "59000 [4.93e-03]\n",
      "59000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168444.958947      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60000     [2.35e+02, 1.16e-02, 1.32e+01, 1.01e+01, 4.53e+04]    [1.69e+02, 1.16e-02, 1.32e+01, 1.01e+01, 4.53e+04]    []  \n",
      "60000 [4.93e-03]\n",
      "60000 [1.00e+00]\n",
      "\n",
      "Best model at step 59000:\n",
      "  train loss: 4.56e+04\n",
      "  test loss: 4.56e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.960578 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008529 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "60000     [2.35e+02, 1.16e-02, 1.32e+01, 1.01e+01, 4.53e+04]    [1.69e+02, 1.16e-02, 1.32e+01, 1.01e+01, 4.53e+04]    []  \n",
      "60000 [4.93e-03]\n",
      "60000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168493.698934      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61000     [2.02e+02, 1.25e-02, 1.37e+01, 9.99e+00, 4.53e+04]    [1.71e+02, 1.25e-02, 1.37e+01, 9.99e+00, 4.53e+04]    []  \n",
      "61000 [4.98e-03]\n",
      "61000 [1.00e+00]\n",
      "\n",
      "Best model at step 61000:\n",
      "  train loss: 4.55e+04\n",
      "  test loss: 4.54e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.642984 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009120 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "61000     [2.02e+02, 1.25e-02, 1.37e+01, 9.99e+00, 4.53e+04]    [1.71e+02, 1.25e-02, 1.37e+01, 9.99e+00, 4.53e+04]    []  \n",
      "61000 [4.98e-03]\n",
      "61000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168542.462084      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62000     [3.31e+02, 1.44e-02, 1.45e+01, 9.69e+00, 4.52e+04]    [1.93e+02, 1.44e-02, 1.45e+01, 9.69e+00, 4.52e+04]    []  \n",
      "62000 [5.14e-03]\n",
      "62000 [1.00e+00]\n",
      "\n",
      "Best model at step 61000:\n",
      "  train loss: 4.55e+04\n",
      "  test loss: 4.54e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.758889 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008811 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "62000     [3.31e+02, 1.44e-02, 1.45e+01, 9.69e+00, 4.52e+04]    [1.93e+02, 1.44e-02, 1.45e+01, 9.69e+00, 4.52e+04]    []  \n",
      "62000 [5.14e-03]\n",
      "62000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168590.964322      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63000     [2.04e+02, 1.34e-02, 1.47e+01, 9.61e+00, 4.52e+04]    [2.08e+02, 1.34e-02, 1.47e+01, 9.61e+00, 4.52e+04]    []  \n",
      "63000 [5.02e-03]\n",
      "63000 [1.00e+00]\n",
      "\n",
      "Best model at step 63000:\n",
      "  train loss: 4.54e+04\n",
      "  test loss: 4.54e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.537936 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009267 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "63000     [2.04e+02, 1.34e-02, 1.47e+01, 9.61e+00, 4.52e+04]    [2.08e+02, 1.34e-02, 1.47e+01, 9.61e+00, 4.52e+04]    []  \n",
      "63000 [5.02e-03]\n",
      "63000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168639.741153      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64000     [3.38e+02, 2.13e-02, 1.62e+01, 9.24e+00, 4.49e+04]    [2.04e+02, 2.13e-02, 1.62e+01, 9.24e+00, 4.49e+04]    []  \n",
      "64000 [4.90e-03]\n",
      "64000 [1.00e+00]\n",
      "\n",
      "Best model at step 64000:\n",
      "  train loss: 4.53e+04\n",
      "  test loss: 4.51e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.709599 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008475 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "64000     [3.38e+02, 2.13e-02, 1.62e+01, 9.24e+00, 4.49e+04]    [2.04e+02, 2.13e-02, 1.62e+01, 9.24e+00, 4.49e+04]    []  \n",
      "64000 [4.90e-03]\n",
      "64000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168688.375810      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65000     [2.88e+02, 2.52e-02, 1.71e+01, 9.32e+00, 4.48e+04]    [1.91e+02, 2.52e-02, 1.71e+01, 9.32e+00, 4.48e+04]    []  \n",
      "65000 [5.05e-03]\n",
      "65000 [1.00e+00]\n",
      "\n",
      "Best model at step 65000:\n",
      "  train loss: 4.51e+04\n",
      "  test loss: 4.50e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.664002 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.013324 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "65000     [2.88e+02, 2.52e-02, 1.71e+01, 9.32e+00, 4.48e+04]    [1.91e+02, 2.52e-02, 1.71e+01, 9.32e+00, 4.48e+04]    []  \n",
      "65000 [5.05e-03]\n",
      "65000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168737.165149      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66000     [2.46e+02, 1.65e-02, 1.63e+01, 8.83e+00, 4.50e+04]    [2.50e+02, 1.65e-02, 1.63e+01, 8.83e+00, 4.50e+04]    []  \n",
      "66000 [5.05e-03]\n",
      "66000 [1.00e+00]\n",
      "\n",
      "Best model at step 65000:\n",
      "  train loss: 4.51e+04\n",
      "  test loss: 4.50e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.705146 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008689 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "66000     [2.46e+02, 1.65e-02, 1.63e+01, 8.83e+00, 4.50e+04]    [2.50e+02, 1.65e-02, 1.63e+01, 8.83e+00, 4.50e+04]    []  \n",
      "66000 [5.05e-03]\n",
      "66000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168785.672957      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67000     [3.06e+02, 2.54e-02, 1.92e+01, 8.94e+00, 4.45e+04]    [2.15e+02, 2.54e-02, 1.92e+01, 8.94e+00, 4.45e+04]    []  \n",
      "67000 [5.15e-03]\n",
      "67000 [1.00e+00]\n",
      "\n",
      "Best model at step 67000:\n",
      "  train loss: 4.48e+04\n",
      "  test loss: 4.47e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.535178 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011530 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "67000     [3.06e+02, 2.54e-02, 1.92e+01, 8.94e+00, 4.45e+04]    [2.15e+02, 2.54e-02, 1.92e+01, 8.94e+00, 4.45e+04]    []  \n",
      "67000 [5.15e-03]\n",
      "67000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168834.544218      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68000     [3.98e+02, 6.91e-02, 1.82e+01, 8.63e+00, 4.46e+04]    [2.97e+02, 6.91e-02, 1.82e+01, 8.63e+00, 4.46e+04]    []  \n",
      "68000 [5.07e-03]\n",
      "68000 [1.00e+00]\n",
      "\n",
      "Best model at step 67000:\n",
      "  train loss: 4.48e+04\n",
      "  test loss: 4.47e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.899431 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.013522 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "68000     [3.98e+02, 6.91e-02, 1.82e+01, 8.63e+00, 4.46e+04]    [2.97e+02, 6.91e-02, 1.82e+01, 8.63e+00, 4.46e+04]    []  \n",
      "68000 [5.07e-03]\n",
      "68000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168883.198441      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69000     [2.96e+02, 2.04e-02, 1.83e+01, 8.46e+00, 4.45e+04]    [2.45e+02, 2.04e-02, 1.83e+01, 8.46e+00, 4.45e+04]    []  \n",
      "69000 [5.07e-03]\n",
      "69000 [1.00e+00]\n",
      "\n",
      "Best model at step 67000:\n",
      "  train loss: 4.48e+04\n",
      "  test loss: 4.47e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.629129 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008086 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "69000     [2.96e+02, 2.04e-02, 1.83e+01, 8.46e+00, 4.45e+04]    [2.45e+02, 2.04e-02, 1.83e+01, 8.46e+00, 4.45e+04]    []  \n",
      "69000 [5.07e-03]\n",
      "69000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168932.194010      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70000     [3.65e+02, 3.47e-02, 2.18e+01, 8.88e+00, 4.41e+04]    [2.01e+02, 3.47e-02, 2.18e+01, 8.88e+00, 4.41e+04]    []  \n",
      "70000 [5.55e-03]\n",
      "70000 [1.00e+00]\n",
      "\n",
      "Best model at step 70000:\n",
      "  train loss: 4.45e+04\n",
      "  test loss: 4.44e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.996134 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.013307 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "70000     [3.65e+02, 3.47e-02, 2.18e+01, 8.88e+00, 4.41e+04]    [2.01e+02, 3.47e-02, 2.18e+01, 8.88e+00, 4.41e+04]    []  \n",
      "70000 [5.55e-03]\n",
      "70000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724168982.970809      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71000     [4.78e+02, 3.58e-02, 2.31e+01, 9.02e+00, 4.39e+04]    [2.24e+02, 3.58e-02, 2.31e+01, 9.02e+00, 4.39e+04]    []  \n",
      "71000 [5.83e-03]\n",
      "71000 [1.00e+00]\n",
      "\n",
      "Best model at step 71000:\n",
      "  train loss: 4.44e+04\n",
      "  test loss: 4.42e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 50.778713 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011552 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "71000     [4.78e+02, 3.58e-02, 2.31e+01, 9.02e+00, 4.39e+04]    [2.24e+02, 3.58e-02, 2.31e+01, 9.02e+00, 4.39e+04]    []  \n",
      "71000 [5.83e-03]\n",
      "71000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169031.622402      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72000     [3.09e+02, 2.44e-02, 1.99e+01, 8.39e+00, 4.41e+04]    [2.61e+02, 2.44e-02, 1.99e+01, 8.39e+00, 4.41e+04]    []  \n",
      "72000 [5.72e-03]\n",
      "72000 [1.00e+00]\n",
      "\n",
      "Best model at step 72000:\n",
      "  train loss: 4.44e+04\n",
      "  test loss: 4.44e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.553682 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011496 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "72000     [3.09e+02, 2.44e-02, 1.99e+01, 8.39e+00, 4.41e+04]    [2.61e+02, 2.44e-02, 1.99e+01, 8.39e+00, 4.41e+04]    []  \n",
      "72000 [5.72e-03]\n",
      "72000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169080.531660      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73000     [3.17e+02, 3.17e-02, 2.56e+01, 9.04e+00, 4.35e+04]    [2.14e+02, 3.17e-02, 2.56e+01, 9.04e+00, 4.35e+04]    []  \n",
      "73000 [5.87e-03]\n",
      "73000 [1.00e+00]\n",
      "\n",
      "Best model at step 73000:\n",
      "  train loss: 4.39e+04\n",
      "  test loss: 4.38e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.978384 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008584 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "73000     [3.17e+02, 3.17e-02, 2.56e+01, 9.04e+00, 4.35e+04]    [2.14e+02, 3.17e-02, 2.56e+01, 9.04e+00, 4.35e+04]    []  \n",
      "73000 [5.87e-03]\n",
      "73000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169129.324221      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74000     [3.16e+02, 5.54e-02, 2.26e+01, 8.91e+00, 4.36e+04]    [2.65e+02, 5.54e-02, 2.26e+01, 8.91e+00, 4.36e+04]    []  \n",
      "74000 [5.71e-03]\n",
      "74000 [1.00e+00]\n",
      "\n",
      "Best model at step 73000:\n",
      "  train loss: 4.39e+04\n",
      "  test loss: 4.38e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.777095 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.013532 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "74000     [3.16e+02, 5.54e-02, 2.26e+01, 8.91e+00, 4.36e+04]    [2.65e+02, 5.54e-02, 2.26e+01, 8.91e+00, 4.36e+04]    []  \n",
      "74000 [5.71e-03]\n",
      "74000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169178.262859      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75000     [3.14e+02, 3.85e-02, 2.73e+01, 9.05e+00, 4.33e+04]    [2.16e+02, 3.85e-02, 2.73e+01, 9.05e+00, 4.33e+04]    []  \n",
      "75000 [5.90e-03]\n",
      "75000 [1.00e+00]\n",
      "\n",
      "Best model at step 75000:\n",
      "  train loss: 4.36e+04\n",
      "  test loss: 4.35e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.912871 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008957 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "75000     [3.14e+02, 3.85e-02, 2.73e+01, 9.05e+00, 4.33e+04]    [2.16e+02, 3.85e-02, 2.73e+01, 9.05e+00, 4.33e+04]    []  \n",
      "75000 [5.90e-03]\n",
      "75000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169226.899267      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76000     [3.18e+02, 3.50e-02, 2.83e+01, 9.29e+00, 4.31e+04]    [2.14e+02, 3.50e-02, 2.83e+01, 9.29e+00, 4.31e+04]    []  \n",
      "76000 [6.10e-03]\n",
      "76000 [1.00e+00]\n",
      "\n",
      "Best model at step 76000:\n",
      "  train loss: 4.34e+04\n",
      "  test loss: 4.33e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.538535 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008590 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "76000     [3.18e+02, 3.50e-02, 2.83e+01, 9.29e+00, 4.31e+04]    [2.14e+02, 3.50e-02, 2.83e+01, 9.29e+00, 4.31e+04]    []  \n",
      "76000 [6.10e-03]\n",
      "76000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169275.571370      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77000     [3.97e+02, 3.42e-02, 3.00e+01, 9.31e+00, 4.29e+04]    [2.23e+02, 3.42e-02, 3.00e+01, 9.31e+00, 4.29e+04]    []  \n",
      "77000 [6.72e-03]\n",
      "77000 [1.00e+00]\n",
      "\n",
      "Best model at step 77000:\n",
      "  train loss: 4.33e+04\n",
      "  test loss: 4.32e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.666670 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008440 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "77000     [3.97e+02, 3.42e-02, 3.00e+01, 9.31e+00, 4.29e+04]    [2.23e+02, 3.42e-02, 3.00e+01, 9.31e+00, 4.29e+04]    []  \n",
      "77000 [6.72e-03]\n",
      "77000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169323.798715      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78000     [5.28e+02, 3.02e-02, 3.16e+01, 9.46e+00, 4.27e+04]    [2.47e+02, 3.02e-02, 3.16e+01, 9.46e+00, 4.27e+04]    []  \n",
      "78000 [7.09e-03]\n",
      "78000 [1.00e+00]\n",
      "\n",
      "Best model at step 78000:\n",
      "  train loss: 4.33e+04\n",
      "  test loss: 4.30e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.163394 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012924 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "78000     [5.28e+02, 3.02e-02, 3.16e+01, 9.46e+00, 4.27e+04]    [2.47e+02, 3.02e-02, 3.16e+01, 9.46e+00, 4.27e+04]    []  \n",
      "78000 [7.09e-03]\n",
      "78000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169372.052718      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79000     [4.97e+02, 2.89e-02, 3.25e+01, 9.49e+00, 4.25e+04]    [2.40e+02, 2.89e-02, 3.25e+01, 9.49e+00, 4.25e+04]    []  \n",
      "79000 [7.47e-03]\n",
      "79000 [1.00e+00]\n",
      "\n",
      "Best model at step 79000:\n",
      "  train loss: 4.30e+04\n",
      "  test loss: 4.28e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.249386 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008247 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "79000     [4.97e+02, 2.89e-02, 3.25e+01, 9.49e+00, 4.25e+04]    [2.40e+02, 2.89e-02, 3.25e+01, 9.49e+00, 4.25e+04]    []  \n",
      "79000 [7.47e-03]\n",
      "79000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169420.122542      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80000     [3.72e+02, 2.23e-02, 2.36e+01, 7.95e+00, 4.33e+04]    [3.10e+02, 2.23e-02, 2.36e+01, 7.95e+00, 4.33e+04]    []  \n",
      "80000 [7.49e-03]\n",
      "80000 [1.00e+00]\n",
      "\n",
      "Best model at step 79000:\n",
      "  train loss: 4.30e+04\n",
      "  test loss: 4.28e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.095122 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008679 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "80000     [3.72e+02, 2.23e-02, 2.36e+01, 7.95e+00, 4.33e+04]    [3.10e+02, 2.23e-02, 2.36e+01, 7.95e+00, 4.33e+04]    []  \n",
      "80000 [7.49e-03]\n",
      "80000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169468.508396      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "81000     [5.02e+02, 2.53e-02, 3.43e+01, 9.32e+00, 4.22e+04]    [2.64e+02, 2.53e-02, 3.43e+01, 9.32e+00, 4.22e+04]    []  \n",
      "81000 [8.63e-03]\n",
      "81000 [1.00e+00]\n",
      "\n",
      "Best model at step 81000:\n",
      "  train loss: 4.27e+04\n",
      "  test loss: 4.25e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.366398 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008816 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "81000     [5.02e+02, 2.53e-02, 3.43e+01, 9.32e+00, 4.22e+04]    [2.64e+02, 2.53e-02, 3.43e+01, 9.32e+00, 4.22e+04]    []  \n",
      "81000 [8.63e-03]\n",
      "81000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169517.129874      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82000     [3.98e+02, 1.97e-02, 3.04e+01, 9.26e+00, 4.21e+04]    [2.98e+02, 1.97e-02, 3.04e+01, 9.26e+00, 4.21e+04]    []  \n",
      "82000 [8.56e-03]\n",
      "82000 [1.00e+00]\n",
      "\n",
      "Best model at step 82000:\n",
      "  train loss: 4.25e+04\n",
      "  test loss: 4.24e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.719164 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009044 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "82000     [3.98e+02, 1.97e-02, 3.04e+01, 9.26e+00, 4.21e+04]    [2.98e+02, 1.97e-02, 3.04e+01, 9.26e+00, 4.21e+04]    []  \n",
      "82000 [8.56e-03]\n",
      "82000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169565.978624      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83000     [4.29e+02, 7.56e-02, 2.91e+01, 8.99e+00, 4.21e+04]    [3.35e+02, 7.56e-02, 2.91e+01, 8.99e+00, 4.21e+04]    []  \n",
      "83000 [8.38e-03]\n",
      "83000 [1.00e+00]\n",
      "\n",
      "Best model at step 82000:\n",
      "  train loss: 4.25e+04\n",
      "  test loss: 4.24e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.796901 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008759 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "83000     [4.29e+02, 7.56e-02, 2.91e+01, 8.99e+00, 4.21e+04]    [3.35e+02, 7.56e-02, 2.91e+01, 8.99e+00, 4.21e+04]    []  \n",
      "83000 [8.38e-03]\n",
      "83000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169615.292084      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84000     [7.29e+02, 2.63e-02, 3.22e+01, 9.38e+00, 4.17e+04]    [3.24e+02, 2.63e-02, 3.22e+01, 9.38e+00, 4.17e+04]    []  \n",
      "84000 [9.15e-03]\n",
      "84000 [1.00e+00]\n",
      "\n",
      "Best model at step 84000:\n",
      "  train loss: 4.25e+04\n",
      "  test loss: 4.20e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.384713 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011648 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "84000     [7.29e+02, 2.63e-02, 3.22e+01, 9.38e+00, 4.17e+04]    [3.24e+02, 2.63e-02, 3.22e+01, 9.38e+00, 4.17e+04]    []  \n",
      "84000 [9.15e-03]\n",
      "84000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169664.515558      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85000     [4.01e+02, 2.80e-02, 3.75e+01, 9.95e+00, 4.13e+04]    [2.89e+02, 2.80e-02, 3.75e+01, 9.95e+00, 4.13e+04]    []  \n",
      "85000 [9.97e-03]\n",
      "85000 [1.00e+00]\n",
      "\n",
      "Best model at step 85000:\n",
      "  train loss: 4.17e+04\n",
      "  test loss: 4.16e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.211418 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012513 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "85000     [4.01e+02, 2.80e-02, 3.75e+01, 9.95e+00, 4.13e+04]    [2.89e+02, 2.80e-02, 3.75e+01, 9.95e+00, 4.13e+04]    []  \n",
      "85000 [9.97e-03]\n",
      "85000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169713.957373      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "86000     [9.60e+02, 2.81e-02, 3.87e+01, 1.01e+01, 4.10e+04]    [2.87e+02, 2.81e-02, 3.87e+01, 1.01e+01, 4.10e+04]    []  \n",
      "86000 [1.10e-02]\n",
      "86000 [1.00e+00]\n",
      "\n",
      "Best model at step 85000:\n",
      "  train loss: 4.17e+04\n",
      "  test loss: 4.16e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.451061 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012674 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "86000     [9.60e+02, 2.81e-02, 3.87e+01, 1.01e+01, 4.10e+04]    [2.87e+02, 2.81e-02, 3.87e+01, 1.01e+01, 4.10e+04]    []  \n",
      "86000 [1.10e-02]\n",
      "86000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169763.386225      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "87000     [3.71e+02, 5.22e-02, 3.02e+01, 8.29e+00, 4.23e+04]    [3.14e+02, 5.22e-02, 3.02e+01, 8.29e+00, 4.23e+04]    []  \n",
      "87000 [1.08e-02]\n",
      "87000 [1.00e+00]\n",
      "\n",
      "Best model at step 85000:\n",
      "  train loss: 4.17e+04\n",
      "  test loss: 4.16e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.421284 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008710 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "87000     [3.71e+02, 5.22e-02, 3.02e+01, 8.29e+00, 4.23e+04]    [3.14e+02, 5.22e-02, 3.02e+01, 8.29e+00, 4.23e+04]    []  \n",
      "87000 [1.08e-02]\n",
      "87000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169812.672747      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "88000     [6.52e+02, 2.80e-02, 3.97e+01, 1.03e+01, 4.08e+04]    [2.49e+02, 2.80e-02, 3.97e+01, 1.03e+01, 4.08e+04]    []  \n",
      "88000 [1.21e-02]\n",
      "88000 [1.00e+00]\n",
      "\n",
      "Best model at step 88000:\n",
      "  train loss: 4.15e+04\n",
      "  test loss: 4.11e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.172811 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.013101 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "88000     [6.52e+02, 2.80e-02, 3.97e+01, 1.03e+01, 4.08e+04]    [2.49e+02, 2.80e-02, 3.97e+01, 1.03e+01, 4.08e+04]    []  \n",
      "88000 [1.21e-02]\n",
      "88000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169861.823244      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "89000     [4.48e+02, 2.85e-02, 3.34e+01, 1.08e+01, 4.05e+04]    [3.01e+02, 2.85e-02, 3.34e+01, 1.08e+01, 4.05e+04]    []  \n",
      "89000 [1.29e-02]\n",
      "89000 [1.00e+00]\n",
      "\n",
      "Best model at step 89000:\n",
      "  train loss: 4.10e+04\n",
      "  test loss: 4.09e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.213594 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009437 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "89000     [4.48e+02, 2.85e-02, 3.34e+01, 1.08e+01, 4.05e+04]    [3.01e+02, 2.85e-02, 3.34e+01, 1.08e+01, 4.05e+04]    []  \n",
      "89000 [1.29e-02]\n",
      "89000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724169911.217970      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90000     [3.92e+02, 7.27e-02, 3.04e+01, 8.23e+00, 4.22e+04]    [3.39e+02, 7.27e-02, 3.04e+01, 8.23e+00, 4.22e+04]    []  \n",
      "90000 [1.21e-02]\n",
      "90000 [1.00e+00]\n",
      "\n",
      "Best model at step 89000:\n",
      "  train loss: 4.10e+04\n",
      "  test loss: 4.09e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.361735 s\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "# Set backend\n",
    "os.environ[\"DDE_BACKEND\"] = \"tensorflow\"\n",
    "import tensorflow as tf\n",
    "import deepxde as dde\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.interpolate import interp1d\n",
    "from scipy.interpolate import RegularGridInterpolator\n",
    "from deepxde.callbacks import Callback\n",
    "import pandas as pd\n",
    "\n",
    "BATCH_SIZE = 32  # Batch size\n",
    "#LEARNING_RATE = 1e-3  # Learning rate\n",
    "\n",
    "ITERATIONS_A = 20000  # Number of training iterations\n",
    "ITERATIONS_LBFGS = 20000  # Number of training iterations\n",
    "ITERATIONS_A2 = 20000  # Number of training iterations\n",
    "ITERATIONS_LBFGS2 = 10000  # Number of training iterations \n",
    "\n",
    "T_Start = 0\n",
    "TIME_STEP = 0.02\n",
    "T_End = 0.02\n",
    "# Define the computational domain\n",
    "geom = dde.geometry.Interval(-1, 1)\n",
    "time_domain = dde.geometry.TimeDomain(T_Start, T_End)\n",
    "geomtime = dde.geometry.GeometryXTime(geom, time_domain)\n",
    "\n",
    "# Define gamma_2 as a trainable variable with an initial value\n",
    "gamma_1_AC = tf.Variable(1.0, dtype=tf.float32) # Alpha\n",
    "gamma_2_AC = tf.Variable(1.0, dtype=tf.float32, trainable=False) # Kappa \n",
    "def cahn_hilliard(x, y):\n",
    "    print(\"Presumed Alpha\")\n",
    "    print(gamma_1_AC)\n",
    "    dy_t = dde.grad.jacobian(y, x, i=0, j=1)\n",
    "    laplacian_u = dde.grad.hessian(y, x, i=0, j=0)\n",
    "    laplacian_u_cubed = dde.grad.hessian(y**3, x, i=0, j=0)   # second derivative y^3\n",
    "    fourth_derivative_u = dde.grad.hessian(laplacian_u, x, i=0, j=0)\n",
    "    return dy_t - gamma_2_AC * (laplacian_u_cubed - laplacian_u - gamma_1_AC * fourth_derivative_u)\n",
    "\n",
    "# Initial condition Allen Cahn\n",
    "def init_condition_CA(x):\n",
    "    return -np.cos(2 * np.pi * x[:, 0:1])\n",
    "\n",
    "# Initial condition dde for Allen Cahn Equation\n",
    "initial_condition_h_AC = dde.icbc.IC(geomtime, init_condition_CA, lambda _, on_initial: on_initial, component=0)\n",
    "\n",
    "# Boundary Condition for the Allen-Cahn equation\n",
    "bc_h = dde.icbc.PeriodicBC(geomtime, 0, lambda _, on_boundary: on_boundary, derivative_order=0, component=0)\n",
    "bc_h_deriv = dde.icbc.PeriodicBC(geomtime, 0, lambda _, on_boundary: on_boundary, derivative_order=1, component=0)\n",
    "\n",
    "\n",
    "# Load the data from the text file\n",
    "data = np.loadtxt('/kaggle/input/output-ch1d/output-CH1d.txt', skiprows=1)\n",
    "print(data)\n",
    "# Split the data into spatial coordinates (x), time (t), and solution values (u)\n",
    "observed_x = data[:, 0:1]  # The x column (as 2D array)\n",
    "observed_t = data[:, 1:2]  # The t column (as 2D array)\n",
    "observed_h = data[:, 2:4]  # The solution column (as 2D array)\n",
    "# Combine x and t to create the observation points in the space-time domain\n",
    "observed_xt = np.hstack((observed_x, observed_t))\n",
    "# Define the PointSetBC using the observed points and solution values\n",
    "observe_h_AC = dde.icbc.PointSetBC(observed_xt, observed_h, component=0)\n",
    "\n",
    "data_AC_inverse = dde.data.TimePDE(\n",
    "        geomtime,\n",
    "        cahn_hilliard,\n",
    "        #[bc_h, bc_h_deriv, initial_condition_h_AC],  # Include observe_h here\n",
    "        [bc_h, bc_h_deriv, initial_condition_h_AC, observe_h_AC],  # Include observe_h here\n",
    "        num_domain=20000,\n",
    "        num_boundary=1600,\n",
    "        num_initial=4096,\n",
    "        anchors=observed_xt,  # Make sure observed_xt is used as anchors if necessary\n",
    "        num_test=40000,\n",
    "    )\n",
    "\n",
    "# Your file path\n",
    "file_path = \"kaggle/working/losses_simple.txt\"\n",
    "# Check if file exists and delete it\n",
    "if os.path.exists(file_path):\n",
    "    os.remove(file_path)\n",
    "    print(f\"Removed existing file: {file_path}\")\n",
    "\n",
    "class SimpleLossTrackingCallback(Callback):\n",
    "    def __init__(self, every_n_epochs=1000, file_path=file_path):\n",
    "        super(SimpleLossTrackingCallback, self).__init__()\n",
    "        self.every_n_epochs = every_n_epochs\n",
    "        self.file_path = file_path\n",
    "        \n",
    "        # Ensure the directory exists\n",
    "        os.makedirs(os.path.dirname(self.file_path), exist_ok=True)\n",
    "        \n",
    "        # Check if file exists and is not empty, if so, skip writing the header\n",
    "        if not os.path.exists(self.file_path) or os.stat(self.file_path).st_size == 0:\n",
    "            with open(self.file_path, \"w\") as f:\n",
    "                f.write(\"Epoch,PDE Loss,BC1 Loss,BC2 Loss,IC Loss,Observe Loss\\n\")\n",
    "\n",
    "    def on_epoch_end(self):\n",
    "        if self.model.train_state.step % self.every_n_epochs == 0 or self.model.train_state.step == 1:\n",
    "            current_losses = self.model.train_state.loss_train\n",
    "            loss_str = \",\".join(map(str, current_losses))\n",
    "            with open(self.file_path, \"a\") as f:\n",
    "                f.write(f\"{self.model.train_state.step},{loss_str}\\n\")\n",
    "\n",
    "iterations_list = [0]  # Starting with iteration 0\n",
    "\n",
    "gamma_1_values = [gamma_1_AC.value().numpy()]  # Assuming this is how you access the value of your variable\n",
    "gamma_2_values = [gamma_2_AC.value().numpy()]  # Assuming this is how you access the value of your variable\n",
    "\n",
    "# Network Architecure\n",
    "#net = dde.nn.FNN([2] + [128] * 6 + [1], \"tanh\", \"Glorot normal\")\n",
    "net = dde.nn.FNN([2] + [60] * 4 + [1], \"tanh\", \"Glorot normal\")\n",
    "variable_gamma_1 = dde.callbacks.VariableValue(gamma_1_AC, period=1000)\n",
    "variable_gamma_2 = dde.callbacks.VariableValue(gamma_2_AC, period=1000)\n",
    "detailed_loss_tracker = SimpleLossTrackingCallback()\n",
    "model = dde.Model(data_AC_inverse, net)\n",
    "\n",
    "Loss_Weights = [1, 1, 1, 1, 1000]\n",
    "\n",
    "total_iterations = 0\n",
    "while total_iterations < 90000:\n",
    "                # Calculate the number of iterations for this loop\n",
    "                iter_this_loop = 1000\n",
    "                # Update the total iterations\n",
    "                #model.compile(\"adam\", lr=1e-3, loss= 'MSE', loss_weights=Loss_Weights, external_trainable_variables=[gamma_1_AC, gamma_2_AC])\n",
    "                #losshistory, train_state = model.train(epochs=70000, display_every=1000, callbacks=[variable_gamma_1, variable_gamma_2, detailed_loss_tracker])\n",
    "\n",
    "                model.compile(\"adam\", lr=1e-3, loss= 'MSE', loss_weights=Loss_Weights, external_trainable_variables=[gamma_1_AC, gamma_2_AC])\n",
    "                losshistory, train_state = model.train(epochs=iter_this_loop, display_every=1000, callbacks=[variable_gamma_1, variable_gamma_2, detailed_loss_tracker])\n",
    "                # Update gamma value and error after training\n",
    "                current_gamma_1_value = gamma_1_AC.value().numpy()\n",
    "                current_gamma_2_value = gamma_2_AC.value().numpy()\n",
    "\n",
    "                # model.compile(\"L-BFGS\", loss = 'MSE', loss_weights = Loss_Weights, external_trainable_variables=[gamma_2_AC])\n",
    "                # losshistory, train_state = model.train(display_every=1000, callbacks=[observed_data_loss_callback, variable])\n",
    "\n",
    "                # Update gamma value and error after training\n",
    "                gamma_1_values.append(current_gamma_1_value)\n",
    "                gamma_2_values.append(current_gamma_2_value)\n",
    "\n",
    "                iterations_list.append(total_iterations + iter_this_loop)\n",
    "\n",
    "                total_iterations += 1000\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(iterations_list, gamma_1_values, '-o', label='Presumed Alpha', color='blue')\n",
    "plt.plot(iterations_list, gamma_2_values, '-o', label='Presumed Kappa', color='red')\n",
    "plt.xlabel('Gamma Value', fontsize=14)\n",
    "plt.ylabel('Iterations', fontsize=14)\n",
    "plt.title('Iterations vs. Gamma Value', fontsize=16)\n",
    "plt.legend()\n",
    "plt.grid(True, which=\"both\", ls=\"--\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# Load the losses from the file\n",
    "losses_df = pd.read_csv(file_path)\n",
    "\n",
    "# Calculate the total loss as the sum of component-wise losses for each iteration\n",
    "# Assuming that the first column is 'Epoch' and the rest are loss components\n",
    "loss_components = losses_df.columns[1:]  # Exclude 'Epoch'\n",
    "losses_df['Total Loss'] = losses_df[loss_components].sum(axis=1)\n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot component-wise losses\n",
    "for component in loss_components:\n",
    "    plt.plot(losses_df['Epoch'], losses_df[component], label=component)\n",
    "\n",
    "# Plot total loss\n",
    "plt.plot(losses_df['Epoch'], losses_df['Total Loss'], label='Total Loss', color='black', linewidth=2, linestyle='--')\n",
    "\n",
    "plt.xlabel('Iteration', fontsize=14)\n",
    "plt.ylabel('Loss', fontsize=14)\n",
    "plt.title('Loss Components and Total Loss over Iterations', fontsize=16)\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.yscale('log')  # Use logarithmic scale if desired\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3920817a",
   "metadata": {
    "papermill": {
     "duration": 0.102051,
     "end_time": "2024-08-20T16:05:50.684376",
     "exception": false,
     "start_time": "2024-08-20T16:05:50.582325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5522806,
     "sourceId": 9143912,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5566588,
     "sourceId": 9206556,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4419.697184,
   "end_time": "2024-08-20T16:05:54.624667",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-20T14:52:14.927483",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
