{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c079d66a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-20T16:10:41.066405Z",
     "iopub.status.busy": "2024-08-20T16:10:41.066076Z",
     "iopub.status.idle": "2024-08-20T16:10:57.401782Z",
     "shell.execute_reply": "2024-08-20T16:10:57.400853Z"
    },
    "papermill": {
     "duration": 16.341856,
     "end_time": "2024-08-20T16:10:57.404158",
     "exception": false,
     "start_time": "2024-08-20T16:10:41.062302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting deepxde\r\n",
      "  Downloading DeepXDE-1.12.0-py3-none-any.whl.metadata (12 kB)\r\n",
      "Requirement already satisfied: tensorflow in /opt/conda/lib/python3.10/site-packages (2.15.0)\r\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from deepxde) (3.7.5)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.26.4)\r\n",
      "Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.2.2)\r\n",
      "Requirement already satisfied: scikit-optimize>=0.9.0 in /opt/conda/lib/python3.10/site-packages (from deepxde) (0.10.2)\r\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.11.4)\r\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (23.5.26)\r\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.10.0)\r\n",
      "Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (16.0.6)\r\n",
      "Requirement already satisfied: ml-dtypes~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow) (21.3)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.20.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow) (69.0.3)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (4.9.0)\r\n",
      "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.14.1)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.35.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.60.0)\r\n",
      "Requirement already satisfied: tensorboard<2.16,>=2.15 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.1)\r\n",
      "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.0)\r\n",
      "Collecting keras<2.16,>=2.15.0 (from tensorflow)\r\n",
      "  Downloading keras-2.15.0-py3-none-any.whl.metadata (2.4 kB)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow) (0.42.0)\r\n",
      "Requirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.10/site-packages (from scikit-optimize>=0.9.0->deepxde) (1.4.2)\r\n",
      "Requirement already satisfied: pyaml>=16.9 in /opt/conda/lib/python3.10/site-packages (from scikit-optimize>=0.9.0->deepxde) (24.4.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow) (3.1.1)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->deepxde) (3.2.0)\r\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.26.1)\r\n",
      "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.5.2)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.32.3)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.3)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (1.2.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (4.47.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (1.4.5)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (9.5.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (2.9.0.post0)\r\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.2.4)\r\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.3.0)\r\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\r\n",
      "Requirement already satisfied: PyYAML in /opt/conda/lib/python3.10/site-packages (from pyaml>=16.9->scikit-optimize>=0.9.0->deepxde) (6.0.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.7.4)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.3)\r\n",
      "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.5.1)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\r\n",
      "Downloading DeepXDE-1.12.0-py3-none-any.whl (183 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m183.7/183.7 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading keras-2.15.0-py3-none-any.whl (1.7 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m41.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: keras, deepxde\r\n",
      "  Attempting uninstall: keras\r\n",
      "    Found existing installation: keras 3.4.1\r\n",
      "    Uninstalling keras-3.4.1:\r\n",
      "      Successfully uninstalled keras-3.4.1\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed deepxde-1.12.0 keras-2.15.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install deepxde tensorflow\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bb92eb0b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-20T16:10:57.414040Z",
     "iopub.status.busy": "2024-08-20T16:10:57.413766Z",
     "iopub.status.idle": "2024-08-20T17:21:54.911369Z",
     "shell.execute_reply": "2024-08-20T17:21:54.910454Z"
    },
    "papermill": {
     "duration": 4257.504986,
     "end_time": "2024-08-20T17:21:54.913360",
     "exception": false,
     "start_time": "2024-08-20T16:10:57.408374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-20 16:10:59.284226: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-20 16:10:59.284359: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-20 16:10:59.428583: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "Using backend: tensorflow\n",
      "Other supported backends: tensorflow.compat.v1, pytorch, jax, paddle.\n",
      "paddle supports more examples now and is recommended.\n",
      "Enable just-in-time compilation with XLA.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-1.          0.         -0.97347814  4.68327951]\n",
      " [-0.99        0.         -0.97071463  4.68033266]\n",
      " [-0.98        0.         -0.96758276  4.6894865 ]\n",
      " ...\n",
      " [ 0.98        0.02       -0.898314    4.6621666 ]\n",
      " [ 0.99        0.02       -0.89778441  4.64194965]\n",
      " [ 1.          0.02       -0.89689517  4.63153839]]\n",
      "Compiling model...\n",
      "'compile' took 0.003638 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotNormal is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1724170279.184364      24 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "0         [8.41e-02, 7.81e-01, 3.64e-06, 5.71e-01, 5.52e+04]    [8.28e-02, 7.81e-01, 3.64e-06, 5.71e-01, 5.52e+04]    []  \n",
      "0 [5.00e-01]\n",
      "0 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170288.818749      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000      [5.12e+02, 2.93e-04, 1.34e+01, 4.47e+00, 4.69e+04]    [5.60e+02, 2.93e-04, 1.34e+01, 4.47e+00, 4.69e+04]    []  \n",
      "1000 [5.13e-03]\n",
      "1000 [1.00e+00]\n",
      "\n",
      "Best model at step 1000:\n",
      "  train loss: 4.74e+04\n",
      "  test loss: 4.75e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 54.286989 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011201 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "1000      [5.12e+02, 2.93e-04, 1.34e+01, 4.47e+00, 4.69e+04]    [5.60e+02, 2.93e-04, 1.34e+01, 4.47e+00, 4.69e+04]    []  \n",
      "1000 [5.13e-03]\n",
      "1000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170335.812540      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2000      [3.45e+02, 2.87e-04, 1.38e+01, 4.62e+00, 4.68e+04]    [3.56e+02, 2.87e-04, 1.38e+01, 4.62e+00, 4.68e+04]    []  \n",
      "2000 [3.71e-03]\n",
      "2000 [1.00e+00]\n",
      "\n",
      "Best model at step 2000:\n",
      "  train loss: 4.72e+04\n",
      "  test loss: 4.72e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.904437 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011366 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "2000      [3.45e+02, 2.87e-04, 1.38e+01, 4.62e+00, 4.68e+04]    [3.56e+02, 2.87e-04, 1.38e+01, 4.62e+00, 4.68e+04]    []  \n",
      "2000 [3.71e-03]\n",
      "2000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170382.698925      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3000      [3.55e+02, 2.43e-04, 1.39e+01, 4.78e+00, 4.67e+04]    [3.61e+02, 2.43e-04, 1.39e+01, 4.78e+00, 4.67e+04]    []  \n",
      "3000 [3.32e-03]\n",
      "3000 [1.00e+00]\n",
      "\n",
      "Best model at step 3000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.71e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.856240 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008419 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "3000      [3.55e+02, 2.43e-04, 1.39e+01, 4.78e+00, 4.67e+04]    [3.61e+02, 2.43e-04, 1.39e+01, 4.78e+00, 4.67e+04]    []  \n",
      "3000 [3.32e-03]\n",
      "3000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170429.568213      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4000      [3.44e+02, 2.24e-04, 1.38e+01, 4.91e+00, 4.67e+04]    [3.43e+02, 2.24e-04, 1.38e+01, 4.91e+00, 4.67e+04]    []  \n",
      "4000 [3.06e-03]\n",
      "4000 [1.00e+00]\n",
      "\n",
      "Best model at step 4000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.71e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.888527 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008422 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "4000      [3.44e+02, 2.24e-04, 1.38e+01, 4.91e+00, 4.67e+04]    [3.43e+02, 2.24e-04, 1.38e+01, 4.91e+00, 4.67e+04]    []  \n",
      "4000 [3.06e-03]\n",
      "4000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170476.874018      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5000      [3.00e+02, 3.03e-04, 1.26e+01, 4.81e+00, 4.68e+04]    [2.92e+02, 3.03e-04, 1.26e+01, 4.81e+00, 4.68e+04]    []  \n",
      "5000 [3.13e-03]\n",
      "5000 [1.00e+00]\n",
      "\n",
      "Best model at step 4000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.71e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.313138 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011080 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "5000      [3.00e+02, 3.03e-04, 1.26e+01, 4.81e+00, 4.68e+04]    [2.92e+02, 3.03e-04, 1.26e+01, 4.81e+00, 4.68e+04]    []  \n",
      "5000 [3.13e-03]\n",
      "5000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170523.817026      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6000      [3.50e+02, 1.53e-03, 1.26e+01, 4.94e+00, 4.68e+04]    [3.45e+02, 1.53e-03, 1.26e+01, 4.94e+00, 4.68e+04]    []  \n",
      "6000 [3.15e-03]\n",
      "6000 [1.00e+00]\n",
      "\n",
      "Best model at step 4000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.71e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.882719 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011417 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "6000      [3.50e+02, 1.53e-03, 1.26e+01, 4.94e+00, 4.68e+04]    [3.45e+02, 1.53e-03, 1.26e+01, 4.94e+00, 4.68e+04]    []  \n",
      "6000 [3.15e-03]\n",
      "6000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170570.636099      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7000      [6.77e+02, 1.50e-03, 1.26e+01, 5.13e+00, 4.67e+04]    [6.72e+02, 1.50e-03, 1.26e+01, 5.13e+00, 4.67e+04]    []  \n",
      "7000 [2.95e-03]\n",
      "7000 [1.00e+00]\n",
      "\n",
      "Best model at step 4000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.71e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.801944 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008052 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "7000      [6.77e+02, 1.50e-03, 1.26e+01, 5.13e+00, 4.67e+04]    [6.72e+02, 1.50e-03, 1.26e+01, 5.13e+00, 4.67e+04]    []  \n",
      "7000 [2.95e-03]\n",
      "7000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170617.548416      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8000      [4.13e+02, 1.33e-03, 1.19e+01, 5.21e+00, 4.67e+04]    [3.87e+02, 1.33e-03, 1.19e+01, 5.21e+00, 4.67e+04]    []  \n",
      "8000 [3.03e-03]\n",
      "8000 [1.00e+00]\n",
      "\n",
      "Best model at step 4000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.71e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.941493 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007850 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "8000      [4.13e+02, 1.33e-03, 1.19e+01, 5.21e+00, 4.67e+04]    [3.87e+02, 1.33e-03, 1.19e+01, 5.21e+00, 4.67e+04]    []  \n",
      "8000 [3.03e-03]\n",
      "8000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170664.834806      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9000      [2.89e+02, 1.39e-03, 1.22e+01, 5.55e+00, 4.66e+04]    [2.55e+02, 1.39e-03, 1.22e+01, 5.55e+00, 4.66e+04]    []  \n",
      "9000 [3.12e-03]\n",
      "9000 [1.00e+00]\n",
      "\n",
      "Best model at step 9000:\n",
      "  train loss: 4.69e+04\n",
      "  test loss: 4.69e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.270477 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007786 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "9000      [2.89e+02, 1.39e-03, 1.22e+01, 5.55e+00, 4.66e+04]    [2.55e+02, 1.39e-03, 1.22e+01, 5.55e+00, 4.66e+04]    []  \n",
      "9000 [3.12e-03]\n",
      "9000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170711.794524      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000     [2.82e+02, 2.42e-03, 1.18e+01, 5.76e+00, 4.66e+04]    [2.50e+02, 2.42e-03, 1.18e+01, 5.76e+00, 4.66e+04]    []  \n",
      "10000 [3.30e-03]\n",
      "10000 [1.00e+00]\n",
      "\n",
      "Best model at step 10000:\n",
      "  train loss: 4.69e+04\n",
      "  test loss: 4.68e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.912522 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011490 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "10000     [2.82e+02, 2.42e-03, 1.18e+01, 5.76e+00, 4.66e+04]    [2.50e+02, 2.42e-03, 1.18e+01, 5.76e+00, 4.66e+04]    []  \n",
      "10000 [3.30e-03]\n",
      "10000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170758.641066      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11000     [2.69e+02, 1.91e-03, 1.13e+01, 5.99e+00, 4.65e+04]    [2.03e+02, 1.91e-03, 1.13e+01, 5.99e+00, 4.65e+04]    []  \n",
      "11000 [3.22e-03]\n",
      "11000 [1.00e+00]\n",
      "\n",
      "Best model at step 11000:\n",
      "  train loss: 4.68e+04\n",
      "  test loss: 4.68e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.865270 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007601 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "11000     [2.69e+02, 1.91e-03, 1.13e+01, 5.99e+00, 4.65e+04]    [2.03e+02, 1.91e-03, 1.13e+01, 5.99e+00, 4.65e+04]    []  \n",
      "11000 [3.22e-03]\n",
      "11000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170805.501905      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12000     [2.25e+02, 1.74e-03, 1.10e+01, 6.33e+00, 4.65e+04]    [1.98e+02, 1.74e-03, 1.10e+01, 6.33e+00, 4.65e+04]    []  \n",
      "12000 [3.18e-03]\n",
      "12000 [1.00e+00]\n",
      "\n",
      "Best model at step 12000:\n",
      "  train loss: 4.67e+04\n",
      "  test loss: 4.67e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.869111 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011216 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "12000     [2.25e+02, 1.74e-03, 1.10e+01, 6.33e+00, 4.65e+04]    [1.98e+02, 1.74e-03, 1.10e+01, 6.33e+00, 4.65e+04]    []  \n",
      "12000 [3.18e-03]\n",
      "12000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170852.413725      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13000     [1.24e+03, 1.13e-03, 1.08e+01, 6.62e+00, 4.64e+04]    [1.04e+03, 1.13e-03, 1.08e+01, 6.62e+00, 4.64e+04]    []  \n",
      "13000 [3.16e-03]\n",
      "13000 [1.00e+00]\n",
      "\n",
      "Best model at step 12000:\n",
      "  train loss: 4.67e+04\n",
      "  test loss: 4.67e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.888192 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007856 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "13000     [1.24e+03, 1.13e-03, 1.08e+01, 6.62e+00, 4.64e+04]    [1.04e+03, 1.13e-03, 1.08e+01, 6.62e+00, 4.64e+04]    []  \n",
      "13000 [3.16e-03]\n",
      "13000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170899.308657      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14000     [2.70e+02, 1.97e-03, 1.05e+01, 7.01e+00, 4.63e+04]    [2.56e+02, 1.97e-03, 1.05e+01, 7.01e+00, 4.63e+04]    []  \n",
      "14000 [3.30e-03]\n",
      "14000 [1.00e+00]\n",
      "\n",
      "Best model at step 14000:\n",
      "  train loss: 4.66e+04\n",
      "  test loss: 4.66e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.864747 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007646 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "14000     [2.70e+02, 1.97e-03, 1.05e+01, 7.01e+00, 4.63e+04]    [2.56e+02, 1.97e-03, 1.05e+01, 7.01e+00, 4.63e+04]    []  \n",
      "14000 [3.30e-03]\n",
      "14000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170946.752765      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15000     [1.73e+02, 2.30e-03, 1.04e+01, 7.33e+00, 4.63e+04]    [1.90e+02, 2.30e-03, 1.04e+01, 7.33e+00, 4.63e+04]    []  \n",
      "15000 [3.46e-03]\n",
      "15000 [1.00e+00]\n",
      "\n",
      "Best model at step 15000:\n",
      "  train loss: 4.65e+04\n",
      "  test loss: 4.65e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.427491 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008146 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "15000     [1.73e+02, 2.30e-03, 1.04e+01, 7.33e+00, 4.63e+04]    [1.90e+02, 2.30e-03, 1.04e+01, 7.33e+00, 4.63e+04]    []  \n",
      "15000 [3.46e-03]\n",
      "15000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724170993.616731      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16000     [1.55e+02, 2.28e-03, 9.94e+00, 7.64e+00, 4.62e+04]    [1.67e+02, 2.28e-03, 9.94e+00, 7.64e+00, 4.62e+04]    []  \n",
      "16000 [3.53e-03]\n",
      "16000 [1.00e+00]\n",
      "\n",
      "Best model at step 16000:\n",
      "  train loss: 4.64e+04\n",
      "  test loss: 4.64e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.831173 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007931 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "16000     [1.55e+02, 2.28e-03, 9.94e+00, 7.64e+00, 4.62e+04]    [1.67e+02, 2.28e-03, 9.94e+00, 7.64e+00, 4.62e+04]    []  \n",
      "16000 [3.53e-03]\n",
      "16000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171040.507957      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17000     [1.52e+02, 1.90e-03, 9.85e+00, 7.89e+00, 4.62e+04]    [1.71e+02, 1.90e-03, 9.85e+00, 7.89e+00, 4.62e+04]    []  \n",
      "17000 [3.83e-03]\n",
      "17000 [1.00e+00]\n",
      "\n",
      "Best model at step 17000:\n",
      "  train loss: 4.64e+04\n",
      "  test loss: 4.64e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.898569 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007940 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "17000     [1.52e+02, 1.90e-03, 9.85e+00, 7.89e+00, 4.62e+04]    [1.71e+02, 1.90e-03, 9.85e+00, 7.89e+00, 4.62e+04]    []  \n",
      "17000 [3.83e-03]\n",
      "17000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171087.372146      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18000     [1.54e+02, 2.37e-03, 9.48e+00, 8.15e+00, 4.62e+04]    [1.61e+02, 2.37e-03, 9.48e+00, 8.15e+00, 4.62e+04]    []  \n",
      "18000 [3.90e-03]\n",
      "18000 [1.00e+00]\n",
      "\n",
      "Best model at step 18000:\n",
      "  train loss: 4.63e+04\n",
      "  test loss: 4.63e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.888981 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011575 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "18000     [1.54e+02, 2.37e-03, 9.48e+00, 8.15e+00, 4.62e+04]    [1.61e+02, 2.37e-03, 9.48e+00, 8.15e+00, 4.62e+04]    []  \n",
      "18000 [3.90e-03]\n",
      "18000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171134.275301      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19000     [1.88e+02, 2.65e-03, 9.16e+00, 8.15e+00, 4.62e+04]    [1.93e+02, 2.65e-03, 9.16e+00, 8.15e+00, 4.62e+04]    []  \n",
      "19000 [4.07e-03]\n",
      "19000 [1.00e+00]\n",
      "\n",
      "Best model at step 18000:\n",
      "  train loss: 4.63e+04\n",
      "  test loss: 4.63e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.900184 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007818 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "19000     [1.88e+02, 2.65e-03, 9.16e+00, 8.15e+00, 4.62e+04]    [1.93e+02, 2.65e-03, 9.16e+00, 8.15e+00, 4.62e+04]    []  \n",
      "19000 [4.07e-03]\n",
      "19000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171181.172876      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20000     [2.28e+02, 2.89e-03, 8.88e+00, 8.49e+00, 4.61e+04]    [2.22e+02, 2.89e-03, 8.88e+00, 8.49e+00, 4.61e+04]    []  \n",
      "20000 [4.19e-03]\n",
      "20000 [1.00e+00]\n",
      "\n",
      "Best model at step 18000:\n",
      "  train loss: 4.63e+04\n",
      "  test loss: 4.63e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.876749 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007952 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "20000     [2.28e+02, 2.89e-03, 8.88e+00, 8.49e+00, 4.61e+04]    [2.22e+02, 2.89e-03, 8.88e+00, 8.49e+00, 4.61e+04]    []  \n",
      "20000 [4.19e-03]\n",
      "20000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171228.078018      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21000     [1.45e+02, 2.12e-03, 8.73e+00, 8.81e+00, 4.60e+04]    [1.53e+02, 2.12e-03, 8.73e+00, 8.81e+00, 4.60e+04]    []  \n",
      "21000 [4.09e-03]\n",
      "21000 [1.00e+00]\n",
      "\n",
      "Best model at step 21000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.904052 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011296 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "21000     [1.45e+02, 2.12e-03, 8.73e+00, 8.81e+00, 4.60e+04]    [1.53e+02, 2.12e-03, 8.73e+00, 8.81e+00, 4.60e+04]    []  \n",
      "21000 [4.09e-03]\n",
      "21000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171275.742833      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22000     [1.39e+02, 2.07e-03, 8.72e+00, 8.99e+00, 4.60e+04]    [1.55e+02, 2.07e-03, 8.72e+00, 8.99e+00, 4.60e+04]    []  \n",
      "22000 [4.23e-03]\n",
      "22000 [1.00e+00]\n",
      "\n",
      "Best model at step 22000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.627614 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007796 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "22000     [1.39e+02, 2.07e-03, 8.72e+00, 8.99e+00, 4.60e+04]    [1.55e+02, 2.07e-03, 8.72e+00, 8.99e+00, 4.60e+04]    []  \n",
      "22000 [4.23e-03]\n",
      "22000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171322.613750      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23000     [1.42e+02, 1.81e-03, 8.61e+00, 9.07e+00, 4.60e+04]    [1.62e+02, 1.81e-03, 8.61e+00, 9.07e+00, 4.60e+04]    []  \n",
      "23000 [4.22e-03]\n",
      "23000 [1.00e+00]\n",
      "\n",
      "Best model at step 23000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.879240 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007710 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "23000     [1.42e+02, 1.81e-03, 8.61e+00, 9.07e+00, 4.60e+04]    [1.62e+02, 1.81e-03, 8.61e+00, 9.07e+00, 4.60e+04]    []  \n",
      "23000 [4.22e-03]\n",
      "23000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171369.607732      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24000     [1.49e+02, 1.31e-03, 8.41e+00, 9.23e+00, 4.60e+04]    [1.56e+02, 1.31e-03, 8.41e+00, 9.23e+00, 4.60e+04]    []  \n",
      "24000 [4.19e-03]\n",
      "24000 [1.00e+00]\n",
      "\n",
      "Best model at step 24000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.954360 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007846 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "24000     [1.49e+02, 1.31e-03, 8.41e+00, 9.23e+00, 4.60e+04]    [1.56e+02, 1.31e-03, 8.41e+00, 9.23e+00, 4.60e+04]    []  \n",
      "24000 [4.19e-03]\n",
      "24000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171416.475850      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25000     [1.53e+02, 1.01e-03, 8.47e+00, 9.38e+00, 4.60e+04]    [1.70e+02, 1.01e-03, 8.47e+00, 9.38e+00, 4.60e+04]    []  \n",
      "25000 [4.31e-03]\n",
      "25000 [1.00e+00]\n",
      "\n",
      "Best model at step 25000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.891649 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007770 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "25000     [1.53e+02, 1.01e-03, 8.47e+00, 9.38e+00, 4.60e+04]    [1.70e+02, 1.01e-03, 8.47e+00, 9.38e+00, 4.60e+04]    []  \n",
      "25000 [4.31e-03]\n",
      "25000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171463.403845      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26000     [2.31e+02, 9.28e-04, 8.27e+00, 9.31e+00, 4.60e+04]    [1.91e+02, 9.28e-04, 8.27e+00, 9.31e+00, 4.60e+04]    []  \n",
      "26000 [4.33e-03]\n",
      "26000 [1.00e+00]\n",
      "\n",
      "Best model at step 25000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.907024 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007868 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "26000     [2.31e+02, 9.28e-04, 8.27e+00, 9.31e+00, 4.60e+04]    [1.91e+02, 9.28e-04, 8.27e+00, 9.31e+00, 4.60e+04]    []  \n",
      "26000 [4.33e-03]\n",
      "26000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171510.336788      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "27000     [1.44e+02, 5.86e-04, 8.37e+00, 9.62e+00, 4.59e+04]    [1.62e+02, 5.86e-04, 8.37e+00, 9.62e+00, 4.59e+04]    []  \n",
      "27000 [4.42e-03]\n",
      "27000 [1.00e+00]\n",
      "\n",
      "Best model at step 27000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.908813 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008463 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "27000     [1.44e+02, 5.86e-04, 8.37e+00, 9.62e+00, 4.59e+04]    [1.62e+02, 5.86e-04, 8.37e+00, 9.62e+00, 4.59e+04]    []  \n",
      "27000 [4.42e-03]\n",
      "27000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171557.360497      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28000     [1.82e+02, 6.33e-04, 8.14e+00, 9.56e+00, 4.59e+04]    [1.67e+02, 6.33e-04, 8.14e+00, 9.56e+00, 4.59e+04]    []  \n",
      "28000 [4.42e-03]\n",
      "28000 [1.00e+00]\n",
      "\n",
      "Best model at step 27000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.147206 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007942 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "28000     [1.82e+02, 6.33e-04, 8.14e+00, 9.56e+00, 4.59e+04]    [1.67e+02, 6.33e-04, 8.14e+00, 9.56e+00, 4.59e+04]    []  \n",
      "28000 [4.42e-03]\n",
      "28000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171604.555478      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29000     [1.47e+02, 6.09e-04, 8.27e+00, 9.73e+00, 4.59e+04]    [1.62e+02, 6.09e-04, 8.27e+00, 9.73e+00, 4.59e+04]    []  \n",
      "29000 [4.51e-03]\n",
      "29000 [1.00e+00]\n",
      "\n",
      "Best model at step 29000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.126219 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007950 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "29000     [1.47e+02, 6.09e-04, 8.27e+00, 9.73e+00, 4.59e+04]    [1.62e+02, 6.09e-04, 8.27e+00, 9.73e+00, 4.59e+04]    []  \n",
      "29000 [4.51e-03]\n",
      "29000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171651.659336      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30000     [1.59e+02, 7.32e-04, 8.17e+00, 9.40e+00, 4.60e+04]    [1.60e+02, 7.32e-04, 8.17e+00, 9.40e+00, 4.60e+04]    []  \n",
      "30000 [4.39e-03]\n",
      "30000 [1.00e+00]\n",
      "\n",
      "Best model at step 29000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.068166 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007803 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "30000     [1.59e+02, 7.32e-04, 8.17e+00, 9.40e+00, 4.60e+04]    [1.60e+02, 7.32e-04, 8.17e+00, 9.40e+00, 4.60e+04]    []  \n",
      "30000 [4.39e-03]\n",
      "30000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171699.482152      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31000     [1.50e+02, 6.26e-04, 8.17e+00, 9.86e+00, 4.59e+04]    [1.66e+02, 6.26e-04, 8.17e+00, 9.86e+00, 4.59e+04]    []  \n",
      "31000 [4.51e-03]\n",
      "31000 [1.00e+00]\n",
      "\n",
      "Best model at step 31000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.772937 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007800 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "31000     [1.50e+02, 6.26e-04, 8.17e+00, 9.86e+00, 4.59e+04]    [1.66e+02, 6.26e-04, 8.17e+00, 9.86e+00, 4.59e+04]    []  \n",
      "31000 [4.51e-03]\n",
      "31000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171746.491847      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32000     [1.51e+02, 5.80e-04, 8.13e+00, 9.92e+00, 4.59e+04]    [1.64e+02, 5.80e-04, 8.13e+00, 9.92e+00, 4.59e+04]    []  \n",
      "32000 [4.52e-03]\n",
      "32000 [1.00e+00]\n",
      "\n",
      "Best model at step 32000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.015044 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011327 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "32000     [1.51e+02, 5.80e-04, 8.13e+00, 9.92e+00, 4.59e+04]    [1.64e+02, 5.80e-04, 8.13e+00, 9.92e+00, 4.59e+04]    []  \n",
      "32000 [4.52e-03]\n",
      "32000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171793.436947      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33000     [1.89e+02, 6.26e-04, 8.10e+00, 9.86e+00, 4.59e+04]    [1.79e+02, 6.26e-04, 8.10e+00, 9.86e+00, 4.59e+04]    []  \n",
      "33000 [4.57e-03]\n",
      "33000 [1.00e+00]\n",
      "\n",
      "Best model at step 32000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.902055 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008079 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "33000     [1.89e+02, 6.26e-04, 8.10e+00, 9.86e+00, 4.59e+04]    [1.79e+02, 6.26e-04, 8.10e+00, 9.86e+00, 4.59e+04]    []  \n",
      "33000 [4.57e-03]\n",
      "33000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171840.364564      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34000     [1.27e+02, 8.19e-04, 8.02e+00, 9.57e+00, 4.59e+04]    [1.51e+02, 8.19e-04, 8.02e+00, 9.57e+00, 4.59e+04]    []  \n",
      "34000 [4.55e-03]\n",
      "34000 [1.00e+00]\n",
      "\n",
      "Best model at step 32000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.938502 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007685 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "34000     [1.27e+02, 8.19e-04, 8.02e+00, 9.57e+00, 4.59e+04]    [1.51e+02, 8.19e-04, 8.02e+00, 9.57e+00, 4.59e+04]    []  \n",
      "34000 [4.55e-03]\n",
      "34000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171887.218918      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35000     [1.55e+02, 6.44e-04, 8.07e+00, 1.01e+01, 4.58e+04]    [1.70e+02, 6.44e-04, 8.07e+00, 1.01e+01, 4.58e+04]    []  \n",
      "35000 [4.42e-03]\n",
      "35000 [1.00e+00]\n",
      "\n",
      "Best model at step 35000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.851464 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011304 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "35000     [1.55e+02, 6.44e-04, 8.07e+00, 1.01e+01, 4.58e+04]    [1.70e+02, 6.44e-04, 8.07e+00, 1.01e+01, 4.58e+04]    []  \n",
      "35000 [4.42e-03]\n",
      "35000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171934.130176      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36000     [1.92e+02, 6.62e-04, 7.95e+00, 9.93e+00, 4.58e+04]    [1.88e+02, 6.62e-04, 7.95e+00, 9.93e+00, 4.58e+04]    []  \n",
      "36000 [4.44e-03]\n",
      "36000 [1.00e+00]\n",
      "\n",
      "Best model at step 35000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.883161 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007752 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "36000     [1.92e+02, 6.62e-04, 7.95e+00, 9.93e+00, 4.58e+04]    [1.88e+02, 6.62e-04, 7.95e+00, 9.93e+00, 4.58e+04]    []  \n",
      "36000 [4.44e-03]\n",
      "36000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724171980.995261      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37000     [1.62e+02, 6.44e-04, 8.07e+00, 1.01e+01, 4.58e+04]    [1.72e+02, 6.44e-04, 8.07e+00, 1.01e+01, 4.58e+04]    []  \n",
      "37000 [4.47e-03]\n",
      "37000 [1.00e+00]\n",
      "\n",
      "Best model at step 37000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.857410 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007671 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "37000     [1.62e+02, 6.44e-04, 8.07e+00, 1.01e+01, 4.58e+04]    [1.72e+02, 6.44e-04, 8.07e+00, 1.01e+01, 4.58e+04]    []  \n",
      "37000 [4.47e-03]\n",
      "37000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172027.979714      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38000     [1.66e+02, 5.70e-04, 8.03e+00, 1.00e+01, 4.58e+04]    [1.79e+02, 5.70e-04, 8.03e+00, 1.00e+01, 4.58e+04]    []  \n",
      "38000 [4.51e-03]\n",
      "38000 [1.00e+00]\n",
      "\n",
      "Best model at step 38000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.004567 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011319 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "38000     [1.66e+02, 5.70e-04, 8.03e+00, 1.00e+01, 4.58e+04]    [1.79e+02, 5.70e-04, 8.03e+00, 1.00e+01, 4.58e+04]    []  \n",
      "38000 [4.51e-03]\n",
      "38000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172074.827925      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39000     [3.49e+02, 6.57e-04, 7.92e+00, 9.90e+00, 4.57e+04]    [2.69e+02, 6.57e-04, 7.92e+00, 9.90e+00, 4.57e+04]    []  \n",
      "39000 [4.43e-03]\n",
      "39000 [1.00e+00]\n",
      "\n",
      "Best model at step 38000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.833820 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007637 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "39000     [3.49e+02, 6.57e-04, 7.92e+00, 9.90e+00, 4.57e+04]    [2.69e+02, 6.57e-04, 7.92e+00, 9.90e+00, 4.57e+04]    []  \n",
      "39000 [4.43e-03]\n",
      "39000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172121.822915      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40000     [1.55e+02, 9.24e-04, 8.10e+00, 1.01e+01, 4.58e+04]    [1.71e+02, 9.24e-04, 8.10e+00, 1.01e+01, 4.58e+04]    []  \n",
      "40000 [4.41e-03]\n",
      "40000 [1.00e+00]\n",
      "\n",
      "Best model at step 38000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.967215 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007843 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "40000     [1.55e+02, 9.24e-04, 8.10e+00, 1.01e+01, 4.58e+04]    [1.71e+02, 9.24e-04, 8.10e+00, 1.01e+01, 4.58e+04]    []  \n",
      "40000 [4.41e-03]\n",
      "40000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172168.712958      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41000     [1.66e+02, 4.49e-04, 7.95e+00, 1.01e+01, 4.57e+04]    [1.74e+02, 4.49e-04, 7.95e+00, 1.01e+01, 4.57e+04]    []  \n",
      "41000 [4.45e-03]\n",
      "41000 [1.00e+00]\n",
      "\n",
      "Best model at step 41000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.59e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.899980 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007689 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "41000     [1.66e+02, 4.49e-04, 7.95e+00, 1.01e+01, 4.57e+04]    [1.74e+02, 4.49e-04, 7.95e+00, 1.01e+01, 4.57e+04]    []  \n",
      "41000 [4.45e-03]\n",
      "41000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172216.865699      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42000     [2.01e+02, 4.34e-04, 7.85e+00, 9.90e+00, 4.57e+04]    [1.92e+02, 4.34e-04, 7.85e+00, 9.90e+00, 4.57e+04]    []  \n",
      "42000 [4.54e-03]\n",
      "42000 [1.00e+00]\n",
      "\n",
      "Best model at step 42000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.59e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.092394 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008276 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "42000     [2.01e+02, 4.34e-04, 7.85e+00, 9.90e+00, 4.57e+04]    [1.92e+02, 4.34e-04, 7.85e+00, 9.90e+00, 4.57e+04]    []  \n",
      "42000 [4.54e-03]\n",
      "42000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172263.743152      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43000     [2.23e+02, 6.62e-04, 7.71e+00, 9.74e+00, 4.56e+04]    [2.08e+02, 6.62e-04, 7.71e+00, 9.74e+00, 4.56e+04]    []  \n",
      "43000 [4.52e-03]\n",
      "43000 [1.00e+00]\n",
      "\n",
      "Best model at step 43000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.59e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.898377 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007871 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "43000     [2.23e+02, 6.62e-04, 7.71e+00, 9.74e+00, 4.56e+04]    [2.08e+02, 6.62e-04, 7.71e+00, 9.74e+00, 4.56e+04]    []  \n",
      "43000 [4.52e-03]\n",
      "43000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172310.705172      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44000     [1.45e+02, 1.08e-03, 8.15e+00, 9.62e+00, 4.59e+04]    [1.61e+02, 1.08e-03, 8.15e+00, 9.62e+00, 4.59e+04]    []  \n",
      "44000 [4.54e-03]\n",
      "44000 [1.00e+00]\n",
      "\n",
      "Best model at step 43000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.59e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.957238 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007800 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "44000     [1.45e+02, 1.08e-03, 8.15e+00, 9.62e+00, 4.59e+04]    [1.61e+02, 1.08e-03, 8.15e+00, 9.62e+00, 4.59e+04]    []  \n",
      "44000 [4.54e-03]\n",
      "44000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172357.611982      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45000     [1.85e+02, 4.78e-04, 7.72e+00, 9.70e+00, 4.55e+04]    [1.85e+02, 4.78e-04, 7.72e+00, 9.70e+00, 4.55e+04]    []  \n",
      "45000 [4.53e-03]\n",
      "45000 [1.00e+00]\n",
      "\n",
      "Best model at step 45000:\n",
      "  train loss: 4.57e+04\n",
      "  test loss: 4.57e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.905966 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007824 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "45000     [1.85e+02, 4.78e-04, 7.72e+00, 9.70e+00, 4.55e+04]    [1.85e+02, 4.78e-04, 7.72e+00, 9.70e+00, 4.55e+04]    []  \n",
      "45000 [4.53e-03]\n",
      "45000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172404.612191      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46000     [1.67e+02, 1.91e-03, 8.02e+00, 9.59e+00, 4.57e+04]    [1.73e+02, 1.91e-03, 8.02e+00, 9.59e+00, 4.57e+04]    []  \n",
      "46000 [4.51e-03]\n",
      "46000 [1.00e+00]\n",
      "\n",
      "Best model at step 45000:\n",
      "  train loss: 4.57e+04\n",
      "  test loss: 4.57e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.975530 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011370 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "46000     [1.67e+02, 1.91e-03, 8.02e+00, 9.59e+00, 4.57e+04]    [1.73e+02, 1.91e-03, 8.02e+00, 9.59e+00, 4.57e+04]    []  \n",
      "46000 [4.51e-03]\n",
      "46000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172451.619767      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "47000     [2.12e+02, 2.26e-03, 7.75e+00, 9.58e+00, 4.54e+04]    [2.10e+02, 2.26e-03, 7.75e+00, 9.58e+00, 4.54e+04]    []  \n",
      "47000 [4.40e-03]\n",
      "47000 [1.00e+00]\n",
      "\n",
      "Best model at step 47000:\n",
      "  train loss: 4.56e+04\n",
      "  test loss: 4.56e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.024735 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011290 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "47000     [2.12e+02, 2.26e-03, 7.75e+00, 9.58e+00, 4.54e+04]    [2.10e+02, 2.26e-03, 7.75e+00, 9.58e+00, 4.54e+04]    []  \n",
      "47000 [4.40e-03]\n",
      "47000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172498.825427      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48000     [1.59e+02, 2.60e-03, 8.75e+00, 9.26e+00, 4.59e+04]    [1.81e+02, 2.60e-03, 8.75e+00, 9.26e+00, 4.59e+04]    []  \n",
      "48000 [4.58e-03]\n",
      "48000 [1.00e+00]\n",
      "\n",
      "Best model at step 47000:\n",
      "  train loss: 4.56e+04\n",
      "  test loss: 4.56e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.185463 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008022 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "48000     [1.59e+02, 2.60e-03, 8.75e+00, 9.26e+00, 4.59e+04]    [1.81e+02, 2.60e-03, 8.75e+00, 9.26e+00, 4.59e+04]    []  \n",
      "48000 [4.58e-03]\n",
      "48000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172545.747777      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49000     [2.46e+02, 1.20e-03, 7.41e+00, 8.94e+00, 4.52e+04]    [2.25e+02, 1.20e-03, 7.41e+00, 8.94e+00, 4.52e+04]    []  \n",
      "49000 [4.41e-03]\n",
      "49000 [1.00e+00]\n",
      "\n",
      "Best model at step 49000:\n",
      "  train loss: 4.54e+04\n",
      "  test loss: 4.54e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.854273 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007647 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "49000     [2.46e+02, 1.20e-03, 7.41e+00, 8.94e+00, 4.52e+04]    [2.25e+02, 1.20e-03, 7.41e+00, 8.94e+00, 4.52e+04]    []  \n",
      "49000 [4.41e-03]\n",
      "49000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172592.693111      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50000     [3.17e+02, 2.06e-03, 8.13e+00, 9.03e+00, 4.49e+04]    [2.88e+02, 2.06e-03, 8.13e+00, 9.03e+00, 4.49e+04]    []  \n",
      "50000 [4.54e-03]\n",
      "50000 [1.00e+00]\n",
      "\n",
      "Best model at step 50000:\n",
      "  train loss: 4.53e+04\n",
      "  test loss: 4.52e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.986612 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007701 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "50000     [3.17e+02, 2.06e-03, 8.13e+00, 9.03e+00, 4.49e+04]    [2.88e+02, 2.06e-03, 8.13e+00, 9.03e+00, 4.49e+04]    []  \n",
      "50000 [4.54e-03]\n",
      "50000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172639.573098      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51000     [3.30e+02, 1.76e-03, 8.18e+00, 8.99e+00, 4.48e+04]    [2.74e+02, 1.76e-03, 8.18e+00, 8.99e+00, 4.48e+04]    []  \n",
      "51000 [4.66e-03]\n",
      "51000 [1.00e+00]\n",
      "\n",
      "Best model at step 51000:\n",
      "  train loss: 4.51e+04\n",
      "  test loss: 4.51e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.882830 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007836 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "51000     [3.30e+02, 1.76e-03, 8.18e+00, 8.99e+00, 4.48e+04]    [2.74e+02, 1.76e-03, 8.18e+00, 8.99e+00, 4.48e+04]    []  \n",
      "51000 [4.66e-03]\n",
      "51000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172686.702818      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "52000     [8.15e+02, 1.94e-03, 8.71e+00, 8.59e+00, 4.48e+04]    [3.56e+02, 1.94e-03, 8.71e+00, 8.59e+00, 4.48e+04]    []  \n",
      "52000 [5.05e-03]\n",
      "52000 [1.00e+00]\n",
      "\n",
      "Best model at step 51000:\n",
      "  train loss: 4.51e+04\n",
      "  test loss: 4.51e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.140230 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007818 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "52000     [8.15e+02, 1.94e-03, 8.71e+00, 8.59e+00, 4.48e+04]    [3.56e+02, 1.94e-03, 8.71e+00, 8.59e+00, 4.48e+04]    []  \n",
      "52000 [5.05e-03]\n",
      "52000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172733.686266      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53000     [2.20e+02, 2.21e-03, 9.80e+00, 8.25e+00, 4.56e+04]    [2.05e+02, 2.21e-03, 9.80e+00, 8.25e+00, 4.56e+04]    []  \n",
      "53000 [4.95e-03]\n",
      "53000 [1.00e+00]\n",
      "\n",
      "Best model at step 51000:\n",
      "  train loss: 4.51e+04\n",
      "  test loss: 4.51e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.077576 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011333 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "53000     [2.20e+02, 2.21e-03, 9.80e+00, 8.25e+00, 4.56e+04]    [2.05e+02, 2.21e-03, 9.80e+00, 8.25e+00, 4.56e+04]    []  \n",
      "53000 [4.95e-03]\n",
      "53000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172780.854509      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54000     [2.80e+02, 5.05e-03, 9.64e+00, 8.94e+00, 4.43e+04]    [2.15e+02, 5.05e-03, 9.64e+00, 8.94e+00, 4.43e+04]    []  \n",
      "54000 [5.21e-03]\n",
      "54000 [1.00e+00]\n",
      "\n",
      "Best model at step 54000:\n",
      "  train loss: 4.46e+04\n",
      "  test loss: 4.46e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.993911 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011581 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "54000     [2.80e+02, 5.05e-03, 9.64e+00, 8.94e+00, 4.43e+04]    [2.15e+02, 5.05e-03, 9.64e+00, 8.94e+00, 4.43e+04]    []  \n",
      "54000 [5.21e-03]\n",
      "54000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172829.183948      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55000     [2.42e+02, 4.40e-03, 1.05e+01, 8.03e+00, 4.53e+04]    [2.06e+02, 4.40e-03, 1.05e+01, 8.03e+00, 4.53e+04]    []  \n",
      "55000 [5.21e-03]\n",
      "55000 [1.00e+00]\n",
      "\n",
      "Best model at step 54000:\n",
      "  train loss: 4.46e+04\n",
      "  test loss: 4.46e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.329871 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012025 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "55000     [2.42e+02, 4.40e-03, 1.05e+01, 8.03e+00, 4.53e+04]    [2.06e+02, 4.40e-03, 1.05e+01, 8.03e+00, 4.53e+04]    []  \n",
      "55000 [5.21e-03]\n",
      "55000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172876.050488      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56000     [9.46e+02, 9.90e-03, 1.05e+01, 8.95e+00, 4.40e+04]    [2.70e+02, 9.90e-03, 1.05e+01, 8.95e+00, 4.40e+04]    []  \n",
      "56000 [5.27e-03]\n",
      "56000 [1.00e+00]\n",
      "\n",
      "Best model at step 54000:\n",
      "  train loss: 4.46e+04\n",
      "  test loss: 4.46e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.964295 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011436 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "56000     [9.46e+02, 9.90e-03, 1.05e+01, 8.95e+00, 4.40e+04]    [2.70e+02, 9.90e-03, 1.05e+01, 8.95e+00, 4.40e+04]    []  \n",
      "56000 [5.27e-03]\n",
      "56000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172923.958936      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57000     [3.53e+02, 9.01e-03, 1.11e+01, 9.06e+00, 4.38e+04]    [2.37e+02, 9.01e-03, 1.11e+01, 9.06e+00, 4.38e+04]    []  \n",
      "57000 [5.49e-03]\n",
      "57000 [1.00e+00]\n",
      "\n",
      "Best model at step 57000:\n",
      "  train loss: 4.42e+04\n",
      "  test loss: 4.41e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.941640 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011639 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "57000     [3.53e+02, 9.01e-03, 1.11e+01, 9.06e+00, 4.38e+04]    [2.37e+02, 9.01e-03, 1.11e+01, 9.06e+00, 4.38e+04]    []  \n",
      "57000 [5.49e-03]\n",
      "57000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724172971.199129      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58000     [3.23e+02, 1.41e-02, 1.20e+01, 9.01e+00, 4.37e+04]    [2.25e+02, 1.41e-02, 1.20e+01, 9.01e+00, 4.37e+04]    []  \n",
      "58000 [5.63e-03]\n",
      "58000 [1.00e+00]\n",
      "\n",
      "Best model at step 58000:\n",
      "  train loss: 4.41e+04\n",
      "  test loss: 4.40e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.226452 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007712 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "58000     [3.23e+02, 1.41e-02, 1.20e+01, 9.01e+00, 4.37e+04]    [2.25e+02, 1.41e-02, 1.20e+01, 9.01e+00, 4.37e+04]    []  \n",
      "58000 [5.63e-03]\n",
      "58000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173018.485109      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59000     [4.41e+02, 1.39e-02, 1.23e+01, 9.20e+00, 4.36e+04]    [2.46e+02, 1.39e-02, 1.23e+01, 9.20e+00, 4.36e+04]    []  \n",
      "59000 [5.69e-03]\n",
      "59000 [1.00e+00]\n",
      "\n",
      "Best model at step 59000:\n",
      "  train loss: 4.40e+04\n",
      "  test loss: 4.38e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.231394 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.010467 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "59000     [4.41e+02, 1.39e-02, 1.23e+01, 9.20e+00, 4.36e+04]    [2.46e+02, 1.39e-02, 1.23e+01, 9.20e+00, 4.36e+04]    []  \n",
      "59000 [5.69e-03]\n",
      "59000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173065.712499      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60000     [3.87e+02, 1.94e-02, 1.24e+01, 9.08e+00, 4.35e+04]    [2.88e+02, 1.94e-02, 1.24e+01, 9.08e+00, 4.35e+04]    []  \n",
      "60000 [5.42e-03]\n",
      "60000 [1.00e+00]\n",
      "\n",
      "Best model at step 60000:\n",
      "  train loss: 4.40e+04\n",
      "  test loss: 4.39e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.121971 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011212 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "60000     [3.87e+02, 1.94e-02, 1.24e+01, 9.08e+00, 4.35e+04]    [2.88e+02, 1.94e-02, 1.24e+01, 9.08e+00, 4.35e+04]    []  \n",
      "60000 [5.42e-03]\n",
      "60000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173112.640956      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61000     [3.69e+02, 1.76e-02, 1.31e+01, 9.40e+00, 4.34e+04]    [2.25e+02, 1.76e-02, 1.31e+01, 9.40e+00, 4.34e+04]    []  \n",
      "61000 [5.94e-03]\n",
      "61000 [1.00e+00]\n",
      "\n",
      "Best model at step 61000:\n",
      "  train loss: 4.37e+04\n",
      "  test loss: 4.36e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.859809 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007874 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "61000     [3.69e+02, 1.76e-02, 1.31e+01, 9.40e+00, 4.34e+04]    [2.25e+02, 1.76e-02, 1.31e+01, 9.40e+00, 4.34e+04]    []  \n",
      "61000 [5.94e-03]\n",
      "61000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173159.556192      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62000     [7.76e+02, 1.95e-02, 1.37e+01, 9.40e+00, 4.33e+04]    [2.84e+02, 1.95e-02, 1.37e+01, 9.40e+00, 4.33e+04]    []  \n",
      "62000 [6.14e-03]\n",
      "62000 [1.00e+00]\n",
      "\n",
      "Best model at step 61000:\n",
      "  train loss: 4.37e+04\n",
      "  test loss: 4.36e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.926434 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007792 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "62000     [7.76e+02, 1.95e-02, 1.37e+01, 9.40e+00, 4.33e+04]    [2.84e+02, 1.95e-02, 1.37e+01, 9.40e+00, 4.33e+04]    []  \n",
      "62000 [6.14e-03]\n",
      "62000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173206.407058      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63000     [5.09e+02, 1.95e-02, 1.44e+01, 9.51e+00, 4.31e+04]    [2.31e+02, 1.95e-02, 1.44e+01, 9.51e+00, 4.31e+04]    []  \n",
      "63000 [6.37e-03]\n",
      "63000 [1.00e+00]\n",
      "\n",
      "Best model at step 63000:\n",
      "  train loss: 4.36e+04\n",
      "  test loss: 4.34e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.870354 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007753 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "63000     [5.09e+02, 1.95e-02, 1.44e+01, 9.51e+00, 4.31e+04]    [2.31e+02, 1.95e-02, 1.44e+01, 9.51e+00, 4.31e+04]    []  \n",
      "63000 [6.37e-03]\n",
      "63000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173253.303250      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64000     [8.54e+02, 2.13e-02, 1.52e+01, 9.30e+00, 4.31e+04]    [3.13e+02, 2.13e-02, 1.52e+01, 9.30e+00, 4.31e+04]    []  \n",
      "64000 [6.66e-03]\n",
      "64000 [1.00e+00]\n",
      "\n",
      "Best model at step 63000:\n",
      "  train loss: 4.36e+04\n",
      "  test loss: 4.34e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.855024 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007989 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "64000     [8.54e+02, 2.13e-02, 1.52e+01, 9.30e+00, 4.31e+04]    [3.13e+02, 2.13e-02, 1.52e+01, 9.30e+00, 4.31e+04]    []  \n",
      "64000 [6.66e-03]\n",
      "64000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173300.203992      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65000     [6.28e+02, 2.54e-02, 1.59e+01, 9.34e+00, 4.28e+04]    [2.41e+02, 2.54e-02, 1.59e+01, 9.34e+00, 4.28e+04]    []  \n",
      "65000 [7.00e-03]\n",
      "65000 [1.00e+00]\n",
      "\n",
      "Best model at step 65000:\n",
      "  train loss: 4.35e+04\n",
      "  test loss: 4.31e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.877523 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011063 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "65000     [6.28e+02, 2.54e-02, 1.59e+01, 9.34e+00, 4.28e+04]    [2.41e+02, 2.54e-02, 1.59e+01, 9.34e+00, 4.28e+04]    []  \n",
      "65000 [7.00e-03]\n",
      "65000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173347.093494      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66000     [3.40e+02, 2.33e-02, 1.52e+01, 8.48e+00, 4.33e+04]    [2.55e+02, 2.33e-02, 1.52e+01, 8.48e+00, 4.33e+04]    []  \n",
      "66000 [6.69e-03]\n",
      "66000 [1.00e+00]\n",
      "\n",
      "Best model at step 65000:\n",
      "  train loss: 4.35e+04\n",
      "  test loss: 4.31e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.866804 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008018 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "66000     [3.40e+02, 2.33e-02, 1.52e+01, 8.48e+00, 4.33e+04]    [2.55e+02, 2.33e-02, 1.52e+01, 8.48e+00, 4.33e+04]    []  \n",
      "66000 [6.69e-03]\n",
      "66000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173393.976870      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67000     [8.02e+02, 2.73e-02, 1.68e+01, 9.63e+00, 4.25e+04]    [2.86e+02, 2.73e-02, 1.68e+01, 9.63e+00, 4.25e+04]    []  \n",
      "67000 [7.63e-03]\n",
      "67000 [1.00e+00]\n",
      "\n",
      "Best model at step 67000:\n",
      "  train loss: 4.34e+04\n",
      "  test loss: 4.28e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.916213 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007758 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "67000     [8.02e+02, 2.73e-02, 1.68e+01, 9.63e+00, 4.25e+04]    [2.86e+02, 2.73e-02, 1.68e+01, 9.63e+00, 4.25e+04]    []  \n",
      "67000 [7.63e-03]\n",
      "67000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173440.849415      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68000     [7.44e+02, 2.97e-02, 1.75e+01, 9.66e+00, 4.24e+04]    [2.87e+02, 2.97e-02, 1.75e+01, 9.66e+00, 4.24e+04]    []  \n",
      "68000 [8.25e-03]\n",
      "68000 [1.00e+00]\n",
      "\n",
      "Best model at step 68000:\n",
      "  train loss: 4.32e+04\n",
      "  test loss: 4.27e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.810319 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011324 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "68000     [7.44e+02, 2.97e-02, 1.75e+01, 9.66e+00, 4.24e+04]    [2.87e+02, 2.97e-02, 1.75e+01, 9.66e+00, 4.24e+04]    []  \n",
      "68000 [8.25e-03]\n",
      "68000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173487.711658      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69000     [3.93e+02, 2.91e-02, 1.69e+01, 8.88e+00, 4.30e+04]    [3.13e+02, 2.91e-02, 1.69e+01, 8.88e+00, 4.30e+04]    []  \n",
      "69000 [7.56e-03]\n",
      "69000 [1.00e+00]\n",
      "\n",
      "Best model at step 68000:\n",
      "  train loss: 4.32e+04\n",
      "  test loss: 4.27e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.907708 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011244 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "69000     [3.93e+02, 2.91e-02, 1.69e+01, 8.88e+00, 4.30e+04]    [3.13e+02, 2.91e-02, 1.69e+01, 8.88e+00, 4.30e+04]    []  \n",
      "69000 [7.56e-03]\n",
      "69000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173534.740593      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70000     [4.78e+02, 3.73e-02, 1.90e+01, 9.67e+00, 4.22e+04]    [2.47e+02, 3.73e-02, 1.90e+01, 9.67e+00, 4.22e+04]    []  \n",
      "70000 [9.09e-03]\n",
      "70000 [1.00e+00]\n",
      "\n",
      "Best model at step 70000:\n",
      "  train loss: 4.27e+04\n",
      "  test loss: 4.25e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.988269 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012214 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "70000     [4.78e+02, 3.73e-02, 1.90e+01, 9.67e+00, 4.22e+04]    [2.47e+02, 3.73e-02, 1.90e+01, 9.67e+00, 4.22e+04]    []  \n",
      "70000 [9.09e-03]\n",
      "70000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173583.444800      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71000     [1.22e+03, 3.61e-02, 1.81e+01, 8.99e+00, 4.26e+04]    [3.61e+02, 3.61e-02, 1.81e+01, 8.99e+00, 4.26e+04]    []  \n",
      "71000 [8.14e-03]\n",
      "71000 [1.00e+00]\n",
      "\n",
      "Best model at step 70000:\n",
      "  train loss: 4.27e+04\n",
      "  test loss: 4.25e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.701935 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007830 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "71000     [1.22e+03, 3.61e-02, 1.81e+01, 8.99e+00, 4.26e+04]    [3.61e+02, 3.61e-02, 1.81e+01, 8.99e+00, 4.26e+04]    []  \n",
      "71000 [8.14e-03]\n",
      "71000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173630.294102      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72000     [5.08e+02, 3.72e-02, 1.98e+01, 9.71e+00, 4.18e+04]    [2.62e+02, 3.72e-02, 1.98e+01, 9.71e+00, 4.18e+04]    []  \n",
      "72000 [9.65e-03]\n",
      "72000 [1.00e+00]\n",
      "\n",
      "Best model at step 72000:\n",
      "  train loss: 4.23e+04\n",
      "  test loss: 4.21e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.829387 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011190 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "72000     [5.08e+02, 3.72e-02, 1.98e+01, 9.71e+00, 4.18e+04]    [2.62e+02, 3.72e-02, 1.98e+01, 9.71e+00, 4.18e+04]    []  \n",
      "72000 [9.65e-03]\n",
      "72000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173677.213126      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73000     [3.85e+02, 3.38e-02, 1.88e+01, 8.88e+00, 4.24e+04]    [2.80e+02, 3.38e-02, 1.88e+01, 8.88e+00, 4.24e+04]    []  \n",
      "73000 [9.40e-03]\n",
      "73000 [1.00e+00]\n",
      "\n",
      "Best model at step 72000:\n",
      "  train loss: 4.23e+04\n",
      "  test loss: 4.21e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.908368 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011338 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "73000     [3.85e+02, 3.38e-02, 1.88e+01, 8.88e+00, 4.24e+04]    [2.80e+02, 3.38e-02, 1.88e+01, 8.88e+00, 4.24e+04]    []  \n",
      "73000 [9.40e-03]\n",
      "73000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173724.084213      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74000     [5.36e+02, 3.82e-02, 2.12e+01, 1.02e+01, 4.14e+04]    [2.71e+02, 3.82e-02, 2.12e+01, 1.02e+01, 4.14e+04]    []  \n",
      "74000 [1.09e-02]\n",
      "74000 [1.00e+00]\n",
      "\n",
      "Best model at step 74000:\n",
      "  train loss: 4.20e+04\n",
      "  test loss: 4.17e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.969754 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008041 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "74000     [5.36e+02, 3.82e-02, 2.12e+01, 1.02e+01, 4.14e+04]    [2.71e+02, 3.82e-02, 2.12e+01, 1.02e+01, 4.14e+04]    []  \n",
      "74000 [1.09e-02]\n",
      "74000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173771.201290      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75000     [6.54e+02, 3.81e-02, 2.19e+01, 1.03e+01, 4.13e+04]    [2.53e+02, 3.81e-02, 2.19e+01, 1.03e+01, 4.13e+04]    []  \n",
      "75000 [1.16e-02]\n",
      "75000 [1.00e+00]\n",
      "\n",
      "Best model at step 75000:\n",
      "  train loss: 4.20e+04\n",
      "  test loss: 4.16e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.141067 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011404 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "75000     [6.54e+02, 3.81e-02, 2.19e+01, 1.03e+01, 4.13e+04]    [2.53e+02, 3.81e-02, 2.19e+01, 1.03e+01, 4.13e+04]    []  \n",
      "75000 [1.16e-02]\n",
      "75000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173818.348963      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76000     [1.79e+03, 4.11e-02, 2.26e+01, 1.04e+01, 4.11e+04]    [3.44e+02, 4.11e-02, 2.26e+01, 1.04e+01, 4.11e+04]    []  \n",
      "76000 [1.23e-02]\n",
      "76000 [1.00e+00]\n",
      "\n",
      "Best model at step 75000:\n",
      "  train loss: 4.20e+04\n",
      "  test loss: 4.16e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.083239 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007818 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "76000     [1.79e+03, 4.11e-02, 2.26e+01, 1.04e+01, 4.11e+04]    [3.44e+02, 4.11e-02, 2.26e+01, 1.04e+01, 4.11e+04]    []  \n",
      "76000 [1.23e-02]\n",
      "76000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173865.493755      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77000     [5.56e+02, 4.12e-02, 2.35e+01, 1.06e+01, 4.08e+04]    [2.47e+02, 4.12e-02, 2.35e+01, 1.06e+01, 4.08e+04]    []  \n",
      "77000 [1.29e-02]\n",
      "77000 [1.00e+00]\n",
      "\n",
      "Best model at step 77000:\n",
      "  train loss: 4.14e+04\n",
      "  test loss: 4.11e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.154138 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008481 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "77000     [5.56e+02, 4.12e-02, 2.35e+01, 1.06e+01, 4.08e+04]    [2.47e+02, 4.12e-02, 2.35e+01, 1.06e+01, 4.08e+04]    []  \n",
      "77000 [1.29e-02]\n",
      "77000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173912.702429      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78000     [4.48e+02, 3.93e-02, 2.42e+01, 1.08e+01, 4.07e+04]    [2.64e+02, 3.93e-02, 2.42e+01, 1.08e+01, 4.07e+04]    []  \n",
      "78000 [1.36e-02]\n",
      "78000 [1.00e+00]\n",
      "\n",
      "Best model at step 78000:\n",
      "  train loss: 4.11e+04\n",
      "  test loss: 4.10e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.160073 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.010674 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "78000     [4.48e+02, 3.93e-02, 2.42e+01, 1.08e+01, 4.07e+04]    [2.64e+02, 3.93e-02, 2.42e+01, 1.08e+01, 4.07e+04]    []  \n",
      "78000 [1.36e-02]\n",
      "78000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724173959.734885      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79000     [3.36e+02, 2.19e-02, 2.08e+01, 8.43e+00, 4.22e+04]    [2.67e+02, 2.19e-02, 2.08e+01, 8.43e+00, 4.22e+04]    []  \n",
      "79000 [1.26e-02]\n",
      "79000 [1.00e+00]\n",
      "\n",
      "Best model at step 78000:\n",
      "  train loss: 4.11e+04\n",
      "  test loss: 4.10e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.978011 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007852 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "79000     [3.36e+02, 2.19e-02, 2.08e+01, 8.43e+00, 4.22e+04]    [2.67e+02, 2.19e-02, 2.08e+01, 8.43e+00, 4.22e+04]    []  \n",
      "79000 [1.26e-02]\n",
      "79000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174006.642190      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80000     [1.04e+03, 3.06e-02, 2.56e+01, 1.11e+01, 4.04e+04]    [2.78e+02, 3.06e-02, 2.56e+01, 1.11e+01, 4.04e+04]    []  \n",
      "80000 [1.45e-02]\n",
      "80000 [1.00e+00]\n",
      "\n",
      "Best model at step 78000:\n",
      "  train loss: 4.11e+04\n",
      "  test loss: 4.10e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.905167 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007772 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "80000     [1.04e+03, 3.06e-02, 2.56e+01, 1.11e+01, 4.04e+04]    [2.78e+02, 3.06e-02, 2.56e+01, 1.11e+01, 4.04e+04]    []  \n",
      "80000 [1.45e-02]\n",
      "80000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174053.603808      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "81000     [4.15e+02, 2.81e-02, 2.63e+01, 1.12e+01, 4.02e+04]    [2.54e+02, 2.81e-02, 2.63e+01, 1.12e+01, 4.02e+04]    []  \n",
      "81000 [1.53e-02]\n",
      "81000 [1.00e+00]\n",
      "\n",
      "Best model at step 81000:\n",
      "  train loss: 4.07e+04\n",
      "  test loss: 4.05e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.903047 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007726 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "81000     [4.15e+02, 2.81e-02, 2.63e+01, 1.12e+01, 4.02e+04]    [2.54e+02, 2.81e-02, 2.63e+01, 1.12e+01, 4.02e+04]    []  \n",
      "81000 [1.53e-02]\n",
      "81000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174100.445432      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82000     [3.78e+02, 1.99e-02, 2.31e+01, 9.66e+00, 4.13e+04]    [2.86e+02, 1.99e-02, 2.31e+01, 9.66e+00, 4.13e+04]    []  \n",
      "82000 [1.45e-02]\n",
      "82000 [1.00e+00]\n",
      "\n",
      "Best model at step 81000:\n",
      "  train loss: 4.07e+04\n",
      "  test loss: 4.05e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.873492 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008563 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "82000     [3.78e+02, 1.99e-02, 2.31e+01, 9.66e+00, 4.13e+04]    [2.86e+02, 1.99e-02, 2.31e+01, 9.66e+00, 4.13e+04]    []  \n",
      "82000 [1.45e-02]\n",
      "82000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174147.460815      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83000     [4.90e+02, 5.46e-02, 2.48e+01, 1.05e+01, 4.09e+04]    [3.29e+02, 5.46e-02, 2.48e+01, 1.05e+01, 4.09e+04]    []  \n",
      "83000 [1.56e-02]\n",
      "83000 [1.00e+00]\n",
      "\n",
      "Best model at step 81000:\n",
      "  train loss: 4.07e+04\n",
      "  test loss: 4.05e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.991970 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011726 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "83000     [4.90e+02, 5.46e-02, 2.48e+01, 1.05e+01, 4.09e+04]    [3.29e+02, 5.46e-02, 2.48e+01, 1.05e+01, 4.09e+04]    []  \n",
      "83000 [1.56e-02]\n",
      "83000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174194.418993      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84000     [4.40e+02, 2.40e-02, 2.77e+01, 1.15e+01, 4.00e+04]    [2.46e+02, 2.40e-02, 2.77e+01, 1.15e+01, 4.00e+04]    []  \n",
      "84000 [1.64e-02]\n",
      "84000 [1.00e+00]\n",
      "\n",
      "Best model at step 84000:\n",
      "  train loss: 4.05e+04\n",
      "  test loss: 4.03e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.002877 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007890 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "84000     [4.40e+02, 2.40e-02, 2.77e+01, 1.15e+01, 4.00e+04]    [2.46e+02, 2.40e-02, 2.77e+01, 1.15e+01, 4.00e+04]    []  \n",
      "84000 [1.64e-02]\n",
      "84000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174241.576629      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85000     [4.27e+02, 3.33e-02, 2.48e+01, 8.82e+00, 4.17e+04]    [3.35e+02, 3.33e-02, 2.48e+01, 8.82e+00, 4.17e+04]    []  \n",
      "85000 [1.48e-02]\n",
      "85000 [1.00e+00]\n",
      "\n",
      "Best model at step 84000:\n",
      "  train loss: 4.05e+04\n",
      "  test loss: 4.03e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.138519 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007991 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "85000     [4.27e+02, 3.33e-02, 2.48e+01, 8.82e+00, 4.17e+04]    [3.35e+02, 3.33e-02, 2.48e+01, 8.82e+00, 4.17e+04]    []  \n",
      "85000 [1.48e-02]\n",
      "85000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174288.718187      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "86000     [4.66e+02, 2.40e-02, 2.88e+01, 1.18e+01, 3.98e+04]    [2.48e+02, 2.40e-02, 2.88e+01, 1.18e+01, 3.98e+04]    []  \n",
      "86000 [1.74e-02]\n",
      "86000 [1.00e+00]\n",
      "\n",
      "Best model at step 86000:\n",
      "  train loss: 4.03e+04\n",
      "  test loss: 4.01e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.278657 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007734 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "86000     [4.66e+02, 2.40e-02, 2.88e+01, 1.18e+01, 3.98e+04]    [2.48e+02, 2.40e-02, 2.88e+01, 1.18e+01, 3.98e+04]    []  \n",
      "86000 [1.74e-02]\n",
      "86000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174335.889685      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "87000     [4.58e+02, 3.54e-02, 2.77e+01, 1.18e+01, 3.99e+04]    [3.13e+02, 3.54e-02, 2.77e+01, 1.18e+01, 3.99e+04]    []  \n",
      "87000 [1.73e-02]\n",
      "87000 [1.00e+00]\n",
      "\n",
      "Best model at step 86000:\n",
      "  train loss: 4.03e+04\n",
      "  test loss: 4.01e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.946202 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007822 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "87000     [4.58e+02, 3.54e-02, 2.77e+01, 1.18e+01, 3.99e+04]    [3.13e+02, 3.54e-02, 2.77e+01, 1.18e+01, 3.99e+04]    []  \n",
      "87000 [1.73e-02]\n",
      "87000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174382.750303      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "88000     [4.25e+02, 2.23e-02, 2.97e+01, 1.22e+01, 3.96e+04]    [2.36e+02, 2.23e-02, 2.97e+01, 1.22e+01, 3.96e+04]    []  \n",
      "88000 [1.79e-02]\n",
      "88000 [1.00e+00]\n",
      "\n",
      "Best model at step 88000:\n",
      "  train loss: 4.01e+04\n",
      "  test loss: 3.99e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.866783 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008074 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "88000     [4.25e+02, 2.23e-02, 2.97e+01, 1.22e+01, 3.96e+04]    [2.36e+02, 2.23e-02, 2.97e+01, 1.22e+01, 3.96e+04]    []  \n",
      "88000 [1.79e-02]\n",
      "88000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174429.659290      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "89000     [1.04e+03, 2.10e-02, 3.05e+01, 1.21e+01, 3.96e+04]    [2.33e+02, 2.10e-02, 3.05e+01, 1.21e+01, 3.96e+04]    []  \n",
      "89000 [1.84e-02]\n",
      "89000 [1.00e+00]\n",
      "\n",
      "Best model at step 88000:\n",
      "  train loss: 4.01e+04\n",
      "  test loss: 3.99e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.857556 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011692 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "89000     [1.04e+03, 2.10e-02, 3.05e+01, 1.21e+01, 3.96e+04]    [2.33e+02, 2.10e-02, 3.05e+01, 1.21e+01, 3.96e+04]    []  \n",
      "89000 [1.84e-02]\n",
      "89000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724174476.517373      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90000     [3.85e+02, 2.81e-02, 2.65e+01, 8.66e+00, 4.17e+04]    [3.17e+02, 2.81e-02, 2.65e+01, 8.66e+00, 4.17e+04]    []  \n",
      "90000 [1.66e-02]\n",
      "90000 [1.00e+00]\n",
      "\n",
      "Best model at step 88000:\n",
      "  train loss: 4.01e+04\n",
      "  test loss: 3.99e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.855652 s\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "# Set backend\n",
    "os.environ[\"DDE_BACKEND\"] = \"tensorflow\"\n",
    "import tensorflow as tf\n",
    "import deepxde as dde\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.interpolate import interp1d\n",
    "from scipy.interpolate import RegularGridInterpolator\n",
    "from deepxde.callbacks import Callback\n",
    "import pandas as pd\n",
    "\n",
    "BATCH_SIZE = 32  # Batch size\n",
    "#LEARNING_RATE = 1e-3  # Learning rate\n",
    "\n",
    "ITERATIONS_A = 20000  # Number of training iterations\n",
    "ITERATIONS_LBFGS = 20000  # Number of training iterations\n",
    "ITERATIONS_A2 = 20000  # Number of training iterations\n",
    "ITERATIONS_LBFGS2 = 10000  # Number of training iterations \n",
    "\n",
    "T_Start = 0\n",
    "TIME_STEP = 0.02\n",
    "T_End = 0.02\n",
    "# Define the computational domain\n",
    "geom = dde.geometry.Interval(-1, 1)\n",
    "time_domain = dde.geometry.TimeDomain(T_Start, T_End)\n",
    "geomtime = dde.geometry.GeometryXTime(geom, time_domain)\n",
    "\n",
    "# Define gamma_2 as a trainable variable with an initial value\n",
    "gamma_1_AC = tf.Variable(0.5, dtype=tf.float32) # Alpha\n",
    "gamma_2_AC = tf.Variable(1.0, dtype=tf.float32, trainable=False) # Kappa \n",
    "def cahn_hilliard(x, y):\n",
    "    print(\"Presumed Alpha\")\n",
    "    print(gamma_1_AC)\n",
    "    dy_t = dde.grad.jacobian(y, x, i=0, j=1)\n",
    "    laplacian_u = dde.grad.hessian(y, x, i=0, j=0)\n",
    "    laplacian_u_cubed = dde.grad.hessian(y**3, x, i=0, j=0)   # second derivative y^3\n",
    "    fourth_derivative_u = dde.grad.hessian(laplacian_u, x, i=0, j=0)\n",
    "    return dy_t - gamma_2_AC * (laplacian_u_cubed - laplacian_u - gamma_1_AC * fourth_derivative_u)\n",
    "\n",
    "# Initial condition Allen Cahn\n",
    "def init_condition_CA(x):\n",
    "    return -np.cos(2 * np.pi * x[:, 0:1])\n",
    "\n",
    "# Initial condition dde for Allen Cahn Equation\n",
    "initial_condition_h_AC = dde.icbc.IC(geomtime, init_condition_CA, lambda _, on_initial: on_initial, component=0)\n",
    "\n",
    "# Boundary Condition for the Allen-Cahn equation\n",
    "bc_h = dde.icbc.PeriodicBC(geomtime, 0, lambda _, on_boundary: on_boundary, derivative_order=0, component=0)\n",
    "bc_h_deriv = dde.icbc.PeriodicBC(geomtime, 0, lambda _, on_boundary: on_boundary, derivative_order=1, component=0)\n",
    "\n",
    "\n",
    "# Load the data from the text file\n",
    "data = np.loadtxt('/kaggle/input/output-ch1d/output-CH1d.txt', skiprows=1)\n",
    "print(data)\n",
    "# Split the data into spatial coordinates (x), time (t), and solution values (u)\n",
    "observed_x = data[:, 0:1]  # The x column (as 2D array)\n",
    "observed_t = data[:, 1:2]  # The t column (as 2D array)\n",
    "observed_h = data[:, 2:4]  # The solution column (as 2D array)\n",
    "# Combine x and t to create the observation points in the space-time domain\n",
    "observed_xt = np.hstack((observed_x, observed_t))\n",
    "# Define the PointSetBC using the observed points and solution values\n",
    "observe_h_AC = dde.icbc.PointSetBC(observed_xt, observed_h, component=0)\n",
    "\n",
    "data_AC_inverse = dde.data.TimePDE(\n",
    "        geomtime,\n",
    "        cahn_hilliard,\n",
    "        #[bc_h, bc_h_deriv, initial_condition_h_AC],  # Include observe_h here\n",
    "        [bc_h, bc_h_deriv, initial_condition_h_AC, observe_h_AC],  # Include observe_h here\n",
    "        num_domain=20000,\n",
    "        num_boundary=1600,\n",
    "        num_initial=4096,\n",
    "        anchors=observed_xt,  # Make sure observed_xt is used as anchors if necessary\n",
    "        num_test=40000,\n",
    "    )\n",
    "\n",
    "# Your file path\n",
    "file_path = \"kaggle/working/losses_simple.txt\"\n",
    "# Check if file exists and delete it\n",
    "if os.path.exists(file_path):\n",
    "    os.remove(file_path)\n",
    "    print(f\"Removed existing file: {file_path}\")\n",
    "\n",
    "class SimpleLossTrackingCallback(Callback):\n",
    "    def __init__(self, every_n_epochs=1000, file_path=file_path):\n",
    "        super(SimpleLossTrackingCallback, self).__init__()\n",
    "        self.every_n_epochs = every_n_epochs\n",
    "        self.file_path = file_path\n",
    "        \n",
    "        # Ensure the directory exists\n",
    "        os.makedirs(os.path.dirname(self.file_path), exist_ok=True)\n",
    "        \n",
    "        # Check if file exists and is not empty, if so, skip writing the header\n",
    "        if not os.path.exists(self.file_path) or os.stat(self.file_path).st_size == 0:\n",
    "            with open(self.file_path, \"w\") as f:\n",
    "                f.write(\"Epoch,PDE Loss,BC1 Loss,BC2 Loss,IC Loss,Observe Loss\\n\")\n",
    "\n",
    "    def on_epoch_end(self):\n",
    "        if self.model.train_state.step % self.every_n_epochs == 0 or self.model.train_state.step == 1:\n",
    "            current_losses = self.model.train_state.loss_train\n",
    "            loss_str = \",\".join(map(str, current_losses))\n",
    "            with open(self.file_path, \"a\") as f:\n",
    "                f.write(f\"{self.model.train_state.step},{loss_str}\\n\")\n",
    "\n",
    "iterations_list = [0]  # Starting with iteration 0\n",
    "\n",
    "gamma_1_values = [gamma_1_AC.value().numpy()]  # Assuming this is how you access the value of your variable\n",
    "gamma_2_values = [gamma_2_AC.value().numpy()]  # Assuming this is how you access the value of your variable\n",
    "\n",
    "# Network Architecure\n",
    "#net = dde.nn.FNN([2] + [128] * 6 + [1], \"tanh\", \"Glorot normal\")\n",
    "net = dde.nn.FNN([2] + [60] * 4 + [1], \"tanh\", \"Glorot normal\")\n",
    "variable_gamma_1 = dde.callbacks.VariableValue(gamma_1_AC, period=1000)\n",
    "variable_gamma_2 = dde.callbacks.VariableValue(gamma_2_AC, period=1000)\n",
    "detailed_loss_tracker = SimpleLossTrackingCallback()\n",
    "model = dde.Model(data_AC_inverse, net)\n",
    "\n",
    "Loss_Weights = [1, 1, 1, 1, 1000]\n",
    "\n",
    "total_iterations = 0\n",
    "while total_iterations < 90000:\n",
    "                # Calculate the number of iterations for this loop\n",
    "                iter_this_loop = 1000\n",
    "                # Update the total iterations\n",
    "                #model.compile(\"adam\", lr=1e-3, loss= 'MSE', loss_weights=Loss_Weights, external_trainable_variables=[gamma_1_AC, gamma_2_AC])\n",
    "                #losshistory, train_state = model.train(epochs=70000, display_every=1000, callbacks=[variable_gamma_1, variable_gamma_2, detailed_loss_tracker])\n",
    "\n",
    "                model.compile(\"adam\", lr=1e-3, loss= 'MSE', loss_weights=Loss_Weights, external_trainable_variables=[gamma_1_AC, gamma_2_AC])\n",
    "                losshistory, train_state = model.train(epochs=iter_this_loop, display_every=1000, callbacks=[variable_gamma_1, variable_gamma_2, detailed_loss_tracker])\n",
    "                # Update gamma value and error after training\n",
    "                current_gamma_1_value = gamma_1_AC.value().numpy()\n",
    "                current_gamma_2_value = gamma_2_AC.value().numpy()\n",
    "\n",
    "                # model.compile(\"L-BFGS\", loss = 'MSE', loss_weights = Loss_Weights, external_trainable_variables=[gamma_2_AC])\n",
    "                # losshistory, train_state = model.train(display_every=1000, callbacks=[observed_data_loss_callback, variable])\n",
    "\n",
    "                # Update gamma value and error after training\n",
    "                gamma_1_values.append(current_gamma_1_value)\n",
    "                gamma_2_values.append(current_gamma_2_value)\n",
    "\n",
    "                iterations_list.append(total_iterations + iter_this_loop)\n",
    "\n",
    "                total_iterations += 1000\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(iterations_list, gamma_1_values, '-o', label='Presumed Alpha', color='blue')\n",
    "plt.plot(iterations_list, gamma_2_values, '-o', label='Presumed Kappa', color='red')\n",
    "plt.xlabel('Gamma Value', fontsize=14)\n",
    "plt.ylabel('Iterations', fontsize=14)\n",
    "plt.title('Iterations vs. Gamma Value', fontsize=16)\n",
    "plt.legend()\n",
    "plt.grid(True, which=\"both\", ls=\"--\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# Load the losses from the file\n",
    "losses_df = pd.read_csv(file_path)\n",
    "\n",
    "# Calculate the total loss as the sum of component-wise losses for each iteration\n",
    "# Assuming that the first column is 'Epoch' and the rest are loss components\n",
    "loss_components = losses_df.columns[1:]  # Exclude 'Epoch'\n",
    "losses_df['Total Loss'] = losses_df[loss_components].sum(axis=1)\n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot component-wise losses\n",
    "for component in loss_components:\n",
    "    plt.plot(losses_df['Epoch'], losses_df[component], label=component)\n",
    "\n",
    "# Plot total loss\n",
    "plt.plot(losses_df['Epoch'], losses_df['Total Loss'], label='Total Loss', color='black', linewidth=2, linestyle='--')\n",
    "\n",
    "plt.xlabel('Iteration', fontsize=14)\n",
    "plt.ylabel('Loss', fontsize=14)\n",
    "plt.title('Loss Components and Total Loss over Iterations', fontsize=16)\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.yscale('log')  # Use logarithmic scale if desired\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e10b82ca",
   "metadata": {
    "papermill": {
     "duration": 0.087727,
     "end_time": "2024-08-20T17:21:55.090079",
     "exception": false,
     "start_time": "2024-08-20T17:21:55.002352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5522806,
     "sourceId": 9143912,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5566588,
     "sourceId": 9206556,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4280.579113,
   "end_time": "2024-08-20T17:21:58.908360",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-20T16:10:38.329247",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
