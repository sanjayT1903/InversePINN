{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f02234b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-20T06:42:25.053206Z",
     "iopub.status.busy": "2024-08-20T06:42:25.052823Z",
     "iopub.status.idle": "2024-08-20T06:42:41.931850Z",
     "shell.execute_reply": "2024-08-20T06:42:41.930500Z"
    },
    "papermill": {
     "duration": 16.885354,
     "end_time": "2024-08-20T06:42:41.934333",
     "exception": false,
     "start_time": "2024-08-20T06:42:25.048979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting deepxde\r\n",
      "  Downloading DeepXDE-1.12.0-py3-none-any.whl.metadata (12 kB)\r\n",
      "Requirement already satisfied: tensorflow in /opt/conda/lib/python3.10/site-packages (2.15.0)\r\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from deepxde) (3.7.5)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.26.4)\r\n",
      "Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.2.2)\r\n",
      "Requirement already satisfied: scikit-optimize>=0.9.0 in /opt/conda/lib/python3.10/site-packages (from deepxde) (0.10.2)\r\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.11.4)\r\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (23.5.26)\r\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.10.0)\r\n",
      "Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (16.0.6)\r\n",
      "Requirement already satisfied: ml-dtypes~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow) (21.3)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.20.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow) (69.0.3)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (4.9.0)\r\n",
      "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.14.1)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.35.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.60.0)\r\n",
      "Requirement already satisfied: tensorboard<2.16,>=2.15 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.1)\r\n",
      "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.0)\r\n",
      "Collecting keras<2.16,>=2.15.0 (from tensorflow)\r\n",
      "  Downloading keras-2.15.0-py3-none-any.whl.metadata (2.4 kB)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow) (0.42.0)\r\n",
      "Requirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.10/site-packages (from scikit-optimize>=0.9.0->deepxde) (1.4.2)\r\n",
      "Requirement already satisfied: pyaml>=16.9 in /opt/conda/lib/python3.10/site-packages (from scikit-optimize>=0.9.0->deepxde) (24.4.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow) (3.1.1)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->deepxde) (3.2.0)\r\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.26.1)\r\n",
      "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.5.2)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.32.3)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.3)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (1.2.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (4.47.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (1.4.5)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (9.5.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->deepxde) (2.9.0.post0)\r\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.2.4)\r\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.3.0)\r\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\r\n",
      "Requirement already satisfied: PyYAML in /opt/conda/lib/python3.10/site-packages (from pyaml>=16.9->scikit-optimize>=0.9.0->deepxde) (6.0.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.7.4)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.3)\r\n",
      "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.5.1)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\r\n",
      "Downloading DeepXDE-1.12.0-py3-none-any.whl (183 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m183.7/183.7 kB\u001b[0m \u001b[31m5.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading keras-2.15.0-py3-none-any.whl (1.7 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m46.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: keras, deepxde\r\n",
      "  Attempting uninstall: keras\r\n",
      "    Found existing installation: keras 3.4.1\r\n",
      "    Uninstalling keras-3.4.1:\r\n",
      "      Successfully uninstalled keras-3.4.1\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed deepxde-1.12.0 keras-2.15.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install deepxde tensorflow\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b7c525dc",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-20T06:42:41.948674Z",
     "iopub.status.busy": "2024-08-20T06:42:41.948328Z",
     "iopub.status.idle": "2024-08-20T07:31:08.713815Z",
     "shell.execute_reply": "2024-08-20T07:31:08.712962Z"
    },
    "papermill": {
     "duration": 2906.776177,
     "end_time": "2024-08-20T07:31:08.716196",
     "exception": false,
     "start_time": "2024-08-20T06:42:41.940019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-20 06:42:43.716803: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-20 06:42:43.716911: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-20 06:42:43.843386: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "Using backend: tensorflow\n",
      "Other supported backends: tensorflow.compat.v1, pytorch, jax, paddle.\n",
      "paddle supports more examples now and is recommended.\n",
      "Enable just-in-time compilation with XLA.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-1.          0.         -0.97347814  4.68327951]\n",
      " [-0.99        0.         -0.97071463  4.68033266]\n",
      " [-0.98        0.         -0.96758276  4.6894865 ]\n",
      " ...\n",
      " [ 0.98        0.02       -0.898314    4.6621666 ]\n",
      " [ 0.99        0.02       -0.89778441  4.64194965]\n",
      " [ 1.          0.02       -0.89689517  4.63153839]]\n",
      "Compiling model...\n",
      "'compile' took 0.003855 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotNormal is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1724136184.348560      24 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "0         [1.68e+00, 3.05e+00, 8.86e-06, 7.78e-01, 5.54e+04]    [1.65e+00, 3.05e+00, 8.86e-06, 7.78e-01, 5.54e+04]    []  \n",
      "0 [1.00e+00]\n",
      "0 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136194.710283      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000      [1.65e+03, 2.19e-04, 1.42e+01, 4.63e+00, 4.70e+04]    [1.64e+03, 2.19e-04, 1.42e+01, 4.63e+00, 4.70e+04]    []  \n",
      "1000 [7.76e-03]\n",
      "1000 [1.00e+00]\n",
      "\n",
      "Best model at step 1000:\n",
      "  train loss: 4.86e+04\n",
      "  test loss: 4.86e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 55.797638 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012801 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "1000      [1.65e+03, 2.19e-04, 1.42e+01, 4.63e+00, 4.70e+04]    [1.64e+03, 2.19e-04, 1.42e+01, 4.63e+00, 4.70e+04]    []  \n",
      "1000 [7.76e-03]\n",
      "1000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136242.856951      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2000      [2.47e+02, 1.24e-03, 1.30e+01, 4.69e+00, 4.69e+04]    [2.37e+02, 1.24e-03, 1.30e+01, 4.69e+00, 4.69e+04]    []  \n",
      "2000 [4.65e-03]\n",
      "2000 [1.00e+00]\n",
      "\n",
      "Best model at step 2000:\n",
      "  train loss: 4.72e+04\n",
      "  test loss: 4.72e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.171540 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012047 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "2000      [2.47e+02, 1.24e-03, 1.30e+01, 4.69e+00, 4.69e+04]    [2.37e+02, 1.24e-03, 1.30e+01, 4.69e+00, 4.69e+04]    []  \n",
      "2000 [4.65e-03]\n",
      "2000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136291.143379      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3000      [3.16e+02, 3.72e-04, 1.36e+01, 5.05e+00, 4.67e+04]    [2.97e+02, 3.72e-04, 1.36e+01, 5.05e+00, 4.67e+04]    []  \n",
      "3000 [3.92e-03]\n",
      "3000 [1.00e+00]\n",
      "\n",
      "Best model at step 3000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.70e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.254748 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.009261 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "3000      [3.16e+02, 3.72e-04, 1.36e+01, 5.05e+00, 4.67e+04]    [2.97e+02, 3.72e-04, 1.36e+01, 5.05e+00, 4.67e+04]    []  \n",
      "3000 [3.92e-03]\n",
      "3000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136339.142760      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4000      [3.89e+02, 2.94e-04, 1.32e+01, 5.07e+00, 4.67e+04]    [3.82e+02, 2.94e-04, 1.32e+01, 5.07e+00, 4.67e+04]    []  \n",
      "4000 [3.40e-03]\n",
      "4000 [1.00e+00]\n",
      "\n",
      "Best model at step 3000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.70e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.990855 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008369 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "4000      [3.89e+02, 2.94e-04, 1.32e+01, 5.07e+00, 4.67e+04]    [3.82e+02, 2.94e-04, 1.32e+01, 5.07e+00, 4.67e+04]    []  \n",
      "4000 [3.40e-03]\n",
      "4000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136387.575982      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5000      [8.88e+02, 2.86e-04, 1.30e+01, 5.20e+00, 4.67e+04]    [9.02e+02, 2.86e-04, 1.30e+01, 5.20e+00, 4.67e+04]    []  \n",
      "5000 [3.32e-03]\n",
      "5000 [1.00e+00]\n",
      "\n",
      "Best model at step 3000:\n",
      "  train loss: 4.71e+04\n",
      "  test loss: 4.70e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.415283 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.013580 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "5000      [8.88e+02, 2.86e-04, 1.30e+01, 5.20e+00, 4.67e+04]    [9.02e+02, 2.86e-04, 1.30e+01, 5.20e+00, 4.67e+04]    []  \n",
      "5000 [3.32e-03]\n",
      "5000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136435.587409      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6000      [3.03e+02, 2.14e-04, 1.29e+01, 5.37e+00, 4.66e+04]    [2.78e+02, 2.14e-04, 1.29e+01, 5.37e+00, 4.66e+04]    []  \n",
      "6000 [3.24e-03]\n",
      "6000 [1.00e+00]\n",
      "\n",
      "Best model at step 6000:\n",
      "  train loss: 4.70e+04\n",
      "  test loss: 4.69e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.028830 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008085 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "6000      [3.03e+02, 2.14e-04, 1.29e+01, 5.37e+00, 4.66e+04]    [2.78e+02, 2.14e-04, 1.29e+01, 5.37e+00, 4.66e+04]    []  \n",
      "6000 [3.24e-03]\n",
      "6000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136483.679745      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7000      [4.65e+02, 6.85e-04, 1.22e+01, 5.56e+00, 4.66e+04]    [4.44e+02, 6.85e-04, 1.22e+01, 5.56e+00, 4.66e+04]    []  \n",
      "7000 [3.01e-03]\n",
      "7000 [1.00e+00]\n",
      "\n",
      "Best model at step 6000:\n",
      "  train loss: 4.70e+04\n",
      "  test loss: 4.69e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.066000 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008159 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "7000      [4.65e+02, 6.85e-04, 1.22e+01, 5.56e+00, 4.66e+04]    [4.44e+02, 6.85e-04, 1.22e+01, 5.56e+00, 4.66e+04]    []  \n",
      "7000 [3.01e-03]\n",
      "7000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136531.735064      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8000      [2.67e+02, 5.69e-04, 1.21e+01, 5.70e+00, 4.66e+04]    [2.37e+02, 5.69e-04, 1.21e+01, 5.70e+00, 4.66e+04]    []  \n",
      "8000 [3.08e-03]\n",
      "8000 [1.00e+00]\n",
      "\n",
      "Best model at step 8000:\n",
      "  train loss: 4.69e+04\n",
      "  test loss: 4.68e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.008980 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008093 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "8000      [2.67e+02, 5.69e-04, 1.21e+01, 5.70e+00, 4.66e+04]    [2.37e+02, 5.69e-04, 1.21e+01, 5.70e+00, 4.66e+04]    []  \n",
      "8000 [3.08e-03]\n",
      "8000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136580.098442      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9000      [2.51e+02, 6.69e-04, 1.17e+01, 5.90e+00, 4.65e+04]    [2.20e+02, 6.69e-04, 1.17e+01, 5.90e+00, 4.65e+04]    []  \n",
      "9000 [2.97e-03]\n",
      "9000 [1.00e+00]\n",
      "\n",
      "Best model at step 9000:\n",
      "  train loss: 4.68e+04\n",
      "  test loss: 4.68e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.373993 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008195 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "9000      [2.51e+02, 6.69e-04, 1.17e+01, 5.90e+00, 4.65e+04]    [2.20e+02, 6.69e-04, 1.17e+01, 5.90e+00, 4.65e+04]    []  \n",
      "9000 [2.97e-03]\n",
      "9000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136628.051438      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000     [2.43e+02, 4.62e-04, 1.16e+01, 6.03e+00, 4.65e+04]    [2.18e+02, 4.62e-04, 1.16e+01, 6.03e+00, 4.65e+04]    []  \n",
      "10000 [3.02e-03]\n",
      "10000 [1.00e+00]\n",
      "\n",
      "Best model at step 10000:\n",
      "  train loss: 4.68e+04\n",
      "  test loss: 4.67e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.937461 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008199 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "10000     [2.43e+02, 4.62e-04, 1.16e+01, 6.03e+00, 4.65e+04]    [2.18e+02, 4.62e-04, 1.16e+01, 6.03e+00, 4.65e+04]    []  \n",
      "10000 [3.02e-03]\n",
      "10000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136675.975122      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11000     [2.80e+02, 2.93e-04, 1.09e+01, 6.39e+00, 4.64e+04]    [2.71e+02, 2.93e-04, 1.09e+01, 6.39e+00, 4.64e+04]    []  \n",
      "11000 [3.00e-03]\n",
      "11000 [1.00e+00]\n",
      "\n",
      "Best model at step 11000:\n",
      "  train loss: 4.67e+04\n",
      "  test loss: 4.67e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.887727 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011991 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "11000     [2.80e+02, 2.93e-04, 1.09e+01, 6.39e+00, 4.64e+04]    [2.71e+02, 2.93e-04, 1.09e+01, 6.39e+00, 4.64e+04]    []  \n",
      "11000 [3.00e-03]\n",
      "11000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136723.928964      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12000     [2.05e+02, 1.46e-04, 1.07e+01, 6.65e+00, 4.64e+04]    [1.93e+02, 1.46e-04, 1.07e+01, 6.65e+00, 4.64e+04]    []  \n",
      "12000 [3.06e-03]\n",
      "12000 [1.00e+00]\n",
      "\n",
      "Best model at step 12000:\n",
      "  train loss: 4.66e+04\n",
      "  test loss: 4.66e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.005080 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008207 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "12000     [2.05e+02, 1.46e-04, 1.07e+01, 6.65e+00, 4.64e+04]    [1.93e+02, 1.46e-04, 1.07e+01, 6.65e+00, 4.64e+04]    []  \n",
      "12000 [3.06e-03]\n",
      "12000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136771.961748      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13000     [1.95e+02, 9.25e-05, 1.03e+01, 6.91e+00, 4.63e+04]    [1.88e+02, 9.25e-05, 1.03e+01, 6.91e+00, 4.63e+04]    []  \n",
      "13000 [3.20e-03]\n",
      "13000 [1.00e+00]\n",
      "\n",
      "Best model at step 13000:\n",
      "  train loss: 4.65e+04\n",
      "  test loss: 4.65e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.014502 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008402 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "13000     [1.95e+02, 9.25e-05, 1.03e+01, 6.91e+00, 4.63e+04]    [1.88e+02, 9.25e-05, 1.03e+01, 6.91e+00, 4.63e+04]    []  \n",
      "13000 [3.20e-03]\n",
      "13000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136820.082594      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14000     [1.85e+02, 1.13e-04, 1.01e+01, 7.16e+00, 4.63e+04]    [1.84e+02, 1.13e-04, 1.01e+01, 7.16e+00, 4.63e+04]    []  \n",
      "14000 [3.42e-03]\n",
      "14000 [1.00e+00]\n",
      "\n",
      "Best model at step 14000:\n",
      "  train loss: 4.65e+04\n",
      "  test loss: 4.65e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.087553 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008267 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "14000     [1.85e+02, 1.13e-04, 1.01e+01, 7.16e+00, 4.63e+04]    [1.84e+02, 1.13e-04, 1.01e+01, 7.16e+00, 4.63e+04]    []  \n",
      "14000 [3.42e-03]\n",
      "14000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136868.654626      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15000     [1.69e+02, 7.89e-05, 9.71e+00, 7.41e+00, 4.63e+04]    [1.75e+02, 7.89e-05, 9.71e+00, 7.41e+00, 4.63e+04]    []  \n",
      "15000 [3.58e-03]\n",
      "15000 [1.00e+00]\n",
      "\n",
      "Best model at step 15000:\n",
      "  train loss: 4.64e+04\n",
      "  test loss: 4.65e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.578939 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008188 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "15000     [1.69e+02, 7.89e-05, 9.71e+00, 7.41e+00, 4.63e+04]    [1.75e+02, 7.89e-05, 9.71e+00, 7.41e+00, 4.63e+04]    []  \n",
      "15000 [3.58e-03]\n",
      "15000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136916.714692      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16000     [1.61e+02, 4.04e-04, 9.22e+00, 7.72e+00, 4.62e+04]    [1.67e+02, 4.04e-04, 9.22e+00, 7.72e+00, 4.62e+04]    []  \n",
      "16000 [3.66e-03]\n",
      "16000 [1.00e+00]\n",
      "\n",
      "Best model at step 16000:\n",
      "  train loss: 4.64e+04\n",
      "  test loss: 4.64e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.013398 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008021 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "16000     [1.61e+02, 4.04e-04, 9.22e+00, 7.72e+00, 4.62e+04]    [1.67e+02, 4.04e-04, 9.22e+00, 7.72e+00, 4.62e+04]    []  \n",
      "16000 [3.66e-03]\n",
      "16000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724136964.704552      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17000     [4.78e+02, 1.36e-04, 8.95e+00, 8.10e+00, 4.62e+04]    [3.52e+02, 1.36e-04, 8.95e+00, 8.10e+00, 4.62e+04]    []  \n",
      "17000 [3.67e-03]\n",
      "17000 [1.00e+00]\n",
      "\n",
      "Best model at step 16000:\n",
      "  train loss: 4.64e+04\n",
      "  test loss: 4.64e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.978425 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008495 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "17000     [4.78e+02, 1.36e-04, 8.95e+00, 8.10e+00, 4.62e+04]    [3.52e+02, 1.36e-04, 8.95e+00, 8.10e+00, 4.62e+04]    []  \n",
      "17000 [3.67e-03]\n",
      "17000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137012.715010      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18000     [2.88e+02, 3.51e-04, 8.73e+00, 8.35e+00, 4.61e+04]    [2.52e+02, 3.51e-04, 8.73e+00, 8.35e+00, 4.61e+04]    []  \n",
      "18000 [3.80e-03]\n",
      "18000 [1.00e+00]\n",
      "\n",
      "Best model at step 16000:\n",
      "  train loss: 4.64e+04\n",
      "  test loss: 4.64e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.043830 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008258 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "18000     [2.88e+02, 3.51e-04, 8.73e+00, 8.35e+00, 4.61e+04]    [2.52e+02, 3.51e-04, 8.73e+00, 8.35e+00, 4.61e+04]    []  \n",
      "18000 [3.80e-03]\n",
      "18000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137060.511768      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19000     [2.95e+02, 4.41e-04, 8.38e+00, 8.43e+00, 4.61e+04]    [2.70e+02, 4.41e-04, 8.38e+00, 8.43e+00, 4.61e+04]    []  \n",
      "19000 [3.99e-03]\n",
      "19000 [1.00e+00]\n",
      "\n",
      "Best model at step 16000:\n",
      "  train loss: 4.64e+04\n",
      "  test loss: 4.64e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.679432 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012327 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "19000     [2.95e+02, 4.41e-04, 8.38e+00, 8.43e+00, 4.61e+04]    [2.70e+02, 4.41e-04, 8.38e+00, 8.43e+00, 4.61e+04]    []  \n",
      "19000 [3.99e-03]\n",
      "19000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137108.443500      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20000     [2.39e+02, 8.86e-04, 8.27e+00, 8.84e+00, 4.60e+04]    [2.12e+02, 8.86e-04, 8.27e+00, 8.84e+00, 4.60e+04]    []  \n",
      "20000 [3.90e-03]\n",
      "20000 [1.00e+00]\n",
      "\n",
      "Best model at step 20000:\n",
      "  train loss: 4.63e+04\n",
      "  test loss: 4.63e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.023595 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008038 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "20000     [2.39e+02, 8.86e-04, 8.27e+00, 8.84e+00, 4.60e+04]    [2.12e+02, 8.86e-04, 8.27e+00, 8.84e+00, 4.60e+04]    []  \n",
      "20000 [3.90e-03]\n",
      "20000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137156.468542      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21000     [1.56e+02, 6.64e-04, 8.39e+00, 8.95e+00, 4.60e+04]    [1.61e+02, 6.64e-04, 8.39e+00, 8.95e+00, 4.60e+04]    []  \n",
      "21000 [4.05e-03]\n",
      "21000 [1.00e+00]\n",
      "\n",
      "Best model at step 21000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.008395 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011688 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "21000     [1.56e+02, 6.64e-04, 8.39e+00, 8.95e+00, 4.60e+04]    [1.61e+02, 6.64e-04, 8.39e+00, 8.95e+00, 4.60e+04]    []  \n",
      "21000 [4.05e-03]\n",
      "21000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137205.192496      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22000     [1.59e+02, 7.49e-04, 8.33e+00, 9.09e+00, 4.60e+04]    [1.66e+02, 7.49e-04, 8.33e+00, 9.09e+00, 4.60e+04]    []  \n",
      "22000 [4.07e-03]\n",
      "22000 [1.00e+00]\n",
      "\n",
      "Best model at step 22000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.734220 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008125 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "22000     [1.59e+02, 7.49e-04, 8.33e+00, 9.09e+00, 4.60e+04]    [1.66e+02, 7.49e-04, 8.33e+00, 9.09e+00, 4.60e+04]    []  \n",
      "22000 [4.07e-03]\n",
      "22000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137253.183796      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23000     [1.61e+02, 4.65e-04, 8.36e+00, 9.25e+00, 4.60e+04]    [1.63e+02, 4.65e-04, 8.36e+00, 9.25e+00, 4.60e+04]    []  \n",
      "23000 [4.18e-03]\n",
      "23000 [1.00e+00]\n",
      "\n",
      "Best model at step 23000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.952716 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008336 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "23000     [1.61e+02, 4.65e-04, 8.36e+00, 9.25e+00, 4.60e+04]    [1.63e+02, 4.65e-04, 8.36e+00, 9.25e+00, 4.60e+04]    []  \n",
      "23000 [4.18e-03]\n",
      "23000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137301.189935      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24000     [1.73e+02, 5.22e-04, 8.23e+00, 9.33e+00, 4.60e+04]    [1.69e+02, 5.22e-04, 8.23e+00, 9.33e+00, 4.60e+04]    []  \n",
      "24000 [4.17e-03]\n",
      "24000 [1.00e+00]\n",
      "\n",
      "Best model at step 24000:\n",
      "  train loss: 4.62e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.994650 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011583 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "24000     [1.73e+02, 5.22e-04, 8.23e+00, 9.33e+00, 4.60e+04]    [1.69e+02, 5.22e-04, 8.23e+00, 9.33e+00, 4.60e+04]    []  \n",
      "24000 [4.17e-03]\n",
      "24000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137349.237088      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25000     [1.38e+02, 3.23e-04, 8.23e+00, 9.29e+00, 4.60e+04]    [1.54e+02, 3.23e-04, 8.23e+00, 9.29e+00, 4.60e+04]    []  \n",
      "25000 [4.26e-03]\n",
      "25000 [1.00e+00]\n",
      "\n",
      "Best model at step 25000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.039727 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008081 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "25000     [1.38e+02, 3.23e-04, 8.23e+00, 9.29e+00, 4.60e+04]    [1.54e+02, 3.23e-04, 8.23e+00, 9.29e+00, 4.60e+04]    []  \n",
      "25000 [4.26e-03]\n",
      "25000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137397.192838      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26000     [1.58e+02, 3.03e-04, 7.95e+00, 9.29e+00, 4.60e+04]    [1.52e+02, 3.03e-04, 7.95e+00, 9.29e+00, 4.60e+04]    []  \n",
      "26000 [4.25e-03]\n",
      "26000 [1.00e+00]\n",
      "\n",
      "Best model at step 25000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.62e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.920329 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012132 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "26000     [1.58e+02, 3.03e-04, 7.95e+00, 9.29e+00, 4.60e+04]    [1.52e+02, 3.03e-04, 7.95e+00, 9.29e+00, 4.60e+04]    []  \n",
      "26000 [4.25e-03]\n",
      "26000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137445.357908      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "27000     [1.60e+02, 1.91e-04, 8.19e+00, 9.51e+00, 4.60e+04]    [1.59e+02, 1.91e-04, 8.19e+00, 9.51e+00, 4.60e+04]    []  \n",
      "27000 [4.32e-03]\n",
      "27000 [1.00e+00]\n",
      "\n",
      "Best model at step 27000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.152869 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008034 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "27000     [1.60e+02, 1.91e-04, 8.19e+00, 9.51e+00, 4.60e+04]    [1.59e+02, 1.91e-04, 8.19e+00, 9.51e+00, 4.60e+04]    []  \n",
      "27000 [4.32e-03]\n",
      "27000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137493.343706      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28000     [1.47e+02, 3.99e-04, 8.03e+00, 9.39e+00, 4.60e+04]    [1.53e+02, 3.99e-04, 8.03e+00, 9.39e+00, 4.60e+04]    []  \n",
      "28000 [4.29e-03]\n",
      "28000 [1.00e+00]\n",
      "\n",
      "Best model at step 28000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.995573 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008789 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "28000     [1.47e+02, 3.99e-04, 8.03e+00, 9.39e+00, 4.60e+04]    [1.53e+02, 3.99e-04, 8.03e+00, 9.39e+00, 4.60e+04]    []  \n",
      "28000 [4.29e-03]\n",
      "28000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137541.424431      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29000     [2.35e+02, 3.44e-04, 8.13e+00, 9.47e+00, 4.59e+04]    [2.11e+02, 3.44e-04, 8.13e+00, 9.47e+00, 4.59e+04]    []  \n",
      "29000 [4.38e-03]\n",
      "29000 [1.00e+00]\n",
      "\n",
      "Best model at step 28000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.038998 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.010753 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "29000     [2.35e+02, 3.44e-04, 8.13e+00, 9.47e+00, 4.59e+04]    [2.11e+02, 3.44e-04, 8.13e+00, 9.47e+00, 4.59e+04]    []  \n",
      "29000 [4.38e-03]\n",
      "29000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137589.408748      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30000     [1.87e+02, 2.49e-04, 7.97e+00, 9.54e+00, 4.59e+04]    [1.64e+02, 2.49e-04, 7.97e+00, 9.54e+00, 4.59e+04]    []  \n",
      "30000 [4.36e-03]\n",
      "30000 [1.00e+00]\n",
      "\n",
      "Best model at step 28000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.966749 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008164 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "30000     [1.87e+02, 2.49e-04, 7.97e+00, 9.54e+00, 4.59e+04]    [1.64e+02, 2.49e-04, 7.97e+00, 9.54e+00, 4.59e+04]    []  \n",
      "30000 [4.36e-03]\n",
      "30000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137638.410247      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31000     [1.50e+02, 3.05e-04, 8.14e+00, 9.82e+00, 4.59e+04]    [1.56e+02, 3.05e-04, 8.14e+00, 9.82e+00, 4.59e+04]    []  \n",
      "31000 [4.43e-03]\n",
      "31000 [1.00e+00]\n",
      "\n",
      "Best model at step 31000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.985042 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008031 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "31000     [1.50e+02, 3.05e-04, 8.14e+00, 9.82e+00, 4.59e+04]    [1.56e+02, 3.05e-04, 8.14e+00, 9.82e+00, 4.59e+04]    []  \n",
      "31000 [4.43e-03]\n",
      "31000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137686.379030      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32000     [1.28e+02, 3.88e-04, 7.95e+00, 9.55e+00, 4.59e+04]    [1.44e+02, 3.88e-04, 7.95e+00, 9.55e+00, 4.59e+04]    []  \n",
      "32000 [4.41e-03]\n",
      "32000 [1.00e+00]\n",
      "\n",
      "Best model at step 32000:\n",
      "  train loss: 4.61e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.008558 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008034 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "32000     [1.28e+02, 3.88e-04, 7.95e+00, 9.55e+00, 4.59e+04]    [1.44e+02, 3.88e-04, 7.95e+00, 9.55e+00, 4.59e+04]    []  \n",
      "32000 [4.41e-03]\n",
      "32000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137734.379796      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33000     [1.38e+02, 2.91e-04, 8.15e+00, 9.90e+00, 4.59e+04]    [1.48e+02, 2.91e-04, 8.15e+00, 9.90e+00, 4.59e+04]    []  \n",
      "33000 [4.51e-03]\n",
      "33000 [1.00e+00]\n",
      "\n",
      "Best model at step 33000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.962475 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012358 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "33000     [1.38e+02, 2.91e-04, 8.15e+00, 9.90e+00, 4.59e+04]    [1.48e+02, 2.91e-04, 8.15e+00, 9.90e+00, 4.59e+04]    []  \n",
      "33000 [4.51e-03]\n",
      "33000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137782.368520      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34000     [3.82e+02, 6.30e-04, 7.93e+00, 9.86e+00, 4.59e+04]    [2.79e+02, 6.30e-04, 7.93e+00, 9.86e+00, 4.59e+04]    []  \n",
      "34000 [4.50e-03]\n",
      "34000 [1.00e+00]\n",
      "\n",
      "Best model at step 33000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.61e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.004645 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.010555 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "34000     [3.82e+02, 6.30e-04, 7.93e+00, 9.86e+00, 4.59e+04]    [2.79e+02, 6.30e-04, 7.93e+00, 9.86e+00, 4.59e+04]    []  \n",
      "34000 [4.50e-03]\n",
      "34000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137830.500471      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35000     [1.35e+02, 2.36e-04, 7.91e+00, 9.81e+00, 4.59e+04]    [1.41e+02, 2.36e-04, 7.91e+00, 9.81e+00, 4.59e+04]    []  \n",
      "35000 [4.41e-03]\n",
      "35000 [1.00e+00]\n",
      "\n",
      "Best model at step 35000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.152402 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011125 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "35000     [1.35e+02, 2.36e-04, 7.91e+00, 9.81e+00, 4.59e+04]    [1.41e+02, 2.36e-04, 7.91e+00, 9.81e+00, 4.59e+04]    []  \n",
      "35000 [4.41e-03]\n",
      "35000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137878.562036      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36000     [1.34e+02, 4.01e-04, 8.04e+00, 1.01e+01, 4.58e+04]    [1.45e+02, 4.01e-04, 8.04e+00, 1.01e+01, 4.58e+04]    []  \n",
      "36000 [4.49e-03]\n",
      "36000 [1.00e+00]\n",
      "\n",
      "Best model at step 36000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.024647 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008129 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "36000     [1.34e+02, 4.01e-04, 8.04e+00, 1.01e+01, 4.58e+04]    [1.45e+02, 4.01e-04, 8.04e+00, 1.01e+01, 4.58e+04]    []  \n",
      "36000 [4.49e-03]\n",
      "36000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137926.618843      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37000     [1.63e+02, 1.65e-04, 7.85e+00, 1.00e+01, 4.58e+04]    [1.58e+02, 1.65e-04, 7.85e+00, 1.00e+01, 4.58e+04]    []  \n",
      "37000 [4.49e-03]\n",
      "37000 [1.00e+00]\n",
      "\n",
      "Best model at step 36000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.058262 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012279 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "37000     [1.63e+02, 1.65e-04, 7.85e+00, 1.00e+01, 4.58e+04]    [1.58e+02, 1.65e-04, 7.85e+00, 1.00e+01, 4.58e+04]    []  \n",
      "37000 [4.49e-03]\n",
      "37000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724137974.779153      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38000     [1.52e+03, 3.37e-04, 7.96e+00, 1.01e+01, 4.58e+04]    [8.22e+02, 3.37e-04, 7.96e+00, 1.01e+01, 4.58e+04]    []  \n",
      "38000 [4.27e-03]\n",
      "38000 [1.00e+00]\n",
      "\n",
      "Best model at step 36000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.134624 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008050 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "38000     [1.52e+03, 3.37e-04, 7.96e+00, 1.01e+01, 4.58e+04]    [8.22e+02, 3.37e-04, 7.96e+00, 1.01e+01, 4.58e+04]    []  \n",
      "38000 [4.27e-03]\n",
      "38000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138022.813899      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39000     [1.57e+02, 2.69e-04, 7.99e+00, 1.02e+01, 4.58e+04]    [1.50e+02, 2.69e-04, 7.99e+00, 1.02e+01, 4.58e+04]    []  \n",
      "39000 [4.40e-03]\n",
      "39000 [1.00e+00]\n",
      "\n",
      "Best model at step 39000:\n",
      "  train loss: 4.60e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.041099 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011682 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "39000     [1.57e+02, 2.69e-04, 7.99e+00, 1.02e+01, 4.58e+04]    [1.50e+02, 2.69e-04, 7.99e+00, 1.02e+01, 4.58e+04]    []  \n",
      "39000 [4.40e-03]\n",
      "39000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138070.965934      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40000     [1.42e+02, 4.74e-04, 8.09e+00, 1.04e+01, 4.58e+04]    [1.52e+02, 4.74e-04, 8.09e+00, 1.04e+01, 4.58e+04]    []  \n",
      "40000 [4.45e-03]\n",
      "40000 [1.00e+00]\n",
      "\n",
      "Best model at step 40000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.084434 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012434 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "40000     [1.42e+02, 4.74e-04, 8.09e+00, 1.04e+01, 4.58e+04]    [1.52e+02, 4.74e-04, 8.09e+00, 1.04e+01, 4.58e+04]    []  \n",
      "40000 [4.45e-03]\n",
      "40000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138118.925612      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41000     [1.89e+02, 4.89e-04, 8.03e+00, 1.02e+01, 4.58e+04]    [1.73e+02, 4.89e-04, 8.03e+00, 1.02e+01, 4.58e+04]    []  \n",
      "41000 [4.46e-03]\n",
      "41000 [1.00e+00]\n",
      "\n",
      "Best model at step 40000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.60e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.001400 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007868 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "41000     [1.89e+02, 4.89e-04, 8.03e+00, 1.02e+01, 4.58e+04]    [1.73e+02, 4.89e-04, 8.03e+00, 1.02e+01, 4.58e+04]    []  \n",
      "41000 [4.46e-03]\n",
      "41000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138168.299630      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42000     [1.53e+02, 7.40e-04, 8.19e+00, 1.04e+01, 4.57e+04]    [1.54e+02, 7.40e-04, 8.19e+00, 1.04e+01, 4.57e+04]    []  \n",
      "42000 [4.41e-03]\n",
      "42000 [1.00e+00]\n",
      "\n",
      "Best model at step 42000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.59e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.276494 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011850 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "42000     [1.53e+02, 7.40e-04, 8.19e+00, 1.04e+01, 4.57e+04]    [1.54e+02, 7.40e-04, 8.19e+00, 1.04e+01, 4.57e+04]    []  \n",
      "42000 [4.41e-03]\n",
      "42000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138216.185087      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43000     [1.92e+02, 7.86e-04, 8.19e+00, 1.03e+01, 4.57e+04]    [1.58e+02, 7.86e-04, 8.19e+00, 1.03e+01, 4.57e+04]    []  \n",
      "43000 [4.42e-03]\n",
      "43000 [1.00e+00]\n",
      "\n",
      "Best model at step 42000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.59e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.970359 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012386 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "43000     [1.92e+02, 7.86e-04, 8.19e+00, 1.03e+01, 4.57e+04]    [1.58e+02, 7.86e-04, 8.19e+00, 1.03e+01, 4.57e+04]    []  \n",
      "43000 [4.42e-03]\n",
      "43000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138264.672324      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44000     [1.38e+02, 1.08e-03, 8.38e+00, 1.04e+01, 4.57e+04]    [1.48e+02, 1.08e-03, 8.38e+00, 1.04e+01, 4.57e+04]    []  \n",
      "44000 [4.54e-03]\n",
      "44000 [1.00e+00]\n",
      "\n",
      "Best model at step 44000:\n",
      "  train loss: 4.59e+04\n",
      "  test loss: 4.59e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.486755 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008104 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "44000     [1.38e+02, 1.08e-03, 8.38e+00, 1.04e+01, 4.57e+04]    [1.48e+02, 1.08e-03, 8.38e+00, 1.04e+01, 4.57e+04]    []  \n",
      "44000 [4.54e-03]\n",
      "44000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138313.004865      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45000     [1.39e+02, 1.39e-03, 8.40e+00, 1.04e+01, 4.57e+04]    [1.47e+02, 1.39e-03, 8.40e+00, 1.04e+01, 4.57e+04]    []  \n",
      "45000 [4.35e-03]\n",
      "45000 [1.00e+00]\n",
      "\n",
      "Best model at step 45000:\n",
      "  train loss: 4.58e+04\n",
      "  test loss: 4.58e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.298608 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011643 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "45000     [1.39e+02, 1.39e-03, 8.40e+00, 1.04e+01, 4.57e+04]    [1.47e+02, 1.39e-03, 8.40e+00, 1.04e+01, 4.57e+04]    []  \n",
      "45000 [4.35e-03]\n",
      "45000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138361.173693      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46000     [1.44e+02, 1.44e-03, 8.54e+00, 1.04e+01, 4.56e+04]    [1.51e+02, 1.44e-03, 8.54e+00, 1.04e+01, 4.56e+04]    []  \n",
      "46000 [4.44e-03]\n",
      "46000 [1.00e+00]\n",
      "\n",
      "Best model at step 46000:\n",
      "  train loss: 4.58e+04\n",
      "  test loss: 4.58e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.135651 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011731 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "46000     [1.44e+02, 1.44e-03, 8.54e+00, 1.04e+01, 4.56e+04]    [1.51e+02, 1.44e-03, 8.54e+00, 1.04e+01, 4.56e+04]    []  \n",
      "46000 [4.44e-03]\n",
      "46000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138409.132454      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "47000     [1.89e+02, 2.05e-03, 8.61e+00, 1.03e+01, 4.56e+04]    [1.66e+02, 2.05e-03, 8.61e+00, 1.03e+01, 4.56e+04]    []  \n",
      "47000 [4.58e-03]\n",
      "47000 [1.00e+00]\n",
      "\n",
      "Best model at step 47000:\n",
      "  train loss: 4.58e+04\n",
      "  test loss: 4.58e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.921241 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008223 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "47000     [1.89e+02, 2.05e-03, 8.61e+00, 1.03e+01, 4.56e+04]    [1.66e+02, 2.05e-03, 8.61e+00, 1.03e+01, 4.56e+04]    []  \n",
      "47000 [4.58e-03]\n",
      "47000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138457.186668      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48000     [1.53e+02, 2.00e-03, 8.59e+00, 9.95e+00, 4.55e+04]    [1.50e+02, 2.00e-03, 8.59e+00, 9.95e+00, 4.55e+04]    []  \n",
      "48000 [4.62e-03]\n",
      "48000 [1.00e+00]\n",
      "\n",
      "Best model at step 48000:\n",
      "  train loss: 4.57e+04\n",
      "  test loss: 4.57e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.007173 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007900 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "48000     [1.53e+02, 2.00e-03, 8.59e+00, 9.95e+00, 4.55e+04]    [1.50e+02, 2.00e-03, 8.59e+00, 9.95e+00, 4.55e+04]    []  \n",
      "48000 [4.62e-03]\n",
      "48000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138505.048109      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49000     [1.64e+02, 2.77e-03, 9.09e+00, 1.03e+01, 4.55e+04]    [1.62e+02, 2.77e-03, 9.09e+00, 1.03e+01, 4.55e+04]    []  \n",
      "49000 [4.53e-03]\n",
      "49000 [1.00e+00]\n",
      "\n",
      "Best model at step 49000:\n",
      "  train loss: 4.57e+04\n",
      "  test loss: 4.57e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.857216 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007979 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "49000     [1.64e+02, 2.77e-03, 9.09e+00, 1.03e+01, 4.55e+04]    [1.62e+02, 2.77e-03, 9.09e+00, 1.03e+01, 4.55e+04]    []  \n",
      "49000 [4.53e-03]\n",
      "49000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138552.917037      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50000     [2.36e+02, 1.98e-03, 8.51e+00, 9.53e+00, 4.53e+04]    [1.92e+02, 1.98e-03, 8.51e+00, 9.53e+00, 4.53e+04]    []  \n",
      "50000 [4.80e-03]\n",
      "50000 [1.00e+00]\n",
      "\n",
      "Best model at step 50000:\n",
      "  train loss: 4.55e+04\n",
      "  test loss: 4.55e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.838686 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008012 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "50000     [2.36e+02, 1.98e-03, 8.51e+00, 9.53e+00, 4.53e+04]    [1.92e+02, 1.98e-03, 8.51e+00, 9.53e+00, 4.53e+04]    []  \n",
      "50000 [4.80e-03]\n",
      "50000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138600.779821      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51000     [6.25e+02, 3.84e-03, 8.82e+00, 9.73e+00, 4.53e+04]    [3.27e+02, 3.84e-03, 8.82e+00, 9.73e+00, 4.53e+04]    []  \n",
      "51000 [4.78e-03]\n",
      "51000 [1.00e+00]\n",
      "\n",
      "Best model at step 50000:\n",
      "  train loss: 4.55e+04\n",
      "  test loss: 4.55e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.857689 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007988 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "51000     [6.25e+02, 3.84e-03, 8.82e+00, 9.73e+00, 4.53e+04]    [3.27e+02, 3.84e-03, 8.82e+00, 9.73e+00, 4.53e+04]    []  \n",
      "51000 [4.78e-03]\n",
      "51000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138648.847942      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "52000     [2.84e+02, 2.45e-03, 8.50e+00, 9.30e+00, 4.50e+04]    [2.06e+02, 2.45e-03, 8.50e+00, 9.30e+00, 4.50e+04]    []  \n",
      "52000 [4.81e-03]\n",
      "52000 [1.00e+00]\n",
      "\n",
      "Best model at step 52000:\n",
      "  train loss: 4.53e+04\n",
      "  test loss: 4.52e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 48.124329 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.012010 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "52000     [2.84e+02, 2.45e-03, 8.50e+00, 9.30e+00, 4.50e+04]    [2.06e+02, 2.45e-03, 8.50e+00, 9.30e+00, 4.50e+04]    []  \n",
      "52000 [4.81e-03]\n",
      "52000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138696.722685      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53000     [2.15e+02, 3.20e-03, 8.96e+00, 9.76e+00, 4.49e+04]    [1.90e+02, 3.20e-03, 8.96e+00, 9.76e+00, 4.49e+04]    []  \n",
      "53000 [4.66e-03]\n",
      "53000 [1.00e+00]\n",
      "\n",
      "Best model at step 53000:\n",
      "  train loss: 4.52e+04\n",
      "  test loss: 4.51e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.676328 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008224 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "53000     [2.15e+02, 3.20e-03, 8.96e+00, 9.76e+00, 4.49e+04]    [1.90e+02, 3.20e-03, 8.96e+00, 9.76e+00, 4.49e+04]    []  \n",
      "53000 [4.66e-03]\n",
      "53000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138744.270234      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54000     [2.45e+02, 7.02e-03, 8.79e+00, 9.27e+00, 4.49e+04]    [2.16e+02, 7.02e-03, 8.79e+00, 9.27e+00, 4.49e+04]    []  \n",
      "54000 [4.77e-03]\n",
      "54000 [1.00e+00]\n",
      "\n",
      "Best model at step 54000:\n",
      "  train loss: 4.51e+04\n",
      "  test loss: 4.51e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.482337 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007996 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "54000     [2.45e+02, 7.02e-03, 8.79e+00, 9.27e+00, 4.49e+04]    [2.16e+02, 7.02e-03, 8.79e+00, 9.27e+00, 4.49e+04]    []  \n",
      "54000 [4.77e-03]\n",
      "54000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138793.403720      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55000     [2.83e+02, 4.14e-03, 9.13e+00, 9.13e+00, 4.44e+04]    [2.16e+02, 4.14e-03, 9.13e+00, 9.13e+00, 4.44e+04]    []  \n",
      "55000 [4.89e-03]\n",
      "55000 [1.00e+00]\n",
      "\n",
      "Best model at step 55000:\n",
      "  train loss: 4.47e+04\n",
      "  test loss: 4.47e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 49.161136 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.011421 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "55000     [2.83e+02, 4.14e-03, 9.13e+00, 9.13e+00, 4.44e+04]    [2.16e+02, 4.14e-03, 9.13e+00, 9.13e+00, 4.44e+04]    []  \n",
      "55000 [4.89e-03]\n",
      "55000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138840.712980      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56000     [7.70e+02, 3.99e-03, 9.20e+00, 9.10e+00, 4.45e+04]    [3.70e+02, 3.99e-03, 9.20e+00, 9.10e+00, 4.45e+04]    []  \n",
      "56000 [5.12e-03]\n",
      "56000 [1.00e+00]\n",
      "\n",
      "Best model at step 55000:\n",
      "  train loss: 4.47e+04\n",
      "  test loss: 4.47e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 46.960519 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007938 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "56000     [7.70e+02, 3.99e-03, 9.20e+00, 9.10e+00, 4.45e+04]    [3.70e+02, 3.99e-03, 9.20e+00, 9.10e+00, 4.45e+04]    []  \n",
      "56000 [5.12e-03]\n",
      "56000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138887.927132      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57000     [1.61e+03, 4.10e-03, 1.01e+01, 9.24e+00, 4.42e+04]    [4.50e+02, 4.10e-03, 1.01e+01, 9.24e+00, 4.42e+04]    []  \n",
      "57000 [5.39e-03]\n",
      "57000 [1.00e+00]\n",
      "\n",
      "Best model at step 55000:\n",
      "  train loss: 4.47e+04\n",
      "  test loss: 4.47e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.457921 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.008369 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "57000     [1.61e+03, 4.10e-03, 1.01e+01, 9.24e+00, 4.42e+04]    [4.50e+02, 4.10e-03, 1.01e+01, 9.24e+00, 4.42e+04]    []  \n",
      "57000 [5.39e-03]\n",
      "57000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138935.730508      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58000     [3.94e+02, 5.47e-03, 1.08e+01, 9.20e+00, 4.39e+04]    [2.45e+02, 5.47e-03, 1.08e+01, 9.20e+00, 4.39e+04]    []  \n",
      "58000 [5.65e-03]\n",
      "58000 [1.00e+00]\n",
      "\n",
      "Best model at step 58000:\n",
      "  train loss: 4.43e+04\n",
      "  test loss: 4.42e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.747181 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007772 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "58000     [3.94e+02, 5.47e-03, 1.08e+01, 9.20e+00, 4.39e+04]    [2.45e+02, 5.47e-03, 1.08e+01, 9.20e+00, 4.39e+04]    []  \n",
      "58000 [5.65e-03]\n",
      "58000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724138983.048394      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59000     [5.62e+02, 6.22e-03, 1.15e+01, 9.17e+00, 4.38e+04]    [2.69e+02, 6.22e-03, 1.15e+01, 9.17e+00, 4.38e+04]    []  \n",
      "59000 [5.87e-03]\n",
      "59000 [1.00e+00]\n",
      "\n",
      "Best model at step 58000:\n",
      "  train loss: 4.43e+04\n",
      "  test loss: 4.42e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.112895 s\n",
      "\n",
      "Compiling model...\n",
      "'compile' took 0.007677 s\n",
      "\n",
      "Warning: epochs is deprecated and will be removed in a future version. Use iterations instead.\n",
      "Training model...\n",
      "\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Presumed Alpha\n",
      "<tf.Variable 'Variable:0' shape=() dtype=float32>\n",
      "Step      Train loss                                            Test loss                                             Test metric\n",
      "59000     [5.62e+02, 6.22e-03, 1.15e+01, 9.17e+00, 4.38e+04]    [2.69e+02, 6.22e-03, 1.15e+01, 9.17e+00, 4.38e+04]    []  \n",
      "59000 [5.87e-03]\n",
      "59000 [1.00e+00]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1724139030.020255      24 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60000     [3.09e+02, 9.32e-03, 1.24e+01, 9.10e+00, 4.37e+04]    [2.20e+02, 9.32e-03, 1.24e+01, 9.10e+00, 4.37e+04]    []  \n",
      "60000 [6.17e-03]\n",
      "60000 [1.00e+00]\n",
      "\n",
      "Best model at step 60000:\n",
      "  train loss: 4.41e+04\n",
      "  test loss: 4.40e+04\n",
      "  test metric: []\n",
      "\n",
      "'train' took 47.059954 s\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA14AAAIqCAYAAAA0HJuRAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAD9LklEQVR4nOzdd5wTZf4H8M9Metu+y3aW3nsv0jsCUqToKaBnOZXzDrunond2Pc8r/uyK9eyoCFjgBAREeu99e2/pyczz+2Myswmb7T183/vKK9PzJM9sMt95GscYYyCEEEIIIYQQ0mT4lk4AIYQQQgghhIQ6CrwIIYQQQgghpIlR4EUIIYQQQgghTYwCL0IIIYQQQghpYhR4EUIIIYQQQkgTo8CLEEIIIYQQQpoYBV6EEEIIIYQQ0sQo8CKEEEIIIYSQJkaBFyGEEEIIIYQ0MQq8CKmFtLQ0cByH1atXt3RSmtxPP/2E5cuXo2vXrggLC4NOp0NCQgImT56Mf/zjH8jPz2/pJBJSa5s3bwbHcRg3blyN2164cAEcx9X5sWzZsiZ/H7Ulp6kuli1b1ureB6mbK+k3CgBWr15N5yxpk9QtnQBCSOtQUFCAJUuWYOPGjQCkH/Lx48fDZDIhJycHO3bswMaNG/HYY49h48aNGDZsWAunmNTW448/jieeeAKrVq3C448/3tLJabXMZjOWLl1aafmZM2ewfft2mEwmLFiwoNL60aNH1+l1Vq9ejeXLl2Pp0qVXzIUyaRlt8Vy7cOECOnTogPbt2+PChQstnRxCGhUFXoQQlJaWYvTo0Th58iS6d++ON954A1dddVXANi6XC++99x5WrVqF7OzsFkopIU0nJiYm6MXp6tWrsX379irXE0Ka19y5czF8+HCEh4e3dFIIqRMKvAghWLFiBU6ePIm0tDRs374dUVFRlbbR6XS49dZbMWfOHJSUlDR/IgkhhBAA4eHhFHSRNonaeBHSRDIyMrBixQp06dIFer0e4eHhGDVqFF5//XUIghB0n88//xyTJk1CdHQ0NBoNoqOj0bNnT9xyyy04dOhQwLalpaV45JFH0KdPH5hMJuh0OiQmJmLUqFF47LHH4PF4apXOc+fO4eOPPwYAvPTSS0GDLn/t2rVDt27dKi3/5JNPMHHiRERFRUGn06F9+/a46aabcOrUqaDHkdskXLhwARs2bMC4ceMQHh6OyMhIXH311Th8+LCy7ccff4wRI0bAYrEgIiIC8+bNw9mzZysd0789j91ux8MPP4zOnTtDr9cjMTERN998MzIzM6t8bydOnMDy5cvRvn176HQ6REVFYeLEifjss8+Cbv/444+D4zg8/vjjyM/Px5133omUlBRotVqkpKRgxYoV1Qapp06dwm233YZOnTop58iYMWPw4YcfBt1+3Lhx4DgOmzdvxoEDBzBv3jzExMRAp9OhZ8+e+Pvf/w7GWMA+HMfhiSeeAAA88cQTVbZNys7Oxt13342uXbtCr9fDaDQiJSUFEydOxIsvvljlewhm48aNWLFiBfr376+kLzk5GYsWLcLu3bub5LN8//33MWTIEBiNRkRFRWHatGn45Zdf6pTu+qrLeZOWlobly5cDAN57772A/PBvh3bx4kU899xzmDBhAlJTU6HT6RAREYHRo0fj9ddfhyiKzfLeqmK32/Hss89i4MCBsFgsMBqN6NWrFx555BEUFxcH3Wfv3r1YtGgRkpOTodVqERYWho4dO2L+/Pn45ptvArYVRRFvvPEGRo0ahYiICGg0GsTFxaFfv35YsWJFnaug1SW9P/zwAziOQ48ePao8ntfrRXx8PDiOw8GDBwPWORwO/P3vf8fw4cMREREBvV6Pbt264f7770dhYWGlY/m3VyoqKsKf/vQndOrUCTqdrlZtE6tS23NN9sUXX2DatGmIjY2FVqtFUlISfve73+HYsWOVtpXbQ6alpUEQBLz00ksYMGAAzGZzQBvDY8eOYdWqVRg1ahSSkpKg1WoRHR2NSZMmBf3/WLZsGTp06ABA+h+4vD1lsM8smF27dmHhwoVITEyEVqtFXFwcZs2ahZ9++ino9nI7x9WrV+P8+fO44YYbEB8fD51Oh06dOuGRRx6By+WqtF9jn6fkCsAIITVq3749A8DefffdWm2/a9cuFhUVxQCw1NRUtmjRIjZt2jSm1+sZADZ16lTmcrkC9nniiScYAKZWq9mYMWPYkiVL2IwZM1jv3r0Zx3HsH//4h7KtzWZjvXv3ZgBYbGwsmzVrFlu8eDEbN24ci4+PZwBYcXFxrdL6z3/+kwFgERERzOv11vITqSCKIrvxxhuVtE+YMIEtXryYde3alQFgRqORbdiwodJ+8mf64IMPMo7j2KhRo9jChQuV/SIiItiZM2fYfffdpxx3wYIFLCUlhQFgiYmJrKioKOCYP//8MwPARowYwYYPH86MRiObMWMGu/baa1lCQgIDwOLj49mpU6cqpee7775T8qdbt25s8eLFbMKECUylUjEA7Kabbqq0z6pVq5R1ycnJrF27dmzevHlsxowZLDw8nAFgQ4YMYW63u9K+n332mfJ63bt3Z3PnzmUTJkxgJpOJAWDLly+vtM/YsWOVz0yr1bIePXqwxYsXs7FjxyrpvPvuuwP2Wbp0KevXrx8DwPr168eWLl2qPN58803GGGPZ2dksMTFROV/nzJnDFi1axK666ioWFRXFwsPDqzsFKunUqRPTarVswIABbPbs2WzevHmsZ8+eyjnyxRdfNOpn+cc//pEBYDzPszFjxrDFixeznj17Mp7n2d13380AsLFjx9bpPfh79913GQDWvn37Suvqet7cc889bNSoUQwA69SpU0B+PPPMM8p2f/vb3xgA1qFDBzZx4kQln7VaLQPA5s2bx0RRrJQeAKyuP+1Lly5lANjSpUtrtX1hYSHr378/A8DCwsLY7Nmz2fz581lMTIyS5vPnzwfss3HjRqbRaJTzcMGCBWzu3Lls6NChTKfTsTlz5gRsv3z5cgaA6fV6NmnSJLZkyRI2depU1qVLFwaArVmzptbvr67pFQSBJScnMwDs119/DXrMb7/9lgFgAwcODFiemZnJ+vTpwwCwqKgoNmnSJDZ37lzl+y4tLY1duHAhYB/5/Jo5cybr0KEDi4yMZLNnz2bXXnstu/7662v1HoP9RtX2XPN4PGzhwoUMANPpdGzkyJHs2muvVb43DAZDpe/w8+fPK98Xs2fPZlqtlk2cOJEtWbKE9e3bV9nu5ptvVr7jpk6dyhYtWsRGjBjBeJ5nANif//zngOO++eabbP78+QwAM5lMAWn2Pz/lzyzYOfvGG28oxx8wYABbsmQJGzlypPK/8fjjj1faR/4fuPvuu1lYWBhr3749W7hwIZs0aRIzGAwMALvmmmsq7deY5ym5MlDgRUgt1CXwcjqdyva33357wIXi2bNnWVpaGgPAHn744YB9DAYDM5vN7MSJE5WOeeHCBXb8+HFl/r333mMA2PTp0ytdiAqCwDZv3lwpsKvKDTfcwACwCRMm1Gr7y7366qsMAIuJiWH79+9XlouiqFxMR0REsLy8vID95M9Ip9OxjRs3Ksu9Xi+79tprGQDWu3dvFh0dzQ4cOKCst9lsyo/ok08+GXBMOfACwDp37swuXryorHM4HMoP+vDhwwP2y8nJUS7un3zyyYAL2t27d7PIyEgGgL3xxhsB+8nvDwBbtmwZczqdyrpLly6xpKQkBoB9/PHHAfsdOnSI6XQ6ptfr2Zdffhmw7sKFC8qF23vvvRewTg68ALDXXnstYN2mTZsYx3FMpVKx9PT0oOlctWoVC0YO+m+99dZKF/Nutzsgf2pjzZo1lYJieblarWbR0dHMbrcHTWNdP8vvvvtOuUjbunVrwLqnn35aOWZTBF71PW+qu2iU7dq1ix0+fLjS8szMTOWC+LPPPqu0vjkCr0WLFjEAbNiwYaygoEBZXl5ezqZPn84AsJEjRwbsM378eAaAffjhh5WOV1JSEhDgXLx4kQFgycnJLDs7u9L2x44dC/jfbor0/uUvf2EA2G233Rb0mHPnzmUA2L///W9lmSiKSqBz8803s7KyMmWdx+Nh99xzDwPAxo8fH3As+XwAwCZOnMhKS0tr/d5kVf1G1eZce/jhh5XP59y5cwHrPv/8c6ZSqVhkZGTAzTw58JLz6eTJk0GPvXnzZnb27NlKy0+cOKEEt7/99lvAOvnYwW501PS+Dh06xNRqNeM4jr3//vsB69avX6/cuPjxxx8D1sn/AwDYX/7yl4CbkIcPH1ZuiO3YsUNZ3tjnKbkyUOBFSC3UJfD64IMPlBIZ/4tH2RdffMEAMIvFwhwOB2OMsby8PAYg4E5hdZ5//nkGgL300kt1eh/BTJs2jQFgixcvrtf+nTp1YgDYv/71r0rrRFFkffv2ZQDYU089FbBO/kzvu+++Svvt27dP+RF85ZVXKq3/8ssvg17A+AdeX3/9daX9cnNzmdFoZADY9u3bleVy6cKgQYOCvscXX3yRAWBdunQJWC4HC8nJycxms1Xa79lnnw1a6iFfCL744otBX2/Xrl1B0yMHXvPmzQu6n5yXl19w1BR43XHHHQwA++qrr4Kub0xLlixhANi6deuCprGun+WkSZMYAPbAAw8EfT25pKMpAq/6nje1uRiuzg8//MAAsGuvvbbSuqYOvC5evMh4nmccx7GDBw9WWp+RkaGUAPr/j8klnsEC8svJ5//s2bPr9D4aM71nzpxhAFh4eLjyPS3Ly8tjGo2G6XQ6VlhYqCzfsGEDA8D69+/PPB5PpdcSBEGpqeAfVMvng0ajCRqk1EZ9A6/CwkJmMBiYXq9nGRkZQbeRvx/8g0z/wOvy75vaev3114P+BjQk8JJL2Kr6jrzrrrsYADZ58uSA5fL/wKBBg4KWJN9+++0MAPvrX/+qLGvM85RcOaiNFyGNbPPmzQCAxYsXQ6fTVVo/b948REZGory8HHv37gUAxMbGIi0tDYcOHcI999wTtE69vyFDhgAAnn/+ebz//vsoKipq3DdRSxkZGUpbq2DdcHMcp7Qx+Pnnn4MeY8aMGZWWdenSpVbrs7Kygh4zIiICs2fPrrQ8Li4O06ZNA1CRT/7Twd4DANx8880AgNOnTwd9zYkTJ8JoNFZaLrcR8W9XJooiNmzYAABYtGhR0NcbPHgwzGYz9u/fD6fTWWn9rFmzgu4X7PVqY+jQoQCABx98EF999RWsVmud9g8mKysLb775Ju655x78/ve/x7Jly7Bs2TIcPXoUAHDy5Mmg+9Xls/R6vdi2bRsA4He/+13Q4914440Neh/Vaeh5UxOXy4W1a9fisccew+23347ly5dj2bJleP311wFU/Rk2pa1bt0IURQwYMAB9+/attD4pKQlTp04FEPg/L59j119/PbZt2wav11vla3Tv3h0WiwXr16/HU089hfPnzzd7ejt16oQxY8agtLQUa9asCdjno48+gsfjwZw5cwLaxK5btw4AMH/+fKjVlfsu43keY8aMAQDs2LGj0voBAwagY8eO9XiX9ffzzz/D4XAobbCCkduDBUszIL3f6litVnz++ed4+OGHceuttyrfBV9++SWAxj2P5f/Jqtp+yf+Tv/zyS9C21ldffXXQcfCCff805nlKrhzUqyEhjUz+YpYbCF+O4zh06NABxcXFAV/i77//PhYsWICXXnpJ6eRi2LBhmDx5Mm644QbExMQo244bNw4PPPAAXnjhBSxduhQcx6FLly4YNWoU5syZg1mzZoHna3dfJTY2FgCQl5dX7/caHR2NsLCwoNt06tQpYNvLpaamVlpmNpurXW+xWAAgaFACVHTcEYycLxkZGcqymvIsIiICUVFRKCoqQkZGBhITE2t8DwCUz8Q/nYWFhSgrKwMApKSkBN3PX2FhYaULorq8Xm3ccMMN+Omnn/DRRx9h/vz5UKlU6NmzJ0aPHo0FCxZgwoQJdTreE088gaeeeqraDl7kz+Bydf0s5fmq8q6q5Y2hoedNdXbu3IlFixbh0qVLVW5T1WfYlGp6z0Dw//lnnnkGhw4dwoYNG7BhwwYYDAYMHDgQ48aNw/XXXx/QkYXFYsG7776L5cuX45FHHsEjjzyChIQEDB8+HNOmTcN1110X8B3RFOkFgJtuuglbt27Fu+++iyVLlijL3333XQBQbirJzp07BwB49NFH8eijj1abrmAD0aelpVW7T1OQ07xp06YaB94Olua4uLigN0pka9euxfLly4N2KiJrzPO4pvyW89rpdKKwsBBxcXEB6+vy/dOY5ym5clDgRUgrcdVVV+HChQtYt24dtmzZgh07duCHH37Ahg0bsGrVKqxZswYTJ05Utn/22Wdx++23Y+3atdi2bRu2b9+Od999F++++y6GDBmCn3/+GSaTqcbXHTRoED744APs27cPgiBApVI15duspKYAsbYBZF2xy3r/a4i6pNG/N7qqSkr8BSs1bezPhOd5fPjhh3j44Yexbt06bN++Hdu3b8err76KV199FbNmzcKaNWtqdW589dVXePzxx2E2m/Gf//wHEyZMQGJiIgwGAziOw8MPP4xnnnmmys+/qfK7LbHb7bjmmmuQm5uL5cuX4w9/+AM6d+6MsLAwqFQqnDp1Ct26dWvUc7ipxcfHY8+ePdiyZQs2btyI7du347fffsP27dvx9NNP45lnnsEDDzygbD9//nxMmjQJ3377LX755Rds374da9aswZo1a/DYY4/hp59+Qp8+fZo0zddeey1WrFiBTZs2ISMjA8nJydi3bx8OHTqEpKQkTJkyJWB7+X979OjRygV+VXr16lVpmcFgaLzE15Kc5s6dO2PUqFHVbtu9e/dKy6pLc2ZmJhYtWgSHw4H7778f119/PdLS0mA2m8HzPH788UdMnTq1VZ3Hdf3+aQ3nKWlbKPAipJHJpRPyncRg5CoJl5dkGAwGLFiwAAsWLAAg3WF85JFH8MYbb+Cmm27CxYsXA7ZPS0vDihUrsGLFCgDA7t278bvf/Q67d+/G888/r3QjXp2rr74aK1euRElJCb799lvMnTu3zu9VLsUJVuolfw5VVWNpCtV14SuvS05OVpYlJSXhxIkTVeZZaWmpUp2zoe8jJiYGBoMBDocDL774YkBJZkvr2bMnevbsifvuuw+MMfzvf//Dddddh7Vr1+L999+vdIc/GLmL6Keeegq33nprpfWnT59utPRGR0dD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mMWLF2dY165dO9577z2qVauW27eRzNhs4FsMEk6aAhuBoc5VlmVdTDX0UqqhiIiIiIgr5Crw2r9/PzfffDPHjh2jVq1atGrVitDQUI4cOcKyZcv45ZdfaNmyJatXryYsLCyv2iyXkxZ4/avAxnnHeSzMeDj1eImIiIiIuEauAq/nnnuOY8eO8d577/Hwww9js9nSrf/ggw8YPHgwzz//PFOmTMlVQyVzlm8QNshQUj6ttwvA18P3mrZJRERERESMXAVeP//8M926dWPQoEGXXf/www8zd+5c5s2bl5u3kazwCzL3/+rxSgu8fD188bB7XNs2iYiIiIgIAPbcvPjYsWPUq1cv023q1avH8ePHc/M2khU+F8r4/7vHK1mFNUREREREXC1XgVepUqXYunVrptts3bqVUqVK5eZtJAss3yDz4F89XvEpKiUvIiIiIuJquQq8oqKi+PHHH/noo48uu/7jjz/mp59+omPHjrl5G8mKtFTDK4zxUuAlIiIiIuI6uRrjNWbMGH766SceeughJk6cSOvWrSlTpgxHjx5l2bJlbNmyheDgYMaMGZNX7ZUr8S1m7s+fSbdYpeRFRERERFwvV4FXhQoVWL58OQ8//DDR0dFs2bIl3fq2bdvy/vvvq5T8NXDFVMNkpRqKiIiIiLharidQrl69OosXL2b//v3ExMQQGxtLYGAgjRo1IiwsjFdeeYUFCxawaNGivGivXEla4KVUQxERERGRAifXgVeasLCwy/Zsbd++nejo6Lx6G7mSK/R4OVMNPZVqKCIiIiLiKrkqriEFh+Uc43U63XJnj5eXerxERERERFxFgZe7uMIEyionLyIiIiLiegq83EVaqmFKAqQkOhdrjJeIiIiIiOsp8HIXPkUBm3l8Sa+XxniJiIiIiLieAi93YbODb6B5fMk4L5WTFxERERFxvWxXNezcuXO2tt+0aVN230JyyjfITKB8mR4vBV4iIiIiIq6T7cBr/vz52X4Tm82W7ddIDvgFwem9Jvi6wJlq6KVUQxERERERV8l24LV79+78aIfkhctMoqxUQxERERER18t24FWxYsX8aIfkhcuUlFeqoYiIiIiI66m4hju5TI+XqhqKiIiIiLieAi93oh4vEREREZECSYGXO7ncGK+UC2O8vBR4iYiIiIi4igIvd/KvHi9HqoNER6JZpR4vERERERGXUeDlTnyLmfsLPV7nHeedqzTGS0RERETEdRR4uZO0VMMLPV5ppeRt2PDx8HFNm0RERERERIGXW0lLNbzQ43VpYQ1NYi0iIiIi4joKvNyJs7jGGeCSUvJeSjMUEREREXElBV7uxK+4uU+KA0eySsmLiIiIiBQQCrzcSVpxDYDzZ5xjvBR4iYiIiIi4lgIvd2L3AJ9A8zjhtHq8REREREQKCAVe7uaSSZTTJk9WKXkREREREddS4OVu/C6kG6rHS0RERESkwPB0dQMkj13S45VgvxB4eSnwEhERERFxJQVe7iatwEbCKeJ9UgClGoqIiIiIuJoCL3dzySTKCR4eZpFSDUVEREREXEpjvNxNWqphwmmVkxcRERERKSDU4+VunD1eZ0gocmGRAi8REREREZdS4OVuLi2ukeINgL+XxniJiIiIiLiSUg3djV9xc59wcR4v9XiJiIiIiLiWAi93c2mPV7Lm8RIRERERKQgUeLmbtDFeCWecEyirnLyIiIiIiGsp8HI36cZ4qcdLRERERKQgUODlbtImUE6MvTjGy0uBl4iIiIiIKynwcjdpqYZAgubxEhEREREpEBR4uRsPL/AyE3glpJwHNMZLRERERMTVFHi5I78gkoEUK8U8VY+XiIiIiIhLKfByR75BxNttzqfq8RIRERERcS0FXu7IL4gEmzm0nnZPvDy8XNwgEREREZHrmwIvd3RJj5fSDEVEREREXE+BlzvyCyLBpsBLRERERKSgUODljnyDSLCbQ6vxXSIiIiIirqfAyx2px0tEREREpEBR4OWOfIsRr8BLRERERKTAUODlji5JNfTzUuAlIiIiIuJqCrzc0SWphhrjJSIiIiLiegq83JHKyYuIiIiIFCgKvNzRJRMoK/ASEREREXE9BV7uyDeIBHtaqqECLxERERERV1Pg5Y4uLSevQywiIiIi4nI6K3dHnj7Ee3gB4G+5uC0iIiIiIqLAy10leHoD4Jea6uKWiIiIiIiIAi83leDhCYCfpcBLRERERMTVFHi5qXgPDwD8U5Jd3BIREREREVHg5aac5eRTklzcEhERERERUeDlptKqGvqnJLq4JSIiIiIiosDLTcXbzNguv+QEF7dEREREREQUeLmphAtFNfySFHiJiIiIiLiaAi83ZFkWCVYKAH6JcS5ujYiIiIiIXJeB1/79+2nTpg116tShQYMGfPPNN65uUp5KdCSSNm+y/3kFXiIiIiIirubp6ga4gqenJxMnTqRRo0YcOXKExo0b07lzZ4oUKeLqpuWJ+JR452Pf82dc2BIREREREYHrNPAKDQ0lNDQUgJCQEEqWLMnJkyfdJvBKSDHjunxSU/FQ4CUiIiIi4nIFMtVw2bJldOvWjbJly2Kz2fjhhx8ybPPuu+9SqVIlfH19adasGatXr87Re61btw6Hw0FYWFguW11wJFyoZOhvWZBw2rWNERERERGRghl4nTt3joYNG/Luu+9edv1XX33FiBEjGDNmDOvXr6dhw4ZERUVx7Ngx5zaNGjWiXr16GW6HDh1ybnPy5En69+/P5MmT8/0zXUtpqYZ+qRacPwOWdZVXiIiIiIhIfiqQqYadOnWiU6dOV1w/YcIEHnzwQe69914A3n//febMmcPHH3/MqFGjAIiJicn0PRITE+nRowejRo3ipptuuuq2iYkXJyKOjY0FIDk5meTk5Kx8pHyT9v6XtuPs+bMA+FmpYDlIPncKfIq6pH2SfZc7plL46bi6Hx1T96Tj6n50TN1T8pnDYFkF4rhmtQ0FMvDKTFJSEuvWrWP06NHOZXa7ncjISFasWJGlfViWxcCBA7nlllu45557rrr9uHHjeO655zIsX7BgAf7+/llvfD5auHCh8/H25O0A+F3o6FoybyYJ3iVd0SzJhUuPqbgPHVf3o2PqnnRc3Y+OqZuwUql0Ipo6B7+ifNgAFi60ubpFxMfHX30jCmHg9c8//+BwOChTpky65WXKlGH79u1Z2sfy5cv56quvaNCggXP82GeffUb9+vUvu/3o0aMZMWKE83lsbCxhYWF06NCBwMDAnH2QPJKcnMzChQtp3749Xl5eAHjs8YDfwc/mAUDbG8Mh5PKfTQqeyx1TKfx0XN2Pjql70nF1PzqmbuSfnXjMfRz7/pUAlDu1gtp9xrj8uKZlw11NoQu88sLNN99Mampqlrf38fHBx8cnw3IvLy+XH+g0l7Yl0TJpkf5289wr5RwUkHZK1hWkny/JOzqu7kfH1D3puLofHdNCLCUJlr8Jy14FRxJ4FcHR9j+sOlaWzgXguGb1/Qtd4FWyZEk8PDw4evRouuVHjx4lJCTERa0qWNLKyfvZvc2C86dd1xgRERERkZw6sBZ+fBSObTXPq7WHrhNILRIKc+e6tm3ZVCCrGmbG29ubxo0bs2jRIuey1NRUFi1aRPPmzV3YsoIjLfDy97jQS6eS8iIiIiJSmCTGwbyn4MNIE3T5B0PPD6HfNxBUwdWty5EC2eMVFxfHrl27nM93795NTEwMJUqUoEKFCowYMYIBAwYQERFB06ZNmThxIufOnXNWObzeOcvJe/qZBerxEhERESl8ts+B2EPQ+F7wKJCn7flj50KY/Tic2W+eN7gTol6CIsGubVcuFcgjuHbtWtq2bet8nlbYYsCAAUybNo0+ffpw/Phxnn32WY4cOUKjRo2YP39+hoIb1ytnqqHnhYqL6vESERERKVy2z4UZd5nHO+bB7R+DX5BLm5Tvzv0D80fBpm/M86AK0HUiVGvn0mbllQIZeLVp0wbrKpP+Dh06lKFDh16jFhUuzlRD7yJmgXq8RERERAqP43/C9w9dfP7XIvioPfSdAcFVXdeu/GBZcOYA7PoFFj0PCSfBZocbH4G2T0Pa+awbKJCBl+ROQvKFHi+vC5Mmq8dLREREpHA4fwZm9IWks1CxBbT/H3x9D/zzJ3zYDnp/BpVburqVOXf2KBz6Aw6tN/cH10P8PxfXl6kPt74F5W5wXRvziQIvN+Qc4+VzYY4x9XiJiIiIFHypqaan68QuCCwHd3wCAaXgwcUm7fDgOvisB3SZAI0HuLq1Vxd/Eg7HmODq0B/mFnsw43Z2TyhdB+rfbnq6PNyz7L8CLzfkHOPlW+zCgtOua4yIiIiIZE30OPhzPnj4QJ/PTdAFUDQEBs6BWUNg83fw02NwfDt0eAHsHq5t8785UmDrD7DiXdOrlYENStWEsjdA2XDTs1WmHnj5XuuWXnMKvNyQc4yXbwmzQD1eIiIiIgXb1h/NBMEA3d7MmGrn5Qe9PoJStWDJi7DyPfhnpym64Rt47dv7b4lx8MdnsOI9OLPv4vLilc1nKRtugq3QhuAT4Lp2upACLzcUn3wh1dAvLfA648LWiIiIiEimjm6FmYPM4xsfgUZ9L7+dzQat/w9K1jDb71p4sehGicrXrr2XOnsEVn0Aaz+6eM7pXxKaPgQR90JAade0qwBS4OWGnKmG/iUvLDhtKsbYbK5rlIiIiIhklHDKjN9KPgeVWppiGldTtwcUrwhf9jUph1NuMamJlVrke3Odju+A39+CjV+DI8ksK1EVbhoKDfuaHjpJR4GXG3KmGha5cIUhNRmS492qHKeIiIhIbjgcDpKTk13biFQH/PR/kJwCIc3g1inmcXLK1V9bojYMWABznoTjW+G7odB2NNS5Nf/aa1lm3NYfn8OeX80yvzIQ0hDC74bKrcyYMwfgOJ9/7QCSk5Px9PTk/PnzOByOfH0vLy8vPDxyP5ZOgZcbclY19CthqsSkppheLwVeIiIicp2zLIsjR45w+vRpVzfFjMOvcDtUvAMCysDR08Dp7O2jyRhTPTA5HhKBTSvNPFjpbjZzz7+e2+yAZQIqK9Xcc+HxpcvTHqckgSMRyvUwNy9/8CkKnj6mLXv3Xb6N+cCyLEJCQti/fz+2a5DVFRQUREhISK7eS4GXm3GkOkh0JALg5+UPvsUg/oT5xS5WzrWNExEREXGxtKCrdOnS+Pv7ZzyRTjoHNk/w8snfhpw/A7EJQCkoWhb8gnK+L6sKnDuefj6sK2984ZaayTb2Kyz3BWzgGwR+JfL/O8pEamoqcXFxBAQEYLdfqb25Z1kW8fHxHDt2DIDQ0NAc70uBl5s5f0m3rp+nn/nFiD+hkvIiIiJy3XM4HM6gKzg4OOMGcccg7iBgg6KhpjBEfvSmJMdDwhHwtEGR0lAsJPf79KsAyaUg5bxJYbQc5v7Sx1ZqxueX9n5luHmA/ZLndk/wK14g5tlKTU0lKSkJX1/ffA28APz8zHi1Y8eOUbp06RynHSrwcjNp47ts2PD18L149UQl5UVEROQ6lzamy9/fP+PKc/9cMrmvBWcPQWIsBFUET++8a4QjBU7uNkGPd1EILJt3+/byU1GLfJL2M5OcnJzjwCt/w0O55pyl5D39TNe5b5BZoR4vEREREYCM6YXxJ+HMfvM4oDQUq2B6eJLiTNXAvDqPsiw4tdtUAfTwhuKVVHW6kMiLcWTq8XIzzlLynheudqjHS0REROTKEk7D6b3msX9JM97KZgOfInBqr0kLPLUbEoMhsJyp2pddlmV6z+KOmWDOZocSVcBDp+LXEx1tN+MsJe91oQtdPV4iIiIil3c+Fk7tMY/9SkCx8hd7oDx9oWR1M0Fw3FEzZj4xzsyfldVK0Y4USDhh0hjT5rrCZtIXlRJ43VGqoZu5NNXQPAgy92kziYuIiIgUZgmnYPcyE9TkRuJZOPk3YJkL1UEVMqb92exmDFZwNbB7mVLq/+w0wZhlXXnfyfFweh8c3QKxh0zQZfMwhTRK185RBcOBAwdis9mw2Wx4e3tTrVo1nn/+eVJSzPcQHR3tXG+32ylWrBjh4eH83//9H4cPH063r7Fjxzq3vfRWq1atK77/tGnTCArKfrvlIvV4uZkMqYZpPV5KNRQREZHC7HwsrHoffn8HEs+YYOiWZ6BOj+yPk0qKh3P7AQt8Ak0vVmb78CkKpWqZcWDnT8PZwyZwu7TwhpVqLnSfO25K0qfx9IMiJU01wJykKV6iY8eOTJ06lcTERObOncuQIUPw8vJi9OjRzm127NhBYGAgsbGxrF+/nldffZWPPvqI6Oho6tev79yubt26/PLLL+n27+mp0CA/qcfLzaRNnuzveSHVMO2KilINRUREpDBKioflb8KbDWHJiybosnvCiV3wzUCY3Ab+WpL1/TmS4PT+C1UFA6B45QsTCV+Fh6cphhH0r8Ib8SdMD9jRrSZtMS3o8g2C4OpQqqYJvHIZdAH4+PgQEhJCxYoVGTx4MJGRkfz444/ptildujQhISHUqFGDO++8k+XLl1OqVCkGDx6cbjtPT09CQkLS3UqWLJnjtu3bt4/u3bsTEBBAYGAgvXv35ujRo871GzZsoG3bthQtWpTAwEAaN27M2rVrAdi7dy/dunWjePHiFClShLp16zJ37twct6WgUljrZtTjJSIiIm4hJRHWTYNl4+GcmbyW4GrQ9mmoFgkrJ8Hvb8PhGPisB1RuDZFjoFzjK+/z5G6IOw6BJcArAEpUwbLZSEjKRtqiZzEo5mtSCZPi4fiei+vsnuAXDEWCL851ley44q78vDxyVS3Pz8+PEydOXHWbQYMG8fjjjzvnocprqampzqBr6dKlpKSkMGTIEPr06UN0dDQA/fr1Izw8nEmTJuHh4UFMTAxeXuY7GjJkCElJSSxbtowiRYqwdetWAgIC8rydrqbAy804A6+0AZu+xS6sOO2aBomIiIhkhyMZYqbD0tcg9oBZFlQB2oyG+r0vVgJsMwqaPAC/vg5rPoTdS2HKLVCnO9zyX1MY41Kn98KsIdDoKfDwheAqYPcgISmFOs/+nIcf4ECWt9z6fBT+3tk/Hbcsi0WLFvHzzz/z6KOPXnX7tLFbe/bscQZemzZtyhDc3H333bz//vvZbs+iRYvYtGkTu3fvJiwsDIBPP/2UunXrsmbNGpo0acK+ffsYOXKksy3Vq188Pvv27aNXr17OVMgqVapkuw2FgQIvN5OWaqhy8iIiIlKopDpg0zcQPe5ipcGiZaH1SGh09+UnMS5SEjqOgxsHQ/TLsOFL2DoLts2G8H7QehT4l8Y36SSe03viSEk1PVFBFUzvVCEze/ZsAgICSE5OJjU1lbvuuouxY8de9XXWhUIgl/au1axZM0OaYmBgYI7atW3bNsLCwpxBF0CdOnUICgpi27ZtNGnShBEjRvDAAw/w2WefERkZyR133EHVqlUBeOyxxxg8eDALFiwgMjKSXr160aBBgxy1pSArfD9xkilnOXlPlZMXERERFzj5N/w20RSg8PIDL/9/3V9m2flYM47rnx1mH0VKQcsnoPG94OV79fcMqgA93oObHoVF/4Mdc2D9p7Dxa+yN7+OmXTOxJR6Gss1NZcFL5s/y8/Jg6/NR+fNdXIWfV/bGfbVt25ZJkybh7e1N2bJls1wMY9u2bQBUqlTJuSytMuK1MnbsWO666y7mzJnDvHnzGDNmDDNmzOC2227jgQceICoqijlz5rBgwQLGjRvH66+/nqXevMJEgZebuWI5eUciJCdozggRERHJHwmnzHisVR9AanLO9uEbBDcPh6YPZX2urEuVrg19v4D9q+GXsbB3OR6r3qMoYAWWM8HZicR0L7HZbDlK93OFIkWKZDtYSkhIYPLkybRq1YpSpUrlS7tq167N/v372b9/v7PXa+vWrZw+fZo6deo4t6tRowY1atTg8ccfp2/fvkydOpXbbrsNgLCwMAYNGsSgQYMYPXo0U6ZMUeAlBVuG4hreRU3lHSvV9Hop8BIREZG8lJIEaz+Cpa+Y4Aug6i1QtyeknDcXfpPjL9wSLrm/5LEjCapHQfNHLo5Pz42wpjBwDuxaROri/xF/8jA+d31n5uQ6sTv3+y/Ajh07xvnz5zl79izr1q3j1Vdf5Z9//uH7779Pt11KSgpHjhxJt8xms1GmTJkr7tvhcBATE5NumY+PD5GRkdSvX59+/foxceJEUlJSeOSRR2jdujUREREkJCQwcuRIbr/9dipXrsyBAwdYs2YNvXr1AmD48OF06tSJGjVqcOrUKZYsWULt2rXz5gspQBR4uRlnqqHXhVRDu938AUs4ZcZ5BYa6rnEiIiLiPiwLts+Ghc9emIgYKFUbOrwA1SNd2zYw83JVj8RRqTWL5s6lc3A1cFy5wqC7qFmzJjabjYCAAKpUqUKHDh0YMWIEISEh6bbbsmULoaHpzwt9fHw4f/78FfcdFxdHeHh4umVVq1Zl165dzJo1i0cffZRWrVpht9vp2LEjb7/9NgAeHh6cOHGC/v37c/ToUUqWLEnPnj157rnnABPQDRkyhAMHDhAYGEjHjh1544038uLrKFAUeLmZDD1eYLrtE06ZSf1EREREcuvgeljwDOxdbp4XKQVt/wPh96QbPyV5Z9q0aZmub9OmjbOIxtWMHTs2S0U5LjVw4EAGDhx4xfUVKlRg1qxZl13n7e3Nl19+ecXXpgVo7k6/GW4mwxgvMOO8TqECGyIiIpI7p/fDoudh09fmuacvNB9qxmX5FHVp00QKOgVebuaKPV6gkvIiIiKSPSmJkHjWZM388TmsfM+M2wJo2NfMl1WsnGvbKFJIKPByMxnKycPFyobq8RIRERHLgn0rYNcic1E28awp5554FhL/de9Iyvj6Si3NOK6yja51y0UKNQVebsY5gfKl1QvTqgOpx0tEROT6lXAaNsyAdVPh+PbsvdY7AEpUgTajoWYnU7hCRLJFgZebyTTVMLs9Xo5kMw9GheamOqKIiIgULpYFB9fB2o9h8/dw4TwBL3+ofSsUr2jGZjlvxS4+9g00994BYM/eRL8ikpECLzeTaaphdnu8lrwIv70BNz8OkWPzonkiIiJyLSSehY1fw9qpcHTTxeWl60DEfdCgd97MlyUiWabAy40kO5JJSU0B8qDHy5FiBtECrJwETR/WHGAiIiIF3aEYk0q48RtIPmeWefhA3dtMwBXWVGmCIi6iwMuNpI3vgjzo8fprMZw7bh6nnIdlr0JX95vITkREpNCzLNg+B359HQ6tv7g8uLoJthreCf4lXNc+EQEUeLmVtDRDT5snXh5eF1fkpMdr4wxzX74JHFgD6z+Fmx41A2tFRETE9SwLdsyD6HFwZKNZZveCOreagKtiC/VuiRQgCrzciLOwxqUVDeGSHq8zWdvR+Vhz5Qyg0yuw+EX4axFEvww9J+dNY0VERCRnLAt2LjAB16E/zDLvAGj6ENz4CASUcm37ROSyVKrOjThLyXv+K/DK7gTK23406YXB1aHsDdDuv2b5xq/h6NY8aavIdSc1xZwsiYjklGXBzl/gw3bwRW8TdHn5Q4vhMGwjRI5R0OXGBg4ciM1mc96Cg4Pp2LEjGzduTLedZVlMnjyZZs2aERAQQFBQEBEREUycOJH4eHOuuGXLFnr16kWlSpWw2WxMnDjxqu8fHR2NzWbj9OnT+fDprg8KvNxIQvJlKhrCxR6v5HhIucxEiP+24UKaYcM+JkWhbDjU6Q5YptKhiGTPoRg836xL5NaR2Nd+BEnxV3+NiEgayzKTHX/UHqb3MuXhPf3MEIBhG6H9c1Ak2NWtlGugY8eOHD58mMOHD7No0SI8PT3p2rVrum3uuecehg8fTvfu3VmyZAkxMTH897//ZdasWSxYsACA+Ph4qlSpwssvv0xISIgrPsp1SYGXG7nsHF4APoEXH1+t1+vMAdjzm3lcv/fF5W3/AzY7bJ8NB9blvrEi14uTf8P027HFn6BI0jE8fn4K3qgLS8bBuX9c3ToRKcgsC/6Oho87wuc9zZhrT19oPhSGb4QOL6iH6zrj4+NDSEgIISEhNGrUiFGjRrF//36OHzcF0b7++mumT5/Ol19+ydNPP02TJk2oVKkS3bt3Z/HixbRt2xaAJk2a8Nprr3HnnXfi4+OTJ207deoU/fv3p3jx4vj7+9OpUyd27tzpXL937166detG8eLFKVKkCHXr1mXu3LnO1/br149SpUrh5+dH9erVmTp1ap60qyDRGC83csVUQ7uHmRAx8YwpsBFQ+so72fg1YJkBucUrXlxeqiY07Asx02Hx89B/Vp63X8TtxB2Dz26Dc8exytRnk1dD6sf9hu30Hlj6MiyfCOF3Q/MhKlwjcj1KjIO4o5fcjsHZI+Y+7iic3gf/7DDbeviYghk3D4ei6qHIU5ZlsoJcwcs/xwVQ4uLi+Pzzz6lWrRrBwabHc/r06dSsWZPu3btn2N5ms1GsWP7N3TZw4EB27tzJjz/+SGBgIE899RSdO3dm69ateHl5MWTIEJKSkli2bBlFihRh69atBAQEAPDf//6XrVu3Mm/ePEqWLMmuXbtISEjIt7a6igIvN3LF4hoAfhcCr8x6vCwLNn5lHjfok3F966dMYPZ3NPy9FKq0znWbRdzW+Vj4vBec2gNBFUm5cwa7l62j9j3j8do5D35/y4zPWPMhrP0YaneDFsOgXOOr7zsxDo5uhsMb4cgGc+9IMj3TdW7N948mIjngSIYV78Kf801QdfboxXm2MuPhDY3vhZsf13ya+SU5Hl4q65r3fvoQeBfJ8uazZ892Bivnzp0jNDSU2bNnY7ebJLadO3dSs2bNfGlqZtICruXLl3PTTTcBJggMCwvjhx9+4I477mDfvn306tWL+vXrA1ClysULjvv27SM8PJyIiAgAKlWqdM0/w7WgwMuNpAVeGcZ4wYUCG/syLyl/eAMc326uqtXJeKWE4hUh4l5YPRkWPQ+Vf3GfMrXnz5g0y1K1TA+hSG6kJMJXd5vyzv4l4Z6ZEFDGrLN7Qr2eZjLTPb/B8jdh10LYOsvcKt5sArDq7c3v17kTF4OrIxvN/YldwGUKdXx9DzQbDO2fB0/va/qRRSQThzfCrEfgyKaM67z8zd+HoiEmIyUg7f7CspAGULTMtW+zFEht27Zl0qRJgEnPe++99+jUqROrV6+mYsWKWC4q4rRt2zY8PT1p1qyZc1lwcDA1a9Zk27ZtADz22GMMHjyYBQsWEBkZSa9evWjQoAEAgwcPplevXqxfv54OHTrQo0cPZwDnThR4uZErjvGCrE2inNbbVbPTxe3/reWTsP4zOLjWzB1Sq3NOm1twOFJgahc4usmcJFeLhBodoGq7K38PWRF/Evb8CruXmX+2lVqaK5Y+AXnWdCmAUlNh5iDYvdSUd777WwiuCsnJ6bez2aByS3M7ugV+fxs2fQN7fzO3ElVMABd78PLvUzTUnJCFNjD3B9aYXrRVk+DAarh9avp0YRG59lISYdl4+G2CqWzqV9z0TJepawKrgDL6n1AQePmbnidXvXc2FClShGrVqjmff/jhhxQrVowpU6bwwgsvUKNGDbZv357XrcwTDzzwAFFRUcyZM4cFCxYwbtw4Xn/9dR599FE6derE3r17mTt3LgsXLqRdu3YMGTKE8ePHu7rZeUqBlxuJT77CGC+4+iTKjhTY9K153PDOK79J0TJw4yD47Q1Y/D+o0RHshbxGy4YvTNAFEP+PmTx64wyweUCFG6F6B3MrXTvzHr7zsbD3dxNo7VkGRzaTrldi/yqI+QI6/A/q9XKf3kK5yLLg59Gw5XsziWmfz0xV0KspUxduex9ueQZWToJ1n5iiHGlKVLkkyGpo7v89VrPOrWZs5syHTcWzD1qZfdbslLefUdzD5u/N36oO/wOfoq5ujXs6uA5+GALHzdV+at8KXV7PfJy1uIbNlq10v4LEZrNht9ud46Huuusu7rzzTmbNmpVhnJdlWcTGxubLOK/atWuTkpLCqlWrnD1VJ06cYMeOHdSpU8e5XVhYGIMGDWLQoEGMHj2aKVOm8OijjwJQqlQpBgwYwIABA2jZsiUjR45U4CUFV6aphlfr8fp7CZw7Bv7BpscnMy2GwZqP4dhW2PwdNLgjx212uaR4WPKSeRz5nBlfs3OBuR3fDnuXm9svY6BYBZP+VSPK9F4B7F9pTl52/2rG61iO9PsvVRsqt4KS1WHFO2a8z3f3mzE9nV6BkPrX9ONKPvvtDVj1vnl82/tQ9Zbsvb5YeYh6EVr/nykdHVDG/Iz4Bl79tQA1O8KgX+Gbgeak78s74abHoN2z4OGVvbaI+/prCXz3gPl7ZfcwwYDkneQEM7Hx72+DlWoyKbq8DnV7uLpl4gYSExM5cuQIYFIN33nnHeLi4ujWrRsAvXv3ZubMmfTt25dnnnmGDh06UKpUKTZt2sQbb7zBo48+So8ePUhKSmLrVjM3a1JSEgcPHiQmJoaAgIB0PWqXs2nTJooWvXjBxmaz0bBhQ7p3786DDz7IBx98QNGiRRk1ahTlypVzBoDDhw+nU6dO1KhRg1OnTrFkyRJq164NwLPPPkvjxo2pW7cuiYmJzJ4927nOnSjwciOZFtdwTqJ85vIvTpu7q16vq5+g+RWHFo+ZHq8lL5p/JoX1pG7VJDh7GIIqwI2DwdPHpH51+J8JknYuhD9/NimDZ/bB2o/MzdMXUh2Q+q/0sRJVTKBVqaW5v/TKZvg95h/xr6+bYO6DVhBxP7R9GvxLXNOPLfngj89h0XPmcdQ4qH97zvflW8yMA8uJoApw73xzsWDleyb9cP8qk3pYrFzO2yTu4eTfJjBPu0i05kOof4fp3Zfc27cKZg2BExdKaNe/Azq+ojm2JM/Mnz+f0FBTZKVo0aLUqlWLb775hjZt2gAmCPriiy+YPHkyH3/8MS+++CKenp5Ur16d/v37ExUVBcChQ4cID7+YkTF+/HjGjx9P69atiY6OzrQNrVq1Svfcw8ODlJQUpk6dyrBhw+jatStJSUm0atWKuXPn4uVlzhEdDgdDhgzhwIEDBAYG0rFjR9544w0AvL29GT16NHv27MHPz4+WLVsyY8aMvPjKChQFXm4krZx8pj1el0s1TDwL2+eYxw0ySTO8VLNB5sr+qd3mhDPi3my31+XiT8JvE83jW/5rgq5LFa8ETR80t6R4E3z9+bPpDTuz32wTWA4qtzbBWqWWEBR25ffz8oXWI00q58L/wpaZsGaK6TVs9yzc0F+FPQqrHfPhx8fM4xbDofkjLm0Ont7QcRxUaA6zhprA6/2boecUqH6VHu1/c6RA7AHzs15YL7CIkXgWvrzLZD6UawzB1czY3h8fhUG/ZfwbKFmXdA4W/e9Cj7dlCmR0fcM9xkFLgTFt2jSmTZt21e3sdrszne9KKlWqlO1CHG3atMn0NcWLF+fTTz+94vq33377iuueeeYZnnnmmWy1pzBS4OVGEpIzKa7h7PE6nXHd1h8hJcH8Ey53Q9bezCfAFNqY/xQsfcUEE5fraSvIlo2HxFiTylXvKr0T3v4mxbBGlBnHc2KXCZKKV87+WK2gMLhjmpmPZd5TJmVz9nBYNxU6vQahWTwGUjDsX32xB6HhXRA51tUtuqjOrRBSz7Tv8AaY3gtaPgFtngaPy/z5jz9pytQf3WLGKB7dbFJuU86bVNve07JW7l4KntRU+P5hM94oIAT6TDcXg/5aAv/8aXri2z7t6lYWTrt/hR+HmiwJgEb9TMqwX3GXNktECh4FXm4k06qGvhcGUl6ux2vjha7cBndmL4iIuNekzsUeMOkqNz2avQa70qm9prcJzNiu7BQIsdnMmK3cqtwKHv7VfHdLXjInxh93wKN+b3ysm3O/f8l/x7bD9DvMhYvqHeDWtwpe0ZQSVeC+BbDgP+Zn7dfXTTpU5Fg4vdcEV0cuBFtnM6nqdWYffBQFUS+ZXuCC9jklc9HjYMccMyfUndMvzgfV+TX4ZgD8OgHq9IAydTLdjdtzpGDb+gPVji7EvnSD+d1OijNz5yWdu/D47MXHafdgeoW7vZX9XmURuW4o8HIjOSquceaguVoH0KB39t7Q0wfajDJX+n6dADcMyHoRAFdb/IKZcLZKG6jWznXt8PA0VSLr9TLjg/74HPumr2ln/xFbxVSIGKgT3ILqzEH4vOeFtK0I04tZUFPxvHzN4P6KN5mUyL2/wUdXODksXgnK1DOVFtPu/UuYlMXts2HeSNj3uznBLCy/79e7LTNh2avmcbc3oXzExXV1ukPNLiYo+/FRuH/B9ZvynBQP396H55/zqAuQ5eriNmg8ANr/T78TIpIpBV5uJG2M1+V7vC6kPPy7x2vT14AFFW7K2Zw/DfvC8okm9W7leyYQK+gOb7jwuSk4aWEBpaD7OxBxL6lznsTr0HqYMxx2LzEnSkpZKRgsy1QL3PiVmX4h4SSUrAH9vikcpYjr9TLl6Gc9YnrrSte6JMCqZ6ZMuNKJY5/PTan7tPGJhzdC709NKqMUXEc2wQ8XxhzeOAQa3ZV+vc0GXcabMawH18LqKeZi0PUm/iR80QcOrMby9OVA0RsoW6U2Hr5FTWq9d9qtiLn3ueSxfwn9jRaRLFHg5UYyrWp4uR4vy4INFyZNbtgnZ2/q4Wkmg/z2Xvj9HWjyYMGv3vTLWHNf7/aszbF0LZVrjGPgfLZNe5Q6R77DtnUWHFgHPSdDpRaubp3r/bXYjE+51ulQJ3fDxq9NwHXyr4vLi1eGu78rXFUpS1YzvRrZZbOZoiHlI8yYsZN/wYftTE9a+N153sw8c+agGX9amI5RXjn3jymmkRwPVdpC++cvv11gWXMRas4IWPS8KQgRVCHn72tZJoW1RFUzPragO70PPu9lxrr5FsPRezrrN50kpGNnPLwKaC+2iBRKhXzmW7lUpqmGacU1kuLAcaEE+pGNZqC1h4/J7c+pOj3M5K5JZ2H5Gznfz7Xw1xJz8m73MpPVFkQ2O7vKdMExYJ4ZnxN7AKZ1uZAemXz117urg+vhs9vg444Qdzz/3y/+JKz5CD7qAG81guiXTLDh5Q/1e0O/72Do2tydoBZGYU3N2MRq7U3RjVlDTI9KUryrW5bRttkwsT68WhneaWrSLGO+NCXVs1nN65pypMCOeSb177eJV574PtN9JMPXA8zYvOKV4faPL19QJU3je03mQ/I5mP14zr8fRzL8NMxU0ZzaEVISc7afa+XoFvM7/s+fZozWfT9jham0vojkD/V4uZH45MxSDS+Zpfz8GShS8mJvV82OF3vEcsJuN+XQp98OqyabOa4a9oXgqjnfZ35ITTVzGwE0uR9KVHZte67CKhtuTnDnP2VK9i97zQSOvT4s8G3PF+s/MfeJZ2DJCyYFM6+lJJopAzZ+Ze7T5mmz2c20AQ3vhFpdwKdo5vtxd0WC4a6v4bfXTWGYmOlmAvHen+ZN4Zm8cOiPi5MEA/yzw9zSfo4Cypi5qyo0h7Bm5uJRZoHJtfDPTvO7vuFLiDt6cfmy16DxQLjxkazPxTZ/lBnL510U+s64eo+f3W6Kw0y6CXb9Apu+yf6434RT8HV/M6k8mLTuxf+DDi9kbz/Xyp7fTI9g4hkz2f3d35nvN/k6vsAlIvlKPV5uwrKszKsaeniaf8Bgrp46Usw/Vsj63F2ZqRZpbo5Ec5Lw9g2mZ2L9Z6YCVEGw5XtzIuBdFFqNdHVrssYnALq/aya/9SlmxmC83/Ji0Hy9SDoHm767+HzdJ+ZY5qVN38L46vD1PaaIRGqymWqgwwvw+Fbo/4MJvK73oCuN3W5+j/rPgiKlzbQIk9uYeelc7cwB+OJOU5Guajt44k+48wu46TEo39T0eMcdha2zTIAypS28XAE+uRWiXzapZ9dKYpwJtj6KgncizJjZuKPgX9JMsF6qtslUWPEOvNkAZg4yvTSZWTvVVLDEBr2mmLF8WVGyOrT+P/N43lMmVTGrTvwFH0aaoMs7AFoMM8t/f9tcMMpLlmX+h+XG1lnwWU8TdFVoDvfN0wTjIpLv1OPlJhIdiViY1BB/ryvk1PsFmXTA82fg72g4dwz8SpiAKbdsNrjzS3PCGjPdpPPtW2Fu8/7PVM5qdBdUvDl7pdvzSkqiGbsAcPMw0+NXmNTracbWfP+Q+U5nPmSuSncZn743011tnWV+dotXMuPytsyEeaPg3rl5U/XxxF+mal9Kgkk3qn8HNOij0tpZUbkVDPoVvr3f9LB8ex/s/d300BQNNX9jruXvfOJZUyQh7giUrmOqTfoGmp7KWl3MNskJpkds3wrYt9KU1088A7uXmtuy8aZKXcsnL5Zdz0uWZeZ/++Mz87OcVo7cZjcpnDfcA9WjzETYlgU7F8LyN833u+FLc6vW3gQ3lW5O/zuw93eY+6R5fMszULNT9tp20zDYPBOObYGfnzbjS69m96/w1d1mDHFgebjrK1N0JfEsrP0YfhgMg3/Pm3F2KYkw4y4T4NWIMmm/NaKyN/nz6ikwdyRgQa2uJougsM1DKSKFkgIvN5HW2wXg6+F7+Y18g+DMfjh/6uLcXfV6mX/uecHT2wQI9XpC7CHYMANivoATOy+eLARVMJPMNuprTqKvlbUfmzmLAkJMuk5hFFQBBs4x8zBFv2wqM+5fCb0+MuNu3Nn6z8x9+N2mh3bHfFPSfMv35mc4N1JTLwZdlVqaHpzrtZx2ThUNMd9b9Evm53PNhxd6XDC9S0VDzC2gjAnGioZcuL/wPKhC3vQkOlJM4Hd0s+mFu+ury1dp9PIzpfUr3mSep6aaiaL3rTCB0J4L8+v98bnpdbr5cVN5NLfOHjFprH98bsYUpSlR1fxsN+ybMdCz2aBGB3M7sA5+f9NMer9robmVvcEEYLW7mb+7X90DqSlQ9zYzWXZ2eXrDrW+b6QY2fmUCm8zmpVr/mZkAPjXFTK5955fmuAJ0eNEEZSd2mvFqfT7P3YWS1FQznnDXL+b5tp/MzbeYGWvcoLcZp3alQN+yTOrjr6+b5xH3Qefx+n0XkWtGqYZuIi3w8vHwweNK/0TSxnGdOWgGnYNJncoPgWWh5QgYugbuX2iufvsEmhSepS/Dmw1hWldY+hqseM+kjm361gwo/3spHFgLx7aZiY7PnTBXqHM62Pv8GVh6YQ6bNqMKR9nvK7F7mFSg++abk9XT+0xK59LXCnaxgNz4Z5cJsmx2aNQPgsLg5uFm3YJnc1/UYc0Us3+vIqakv07CcsbD04z17PetOQH3v9CrnJpsLvgcWGN6xNdMMSe/sx4xleQm3QSvVjE9OqmpuWvDz0/DzgVmnGnfGVkvfGK3m97NJvfDwNkw4CcIu9EUD1n5rvl79ctzpuBKdp3aCyveNb+nr9eChc+aoMvL3/w83zsPHl1n/l5erXetfGMzju7RdSYg9PSFQ+vNBMhvNzbfZ/w/JkW2+7s5D3LKN4Zmg83j2cNNOuS/pTpgwX/NPI6pKVC3p7kwlBZ0galo2OtDE3xvn216+HJj0VjY/C3YPeHWd0zAWbSs+Ru//hNThGhifVO59ujW9K91JJsLLGlBV9tnoMsE/b5LoTJw4EBsNpvzFhwcTMeOHdm4cWO67SzLYvLkyTRr1oyAgACCgoKIiIhg4sSJxMeb/5lTpkyhZcuWFC9enOLFixMZGcnq1aszff9p06YRFBSUXx/vuqAeLzeR6fiuNGkpaX98Zq7ul6hqTpDyk81memPCmkLHl03AFzPdpDru+dXcsrwvDzPhcYthJr0pqycVy98y8y0FV4fwe3LyKQqesKYw6DeY84QZq7fkBXOS2O6/rm5Z3ov53NxXizQBPZixOn98bk7ol78JbUfnbN8n/744vUCH569tL6y7qt7e3ABSkkxK89kjcPbwhfsjF5/HHTW9NAknTUCyexn0eD9nvUurPoDVH5jHt31ggoecqtwK7msJfy0y1UQP/QG/TTC9YM2HmF7zzCbKPb4Dtv1oemP+PRaxfFPTu1X3tpxPthtcFbpOgDajYfVkE8ye2m3W+Zc0vU65vcB0y39g+0/m4s7iF6DTyxfXJcaZtOcdc8zz1k9B61GX72kq28ikPP4yxowbq3CTmdIgu1ZNNr/rYIKuRn3N43ZjYO9yM93D1lmmCuxvb5hbmfqmF6xWFzOWb+cCcwGn60STSipSCHXs2JGpU6cCcOTIEZ555hm6du3Kvn0Xx6bec889fP/99zzzzDO88847lCpVig0bNjBx4kQqVapEjx49iI6Opm/fvtx00034+vryyiuv0KFDB7Zs2UK5chrvmF8UeLmJTEvJp0krKX9gjblveGfejI/JKi8/aHCHuZ05YAKGk3+bwglJ8WacQ3L8hcfnTFnjpHgTJIKpTvbXInMLbQQtHoPa3TOvRBZ72FxtBogc4/qqZXnJt5i5mhzWzIzp+HU8BJSGZg+7umV5x5Fiyn9D+qDZ29/MSfTtvaYYQfjdpicsO9JSDJPjTYph4/vyrNlygac3FCtvbldiWaa3Yt5TJoXs/RbQcwpUaZ319/nzZ3NiDWY+qro9ctNqw2YzwX7VdqYnfsmLJoUxehyset9cAAq/9+JnOBRzMdi6NI3QZoeKLUwqYK0umX8X2RVQygRINw83FyJ2LTI94tn9Xbgc7yLQ9Q3Ti7bqfah/uxlneuYgfNnHTMzs4WN61hrckfm+bnrMHNs9v8L3D5gsCI9szI+17SczVhjglv9eDLrA9FhVbmVuncfDn/NNELZzARzdBAs3mUm/ATz94I6p2R/3JlKA+Pj4EBISAkBISAijRo2iZcuWHD9+nFKlSvH1118zffp0fvjhB7p37+58XaVKlbj11luJjY0FYPr06en2++GHH/Ldd9+xaNEi+vfvn6O27du3j0cffZRFixZht9vp2LEjb7/9NmXKmJ7wDRs2MHz4cNauXYvNZqN69ep88MEHREREsHfvXoYOHcpvv/1GUlISlSpV4rXXXqNz5845aktB5UZnode3+JRMSsmn+XfJ+OyWCs5LxcqbcRNZkeowJ8exh8wV5/WfweEYM5YjqCI0Hwrh/S5/hXfpyyZwC2tmBlG7o6YPmkqVS14wJ69FSuZ+3FNBsWuhKZLgXxJqdEy/ru5t5udh73JzYnXHtOztO+21zhRDZV67hM1mUpHLNzWB9PHt8Gl3aPWk6UW52sWSI5vM3wIr1QTnLYbnfftqdTY/f1t/MIHXP3/CL2PxXPEujXzr4Pnuf0zvaxq7F1Rta4Ktmp3zv5iPdxFzwSWvL7pUizRjKjfOMGO0uk405eLjjkCRUqZSZFbGl9rtcNv7MKmF6T2MHmfSUrNi/2ozLQCWmWsss3FrXr4m6K7bw6SFbv3BBGH7VoBfcTMFgruPh5UcubQy9LXm5+mHLYcXwePi4vj888+pVq0awcHBgAmoatasmS7oSmOz2ShW7PIFueLj40lOTqZEiZwVwUlNTaV79+4EBASwdOlSUlJSGDJkCH369CE6OhqAfv36ER4ezqRJk/Dw8CAmJgavC5OUDxkyhKSkJJYtW0aRIkXYunUrAQEBOWpLQabAy01kLdUw6OLjCs0LT1qV3cMMvC9VEzq/Zk7G1kwxKTan98K8keYfedOHTBCSdpJz/M+LRRkin7u2vXvXWqsnTdrWminw/cOmklzVtq5uVe6lHb+Gd2YsAmOzmfTVya1NQYQmD0KlFlnb78m/L87p1v65wvO74M7K1IEHl5h569Z/aqal2POb6dW9Ui9R7GFTwTApzvR4dJmQf7/ndrspHFSnu+mtjx6H7dQeKp5batZ7+ZtApfatphCGu1Qb7TjO9FYd2wofdzDLStcxY+iKV8z6foqVh24T4ZuB8OsE05N4td/Xf3aZ45ty3gS+ncdn/fj6lzDFMyLuMxftPH3zpqqiuKWElASafdHMJe+96q5VV65GfRmzZ892BiTnzp0jNDSU2bNnY79w8XDnzp3UrFkz2+146qmnKFu2LJGROat0vWjRIjZt2sTu3bsJCzO97p9++il169ZlzZo1NGnShH379jFy5Ehq1TJTXFSvfnHex3379tGrVy/q168PQJUqVXLUjoJOl3jdxPmU80AmpeQhfY9Xgz7526D8VCTYFMkYvtn8Iy5eyYwRWfoyvFHXjHs6+Tcses6kJ9bsDBWbu7rV+ctmg06vmMpeqcmmtPOhGFe3KnfOHjVpQ3DlsXmhDeCGC2M15j9lekevJjUVZj16McUw4v68aa/knre/qajX6yMz396+FaaXZPvcjNsmnYMv74TYg1Cyhik6kVcVWjNj9zAXAoauJaXLm/xVqgMpt38KI/+CPp+ZtDt3CbrABCudXrn4vFp7uO/n7AVdaereBo3uBiyY+bDpqb+SuGPweU/zt73sDXD7xzlPFQ8sq6BL3Ebbtm2JiYkhJiaG1atXExUVRadOndi7dy9geu+y6+WXX2bGjBnMnDkTX98rVMa+im3bthEWFuYMugDq1KlDUFAQ27ZtA2DEiBE88MADREZG8vLLL/PXX385t33sscd44YUXaNGiBWPGjMlQMMRdqMfLTWQp1TCtx8vDO2/GQLiat7/p4Yq4z4ytWP6mSWNZ86EpH2+lmvEV7ca4uqXXht3DzLmTcNIUKZh+uzlBCq7q6pblzMYZJnAu3yTzCWBveQY2f29SztZ/ChH3Zr7ftR+Z+ZCUYlhw1b8dyt1gUggP/QEz+kKzQWZcn6ePCbC/f8ikHPsHm7LxfsWvbRs9vLAa9WPzoeJUqNkZvLIxZqmwqdfL9KhbljkOuRkr2+llk+J7ajfMGWGC7H/3YiXGwfQ7TEZD8comRbAwV6OVAs/P049Vd61y2XtnR5EiRahW7WKBmg8//JBixYoxZcoUXnjhBWrUqMH27duzvL/x48fz8ssv88svv9CgQYNstSW7xo4dy1133cWcOXOYN28eY8aMYcaMGdx222088MADREVFMWfOHBYsWMC4ceN4/fXXefTRR/O1TdeazjjcRJZSDSvcaIKvpg9d+5OU/GT3MFdSH1wCA2abK7LWhbLU4XdnftLubjx9oM90U0763HFzxfjsUVe3KvssK/3cXZkpUvJiVcPF/8v8KvrJ3aZ6HijFsKArUQXuW2DGcIIp8PBhpJns+pcxpjy5h7cZZ1TCPVNSCgybzVRzvGlo7gsU+RQ16aM2D9j8nRmDdSlHihnrlxZU3/1d3syhJpIJm82Gv5e/S245Hd91advtdjsJCeY88K677uLPP/9k1qxZGba1LIszZ844n7/66qv873//Y/78+UREROSqHbVr12b//v3s339xvOvWrVs5ffo0derUcS6rUaMGjz/+OAsWLKBnz57OCo0AYWFhDBo0iO+//54nnniCKVOm5KpNBZECLzeR4MhC4BUUBk/tgQ4vXJtGXWs2G1RuCXd/C4N/N2mIHV+5+uvcjW8g9PvOBBWn9sD0Xmaem8Jk/yoz6aqXv5kf6GqaPAAla0L8CVh6hWOemmoKBCjFsPDw9IaoF02Ph18JOLLRzPv1+9tmfY9J5oKSFC7lI0wpfDCp4af2mMeWBXMevzAXm5857oW1x14knyQmJnLkyBGOHDnCtm3bePTRR4mLi6Nbt24A9O7dmz59+tC3b19eeukl1q5dy969e5k9ezaRkZEsWbIEgFdeeYX//ve/fPzxx1SqVMm5z7i4y8zbdwmHw+FMdUy7bdu2jcjISOrXr0+/fv1Yv349q1evpn///rRu3ZqIiAgSEhIYOnQo0dHR7N27l+XLl7NmzRpq164NwPDhw/n555/ZvXs369evZ8mSJc517kSBl5twlpO/2gBNm829i0ykKVPXpCF6Z33AqlspWgbu/t5UHjuyCWb0g+Tzrm5V1qX1dmV1riMPL+j4knm8erKZR+nf1n5kyll7XRhHpBTDwqNGFAxeDhVvNoUWANo8bVISpXBqOcIUeUo6a9JGHSmmoMr6T02K+O0fmwBNRNKZP38+oaGhhIaG0qxZM9asWcM333xDmzZtANMD9sUXXzBhwgR++OEHWrduTYMGDRg7dizdu3cnKioKgEmTJpGUlMTtt9/u3F9oaCjjx4/P9P3j4uIIDw9Pd+vWrRs2m41Zs2ZRvHhxWrVqRWRkJFWqVOGrr74CwMPDgxMnTtC/f39q1KhB79696dSpE8899xxgArohQ4ZQu3ZtOnbsSI0aNXjvvffy74t0EY3xchMJyVno8ZLrS3BV6PctTOtiAo6ZD8HtU01qZkGWeNZUKYTsTXhdLRJqdII/58H80SZFKe0iw6k9sPDCWL/I56BE5TxtslwDgWVhwI9m/GZqihlrJIWX3cNMdP3+zaaHe3ov+DvarOv8minhLyLpTJs2jWnTpl11O7vdzqBBgxg06Mp/J/fs2ZPt9x84cCADBw684voKFSpcNsURwNvbmy+//PKKr3377bez3Z7CSJd83USWUg3l+lO2Edw53cwrtHWWmYQ0BxWPrqktM83k2cHVsp9GFvWi+ax/LTKT6sIlEyWfMz0mTR7I+zbLtWH3MD3ZNw6+Pnru3V3xitDldfM4Lei6eYR+R0XEbSnwchPOVEPP6zS1Tq6sShtT7RCbqfi47DVXtyhzlxbVyO7JdXBVaP6IefzzaEhJhHUfX0wx7K4UQ5ECpUFvM0kzmGlOsjqxsohIIaRUQzcRn5yFcvJy/arX01Q5nPd/sORFU9Wy6YOublVGx3fAgdWm4lnDu3K2j1YjYcMMM5fbgmfgj+lmeeRYVb8TKYh6TDIVE8vUU0+miLg1Xfp1E0o1lKtq9jC0fNI8nvsk/PCImS+nIFn/qbmvEWUKhOSET9GLc7etnnwhxbAFNCmAgaaImF7okPoKukTE7SnwchPnL1T6umpVQ7m+3fKMKeNss0PMdPigFRyKcXWrDEey6amC7BXVuJyGfaHsDeaxl78mShYRERGXu67PROLj46lYsSJPPvmkq5uSa/EpSjWULLDZoM0oGPATFC0LJ/8yk9KueNf1RTf+nA/x/0CR0lC9fe72ZbfDrW9BaEPo9pZSDEVERMTlruvA68UXX+TGG91j8s204hoKvCRLKt1s5kWq2QVSk+Hnp+GL3hB33HVtSiuq0aivmZcrt0Lqw8PLoMEdud+XiIiISC5dt4HXzp072b59O506dXJ1U/KEAi/JNv8SptR85/Hg4QM7F8D7LeCvJTnb36m9sHISzBuV/fTF2EOwa6F5nNs0QxEREZECqEAGXsuWLaNbt26ULVsWm83GDz/8kGGbd999l0qVKuHr60uzZs1YvXp1tt7jySefZNy4cXnUYtfTGC/JEZvNVDd8aAmUqgVxR+Gz28xkw47kzF9rWXB4I0S/bCZBfbMBzB8FqybB5DameEfs4ay1I+YLsFKhQnMoWT3XH0tERESkoCmQ5eTPnTtHw4YNue++++jZs2eG9V999RUjRozg/fffp1mzZkycOJGoqCh27NhB6dKlAWjUqBEpKSkZXrtgwQLWrFlDjRo1qFGjBr///nu+f578lmqlct5hAi/1eEmOlKkLDy4xKYfrpsLyiWbuq14fQYnKF7dzpMC+FbB9jrmd2Xdxnc0OFW4C/+Kw7SdTvGPLD3DzcGg+FLyvcFHAsuCPz81j9XaJiIiImyqQgVenTp0yTQGcMGECDz74IPfeey8A77//PnPmzOHjjz9m1KhRAMTExFzx9StXrmTGjBl88803xMXFkZycTGBgIM8+e/mJGxMTE0lMTHQ+j42NBSA5OZnk5Kv0CuSz5ORkkrnYBk/L0+VtktxJO37X/DjavKDja9gqtcJjznBsB9dhvX8zjo6vglcR7H/OxbZrAbaEU86XWJ5+WFXaklqzM1a19uAfbHZ1cB32hc9gP7gGlryItXYqjrbPYNW73QRol77t3uV4ntqN5V2ElBqdwU1/fl12XCXf6Ji6Jx1X93PpMXU4HFiWRWpqKqmpqS5uWfbce++9nD59mpkzZzqXHTlyhJdeeom5c+dy8OBBSpcuTcOGDRk2bBjt2rW77H6ee+45Zs2axfr1669V0/OFdaEoWNrxzG+pqalYlkVycjIeHh7p1mX170WBDLwyk5SUxLp16xg9erRzmd1uJzIykhUrVmRpH+PGjXOmGU6bNo3NmzdfMehK2/65557LsHzBggX4+7s+tS/JSgLAho3FPy/GprlQ3MLChQtd9M4e+FUdQ+M97xN87k88f3wk3dpEjwCOFgvncLEbOB5YD4fdBw4AB1al302poZT1WkXdQ1/jf/YQnj8+wqlfxrO53F2cDKjh3OyGPR8QBuwtGsGGX5bl/8dzMdcdV8kvOqbuScfV/SxcuBBPT09CQkKIi4sjKSnJ1U3KluTkZFJSUpwdAPv27aNjx44UK1aMsWPHUqdOHZKTk1m8eDFDhgy54jCcxMREHA6Hcz+F3dmzZ6/J+yQlJZGQkMCyZcsyZNXFx8dnaR+FLvD6559/cDgclCmTfnLVMmXKsH379nx5z9GjRzNixAjn89jYWMLCwujQoQOBgYH58p5ZlZyczIz5Zu4jP08/unTp4tL2SO4lJyezcOFC2rdvj5dXHlT3y6nUu3D89jr2Fe9AQGlSa3TCqtkZe/mmhNo9Cc3STrpA8mgcqz/A/vsbFI//m5Y7XyC1dncctzwLvsXxfPNhAMp3G025chH5+YlcqsAcV8kzOqbuScfV/Vx6TB0OB/v37ycgIABfX1/A9JhYCQkuaZvNzy/LF8y9vLzw9PR0nns+9dRT2O12Vq9eTZEiRZzbNWvWjMGDB1/xHNXHxwcPD48rrt+0aROPP/44K1aswN/fn549e/L6668TEBAAQHR0NKNGjWLLli14eXlRt25dPv/8cypWrMiGDRsYMWIEa9euxWazUb16dSZNmkRERN7/f7csi7Nnz1K0aNFr0ulw/vx5/Pz8aNWqlfNnJ01Wg9hCF3jltYEDB151Gx8fH3x8fDIs9/LyKhB/lJMwV2z8PP0KRHskb7j+58sL2j0DbZ8Gmw2PnP5R8/KCNiMhYgAsfgH++Az7tlnY/5wPFZpBSgKUqoVnxRtNsQ835/rjKnlNx9Q96bi6Hy8vL+x2OzabDbvdjt1uUt9T4+P5M6KJS9pUc/067FnMnrLZbM62nzx5kp9//pkXX3yRokWLZti2RIkSme4HcH7+S507d45OnTrRvHlz1qxZw7Fjx3jggQd47LHHmDZtGikpKfTs2ZMHH3yQL7/8kqSkJFavXo2Hhwd2u5177rmH8PBwJk2ahIeHBzExMfj4+Fz2vXIrLb0w7TvJb2k/O5f725DVvxWFLvAqWbIkHh4eHD16NN3yo0ePEhIS4qJWuVayZfJKVVhD8kVe/TELKG0mNW76kCnisXsp7L6QWhh+93URdImIiOSFXbt2YVkWtWrVytP9fvHFF5w/f55PP/3U2Yv2zjvv0K1bN1555RW8vLw4c+YMXbt2pWrVqgDUrl3b+fp9+/YxcuRIZ7uqV1el4ksVusDL29ubxo0bs2jRInr06AGYiHfRokUMHTrUtY1zkbQxXiolL4VCSD3oPwv+/Bl+GWt6vBre5epWiYjIdcrm50fN9etc9t45kVZYIq9t27aNhg0bpktdbNGiBampqezYsYNWrVoxcOBAoqKiaN++PZGRkfTu3ZvQUDMAYcSIETzwwAN89tlnREZGcscddzgDNCmg83jFxcURExPjrEy4e/duYmJi2LfPlK4eMWIEU6ZM4ZNPPmHbtm0MHjyYc+fOOascXm/SAi/1eEmhYbNBzY4wZCU8FgNFgl3dIhERuU7ZbDbs/v4uueV0bFL16tWx2Wz5Vt8gM1OnTmXFihXcdNNNfPXVV9SoUYOVK1cCMHbsWLZs2UKXLl1YvHgxderUSVeF8XpXIAOvtWvXEh4eTnh4OGACrfDwcGflwT59+jB+/HieffZZGjVqRExMDPPnz89QcON6cekYL5FCRymGIiIi2VKiRAmioqJ49913OXfuXIb1p0+fztF+a9euzYYNG9Ltc/ny5djtdmrWrOlcFh4ezujRo/n999+pV68eX3zxhXNdjRo1ePzxx1mwYAE9e/Zk6tSpOWqLOyqQgVebNm1MhZl/3aZNm+bcZujQoezdu5fExERWrVpFs2bNXNdgF3OmGnoq1VBERETkevDuu+/icDho2rQp3333HTt37mTbtm289dZbNG/ePNPXJiQkOLPL0m5//fUX/fr1w9fXlwEDBrB582aWLFnCo48+yj333EOZMmXYvXs3o0ePZsWKFezdu5cFCxawc+dOateuTUJCAkOHDiU6Opq9e/eyfPly1qxZk24M2PWu0I3xkoycqYZe6vESERERuR5UqVKF9evX8+KLL/LEE09w+PBhSpUqRePGjZk0aVKmr/3zzz+dmWVp2rVrxy+//MLPP//MsGHDaNKkCf7+/vTq1YsJEyYA4O/vz/bt2/nkk084ceIEoaGhDBkyhIcffpiUlBROnDhB//79OXr0KCVLlqRnz56XnQv3eqXAyw0o1VBERETEvV2a+ZUmNDSUd955h3feeSfL+xk7dixjx4694vr69euzePHiy64rU6bMFcdseXt78+WXX2a5HdejAplqKNmjcvIiIiIiIgWbAi83oDFeIiIiIiIFmwIvN6By8iIiIiIiBZsCLzegMV4iIiIiIgWbAi83kDbGy99LqYYiIiIiIgWRAi83kGglAurxEhEREREpqBR4uYFkVNVQRERERKQgU+DlBlTVUERERESkYFPg5QacVQ291OMlIiIiIlIQKfByA6pqKCIiIiJpKlWqxMSJE13dDPkXBV5uwFnVUKmGIiIiIm5r//793HfffZQtWxZvb28qVqzIsGHDOHHihKublm+mTZtGUFCQq5uRJxR4FXLJjmQcOAD1eImIiIi4q7///puIiAh27tzJl19+ya5du3j//fdZtGgRzZs35+TJky5rm8PhIDU11WXvX1go8CrkEhwJzsfq8RIRERHJHsuySE50uORmWVaW2zlkyBC8vb1ZsGABrVu3pkKFCnTq1IlffvmFgwcP8p///Cfd9mfPnqVv374UKVKEcuXK8e6776b7zGPHjqVChQr4+PhQtmxZHnvsMef6xMREnnzyScqVK0eRIkVo1qwZ0dHRzvVpvVA//vgjderUwcfHhw8//BBfX19Onz6drh3Dhg3jlltucT7/7bffaNmyJX5+foSFhfHYY49x7ty5LH8P/7Zv3z66d+9OQEAAgYGB9O7dm6NHjzrXb9iwgbZt21K0aFECAwNp3Lgxa9euBWDv3r1069aN4sWLU6RIEerWrcvcuXNz3Jar8cy3Pcs1kZBiAi9PmydeHl4ubo2IiIhI4ZKSlMrkYUtd8t4PvdkaLx+Pq2538uRJfv75Z1588UX8/NJnOIWEhNCvXz+++uor3nvvPWw2GwCvvfYaTz/9NM899xw///wzw4YNo0aNGrRv357vvvuON954gxkzZlC3bl2OHDnChg0bnPscOnQoW7duZcaMGZQtW5aZM2fSsWNHNm3aRPXq1QGIj4/nlVde4cMPPyQ4OJjy5cvz7LPP8t1333H//fcDpifsq6++4sUXXwTgr7/+omPHjrzwwgt8/PHHHD9+nKFDhzJ06FCmTp2a7e8vNTWV2267jYCAAJYuXUpKSgpDhgyhT58+zkCxX79+hIeHM2nSJDw8PIiJicHLy5wzDxkyhKSkJJYtW0aRIkXYunUrAQEB2W5HVinwKuTSAi+lGYqIiIi4p507d2JZFrVr177s+tq1a3Pq1CmOHz9O6dKlAWjRogWjRo0CoEaNGixfvpw33niD9u3bs2/fPkJCQoiMjMTLy4sKFSrQtGlTwPQgTZ06lX379lG2bFkAnnzySebPn8/UqVN56aWXAEhOTua9996jYcOGznbceeedfPHFF87Aa9GiRZw+fZpevXoBMG7cOPr168fw4cMBqF69Om+99RatW7dm0qRJ+Pr6Zut7Wbp0KZs2bWL37t2EhYUB8Omnn1K3bl3WrFlDkyZN2LdvHyNHjqRWrVrO90yzb98+evXqRf369QGoUqVKtt4/uxR4FXLxKfGAAi8RERGRnPD0tvPQm61d9t7ZkZ3UxObNm2d4nlbp8I477mDixIlUqVKFjh070rlzZ7p164anpyebNm3C4XBQo0aNdK9PTEwkODjY+dzb25sGDRqk26Zfv37ceOONHDp0iLJlyzJ9+nS6dOniLI6xYcMGNm7cyPTp09N9ptTUVHbv3n3FwPJK/vzzT8LCwpxBF0CdOnUICgpi27ZtNGnShBEjRvDAAw/w2WefERkZyR133EHVqlUBeOyxxxg8eDALFiwgMjKSXr16ZfhMeUljvAo59XiJiIiI5JzNZsPLx8Mlt7S0wKupVq0aNpuNbdu2XXb9tm3bKF68OKVKlcrS/sLCwtixYwfvvfcefn5+PPLII7Rq1Yrk5GTi4uLw8PBg3bp1xMTEOG/btm3jzTffdO7Dz88vQ/ubNGlC1apVmTFjBgkJCcycOZN+/fo518fFxfHwww+n2++GDRvYuXOnMxjKa2PHjmXLli106dKFxYsXU6dOHWbOnAnAAw88wN9//80999zDpk2biIiI4O23386XdoACr0LvfMp5QIGXiIiIiLsKDg6mffv2vPfeeyQkJKRbd+TIEaZPn06fPn3SBUIrV65Mt93KlSvT9Sj5+fnRrVs33nrrLaKjo1mxYgWbNm0iPDwch8PBsWPHqFatWrpbSEjIVdvar18/pk+fzk8//YTdbqdLly7OdTfccANbt27NsN9q1arh7e2d7e+lRo0a7N+/n/379zuXbd26ldOnT1OnTp102z3++OMsWLCAnj17phtPFhYWxqBBg/j+++954oknmDJlSrbbkVVKNSzk1OMlIiIi4v7eeecdbrrpJqKionjhhReoXLkyW7ZsYeTIkZQrV85ZwCLN8uXLefXVV+nRowcLFy7km2++Yc6cOYCpSuhwOGjWrBn+/v58/vnn+Pn5UbFiRYKDg+nXrx/9+/fn9ddfJzw8nOPHj7No0SIaNGiQLpC6nH79+jF27FhefPFFbr/9dnx8fJzrnnrqKW688UaGDh3KAw884CxosXDhQt55550r7tPhcBATE5NumZeXF23atKF+/fr069ePiRMnkpKSwiOPPELr1q2JiIggISGBkSNHcvvtt1O5cmUOHDjAmjVrnGPOhg8fTqdOnahRowanTp1iyZIl2U53zA4FXoWcxniJiIiIuL/q1auzdu1axowZQ+/evTl58iQhISH06NGDMWPGUKJEiXTbP/HEE6xdu5bnnnuOwMBAJkyYQFRUFABBQUG8/PLLjBgxAofDQf369fnpp5+cY7imTp3KCy+8wBNPPMHBgwcpWbIkN954I127dr1qO6tVq0bTpk1ZvXq1c0xZmgYNGrB06VL+85//0LJlSyzLomrVqvTp0yfTfcbFxREeHp5uWdWqVVm7di0zZ85k2LBhtGrVCrvdTseOHZ3pgh4eHpw4cYL+/ftz9OhRSpYsSc+ePXnuuecAE9ANGTKEAwcOEBgYSMeOHXnjjTeu+hlzymZlZ5SeABAbG0uxYsU4c+YMgYGBLm3L51s+55W1r9AurB0Tb5no0rZI3khOTmbu3Ll07tzZWe5UCj8dV/ejY+qedFzdz6XH1OFwsHv3bipXrpztCnpSsKSmphIbG0tgYCB2e/6Pnjp//vwVf3ayGhtojFchl5ZqqMmTRUREREQKLgVehVxa4OXrqas2IiIiIiIFlQKvQk7FNURERERECj4FXoWcAi8RERERkYJPgVchpzFeIiIiIiIFnwKvQk49XiIiIiIiBZ8Cr0JOxTVERERERAo+BV6FnFINRUREREQKPgVehVx8SjygVEMRERERkYJMgVchpzFeIiIiIpIfbDYbP/zwg6ub4TYUeBVy51POAwq8RERERNyVzWbL9DZ27NgrvnbPnj3YbDZiYmLyvF0DBw6kR48eeb5fd+Xp6gZI7ijVUERERMS9HT582Pn4q6++4tlnn2XHjh3OZQEBAa5olmSTerwKMcuylGooIiIi4uZCQkKct2LFimGz2ZzPS5cuzYQJEyhfvjw+Pj40atSI+fPnO19buXJlAMLDw7HZbLRp0waANWvW0L59e0qWLEmxYsVo3bo169evz9N2L126lKZNm+Lj40NoaCijRo0iJSXFuf7bb7+lfv36+Pn5ERwcTGRkJOfOnQMgOjqapk2bUqRIEYKCgmjRogV79+7N0/Zda+rxKsQSHYlYWIACLxEREZHcmDBhAhMmTLjqdjfccAM//vhjumW33nprloKWESNGMGLEiBy38XLefPNNXn/9dT744APCw8P5+OOPufXWW9myZQvVq1dn9erVNG3alF9++YW6devi7e0NwNmzZxkwYABvv/02lmXx+uuv07lzZ3bu3EnRokVz3a6DBw/SuXNnBg4cyKeffsr27dt58MEH8fX1ZezYsRw+fJi+ffvy6quvctttt3H27Fl+/fVXLMsiJSWFHj168OCDD/Lll1+SlJTE6tWrsdlsuW6XKynwKsQcloOIMhEc+ecIfh4KvERERERyKjY2loMHD151u7CwsAzLjh8/nqXXxsbG5qhtmRk/fjxPPfUUd955JwCvvPIKS5YsYeLEibz77ruUKlUKgODgYEJCQpyvu+WWW9LtZ/LkyQQFBbF06VK6du2a63a99957hIWF8c4772Cz2ahVqxaHDh3iqaee4tlnn+Xw4cOkpKTQs2dPKlasCED9+vUBOHnyJGfOnKFr165UrVoVgNq1a+e6Ta6mwKsQK+JVhMntJjN37lw87B6ubo6IiIhIoRUYGEi5cuWuul1aIPPvZVl5bWBgYI7adiWxsbEcOnSIFi1apFveokULNmzYkOlrjx49yjPPPEN0dDTHjh3D4XAQHx/Pvn378qRt27Zto3nz5ul6qVq0aEFcXBwHDhygYcOGtGvXjvr16xMVFUWHDh24/fbbKV68OCVKlGDgwIFERUXRvn17IiMj6d27N6GhoXnSNldR4CUiIiIi173cpAH+O/WwMBgwYAAnTpzgzTffpGLFivj4+NC8eXOSkpKuyft7eHiwcOFCfv/9dxYsWMDbb7/Nf/7zH1atWkXlypWZOnUqjz32GPPnz+err77imWeeYeHChdx4443XpH35QcU1REREREQKocDAQMqWLcvy5cvTLV++fDl16tQBcI7pcjgcGbZ57LHH6Ny5M3Xr1sXHx4d//vknz9pWu3ZtVqxYgWVZ6d6zaNGilC9fHjBl8lu0aMFzzz3HH3/8gbe3NzNnznRuHx4ezujRo/n999+pV68eX3zxRZ61zxXU4yUiIiIiUkiNHDmSMWPGULVqVRo1asTUqVOJiYlh+vTpAJQuXRo/Pz/mz59P+fLl8fX1pVixYlSvXp3PPvuMiIgIYmNjGTlyJH5+2a8ZcObMmQxzhAUHB/PII48wceJEHn30UYYOHcqOHTsYM2YMI0aMwG63s2rVKhYtWkSHDh0oXbo0q1at4vjx49SuXZvdu3czefJkbr31VsqWLcuOHTvYuXMn/fv3z4uvzGUUeImIiIiIFFKPPfYYZ86c4YknnuDYsWPUqVOHH3/8kerVqwPg6enJW2+9xfPPP8+zzz5Ly5YtiY6O5qOPPuKhhx7ihhtuICwsjJdeeoknn3wy2+8fHR1NeHh4umX3338/H374IXPnzmXkyJE0bNiQEiVKcP/99/PMM88Aprdu2bJlTJw4kdjYWCpWrMjrr79Op06dOHr0KNu3b+eTTz7hxIkThIaGMmTIEB5++OHcf2EuZLMu7f+TLImNjaVYsWKcOXMmzwdJZldycjJz586lc+fOeHl5ubQtkjd0TN2Tjqv70TF1Tzqu7ufSY+pwONi9ezeVK1fG19fX1U2TXEhNTSU2NpbAwEDs9vwfPXX+/Pkr/uxkNTbQGC8REREREZF8psBLREREREQknynwEhERERERyWcKvERERERERPKZAi8RERERua6otpxkV178zCjwEhEREZHrQlqlyvj4eBe3RAqbtJ+Z3FQ71TxeIiIiInJd8PDwICgoiGPHjgHg7++PzWZzcaskJ1JTU0lKSuL8+fP5Wk7esizi4+M5duwYQUFBeHh45HhfCrxERERE5LoREhIC4Ay+pHCyLIuEhAT8/PyuSfAcFBTk/NnJKQVeIiIiInLdsNlshIaGUrp0aZKTk13dHMmh5ORkli1bRqtWrfJ9snMvL69c9XSlUeAlIiIiItcdDw+PPDmZFtfw8PAgJSUFX1/ffA+88oqKa4iIiIiIiOQzBV4iIiIiIiL5TIGXiIiIiIhIPtMYrxxIm0AtNjbWxS0xAwvj4+OJjY0tNPmtkjkdU/ek4+p+dEzdk46r+9ExdU8F6bimxQRXm2RZgVcOnD17FoCwsDAXt0RERERERAqCs2fPUqxYsSuut1lXC80kg9TUVA4dOkTRokVdPulebGwsYWFh7N+/n8DAQJe2RfKGjql70nF1Pzqm7knH1f3omLqngnRcLcvi7NmzlC1bNtPJnNXjlQN2u53y5cu7uhnpBAYGuvyHTvKWjql70nF1Pzqm7knH1f3omLqngnJcM+vpSqPiGiIiIiIiIvlMgZeIiIiIiEg+U+BVyPn4+DBmzBh8fHxc3RTJIzqm7knH1f3omLonHVf3o2PqngrjcVVxDRERERERkXymHi8REREREZF8psBLREREREQknynwEhERERERyWcKvERERERERPKZAq9C7N1336VSpUr4+vrSrFkzVq9e7eomXbeWLVtGt27dKFu2LDabjR9++CHdesuyePbZZwkNDcXPz4/IyEh27tyZbpuTJ0/Sr18/AgMDCQoK4v777ycuLi7dNhs3bqRly5b4+voSFhbGq6++mqEt33zzDbVq1cLX15f69eszd+7cPP+814Nx48bRpEkTihYtSunSpenRowc7duxIt8358+cZMmQIwcHBBAQE0KtXL44ePZpum3379tGlSxf8/f0pXbo0I0eOJCUlJd020dHR3HDDDfj4+FCtWjWmTZuWoT36fc+9SZMm0aBBA+dkm82bN2fevHnO9Tqe7uHll1/GZrMxfPhw5zId28Jl7Nix2Gy2dLdatWo51+t4Fl4HDx7k7rvvJjg4GD8/P+rXr8/atWud693+fMmSQmnGjBmWt7e39fHHH1tbtmyxHnzwQSsoKMg6evSoq5t2XZo7d671n//8x/r+++8twJo5c2a69S+//LJVrFgx64cffrA2bNhg3XrrrVblypWthIQE5zYdO3a0GjZsaK1cudL69ddfrWrVqll9+/Z1rj9z5oxVpkwZq1+/ftbmzZutL7/80vLz87M++OAD5zbLly+3PDw8rFdffdXaunWr9cwzz1heXl7Wpk2b8v07cDdRUVHW1KlTrc2bN1sxMTFW586drQoVKlhxcXHObQYNGmSFhYVZixYtstauXWvdeOON1k033eRcn5KSYtWrV8+KjIy0/vjjD2vu3LlWyZIlrdGjRzu3+fvvvy1/f39rxIgR1tatW623337b8vDwsObPn+/cRr/veePHH3+05syZY/3555/Wjh07rKefftry8vKyNm/ebFmWjqc7WL16tVWpUiWrQYMG1rBhw5zLdWwLlzFjxlh169a1Dh8+7LwdP37cuV7Hs3A6efKkVbFiRWvgwIHWqlWrrL///tv6+eefrV27djm3cffzJQVehVTTpk2tIUOGOJ87HA6rbNmy1rhx41zYKrEsK0Pg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LLEaNWpkeXt7W1WqVEn3Hmn0+5579913n1WxYkXL29vbKlWqlNWuXTtn0GVZOp7u5N+Bl45t4dKnTx8rNDTU8vb2tsqVK2f16dMn3VxPOp6F108//WTVq1fP8vHxsWrVqmVNnjw53Xp3P1+yWZZl5W+fmoiIiIiIyPVNY7xERERERETymQIvERERERGRfKbAS0REREREJJ8p8BIREREREclnCrxERERERETymQIvERERERGRfKbAS0REREREJJ8p8BIREREREclnCrxERESuoejoaGw2G2PHjnV1U0RE5BpS4CUiIgXanj17sNlsdOzY0bls4MCB2Gw29uzZ47qGZcJms9GmTRtXN0NERAoQT1c3QERE5HrStGlTtm3bRsmSJV3dFBERuYYUeImIiFxD/v7+1KpVy9XNEBGRa0yphiIiUqhUqlSJTz75BIDKlStjs9kum9q3e/duHnjgASpUqICPjw+hoaEMHDiQvXv3Zthn2usPHjxI//79CQkJwW63Ex0dDcCSJUu47777qFmzJgEBAQQEBBAREcHkyZPT7Sdt/BbA0qVLnW2z2WxMmzYt3TaXG+O1efNmevfuTenSpfHx8aFy5coMHz6cEydOXPZ7qFSpEnFxcQwbNoyyZcvi4+NDgwYN+Pbbb7P5rYqISH5Tj5eIiBQqw4cPZ9q0aWzYsIFhw4YRFBQEmEAkzapVq4iKiuLcuXN07dqV6tWrs2fPHqZPn868efNYsWIFVapUSbffEydO0Lx5c0qUKMGdd97J+fPnCQwMBOCVV15h165d3Hjjjdx2222cPn2a+fPn8/DDD7Njxw5ef/11ZxvGjBnDc889R8WKFRk4cKBz/40aNcr0c/32229ERUWRlJTE7bffTqVKlVixYgVvvvkms2fPZuXKlRnSE5OTk+nQoQOnTp2iV69exMfHM2PGDHr37s38+fPp0KFDzr5kERHJe5aIiEgBtnv3bguwoqKinMsGDBhgAdbu3bszbJ+UlGRVqlTJKlq0qLV+/fp063799VfLw8PD6tq1a7rlgAVY9957r5WSkpJhn3///XeGZcnJyVb79u0tDw8Pa+/evRn217p168t+niVLlliANWbMGOcyh8NhVa1a1QKs+fPnp9t+5MiRFmDdd9996ZZXrFjRAqzu3btbiYmJzuW//PJLhu9LRERcT6mGIiLiVmbPns2ePXsYOXIk4eHh6dbdfPPNdO/enblz5xIbG5tunbe3N6+++ioeHh4Z9lm5cuUMyzw9PRk0aBAOh4MlS5bkqs3Lly/nr7/+olOnTkRFRaVb9+yzz1KiRAm++OILkpKSMrz2jTfewNvb2/m8Xbt2VKxYkTVr1uSqTSIikreUaigiIm5l5cqVAOzYseOy46iOHDlCamoqf/75JxEREc7llStXvmKlwbNnzzJ+/Hh++OEH/vrrL86dO5du/aFDh3LV5j/++APgsiXo08aTLViwgB07dlC/fn3nuqCgoMsGheXLl2fFihW5apOIiOQtBV4iIuJWTp48CcD06dMz3e7fwVOZMmUuu11SUhJt2rRh/fr1hIeHc8899xAcHIynpyd79uzhk08+ITExMVdtTut9u1IbQkND022XplixYpfd3tPTk9TU1Fy1SURE8pYCLxERcStpBTF++uknunbtmuXXpVUj/LdZs2axfv167r//fj788MN062bMmOGssJgbaW0+evToZdcfOXIk3XYiIlL4aIyXiIgUOmnjsBwOR4Z1zZo1A8izVLu//voLgO7du2dY9+uvv172NXa7/bJtu5K0sWhp5esvde7cOdauXYufnx81a9bM8j5FRKRgUeAlIiKFTokSJQDYv39/hnXdu3enQoUKTJgwgWXLlmVYn5yczG+//Zbl96pYsSJAhtcsXbqUKVOmXLF9Bw4cyPJ7tGjRgqpVqzJv3jx++eWXdOteeOEFTpw4Qd++fdMV0RARkcJFqYYiIlLo3HLLLYwfP56HHnqIXr16UaRIESpWrMg999yDj48P3377LZ06daJ169bccsst1K9fH5vNxt69e/n1118JDg5m+/btWXqvbt26UalSJV599VU2b95MvXr12LFjB7Nnz+a222677GTFt9xyC19//TU9evQgPDwcDw8Pbr31Vho0aHDZ97Db7UybNo2oqCg6d+7MHXfcQcWKFVmxYgXR0dFUrVqVl19+OVffmYiIuJYCLxERKXQ6derEq6++ypQpU3j99ddJTk6mdevW3HPPPQA0adKEDRs28NprrzF37lyWL1+Oj48P5cqVo0ePHvTt2zfL7xUQEMDixYsZOXIky5YtIzo6mrp16zJ9+nTKlClz2cDrzTffBGDx4sX89NNPpKamUr58+SsGXmBK3a9cuZLnn3+eBQsWcObMGcqWLcuwYcN45plnrlhxUURECgebZVmWqxshIiIiIiLizjTGS0REREREJJ8p8BIREREREclnCrxERERERETymQIvERERERGRfKbAS0REREREJJ8p8BIREREREclnCrxERERERETymQIvERERERGRfKbAS0REREREJJ8p8BIREREREclnCrxERERERETymQIvERERERGRfPb/anKfaDRqzdgAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "# Set backend\n",
    "os.environ[\"DDE_BACKEND\"] = \"tensorflow\"\n",
    "import tensorflow as tf\n",
    "import deepxde as dde\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.interpolate import interp1d\n",
    "from scipy.interpolate import RegularGridInterpolator\n",
    "from deepxde.callbacks import Callback\n",
    "import pandas as pd\n",
    "\n",
    "BATCH_SIZE = 32  # Batch size\n",
    "#LEARNING_RATE = 1e-3  # Learning rate\n",
    "\n",
    "ITERATIONS_A = 20000  # Number of training iterations\n",
    "ITERATIONS_LBFGS = 20000  # Number of training iterations\n",
    "ITERATIONS_A2 = 20000  # Number of training iterations\n",
    "ITERATIONS_LBFGS2 = 10000  # Number of training iterations \n",
    "\n",
    "T_Start = 0\n",
    "TIME_STEP = 0.02\n",
    "T_End = 0.02\n",
    "# Define the computational domain\n",
    "geom = dde.geometry.Interval(-1, 1)\n",
    "time_domain = dde.geometry.TimeDomain(T_Start, T_End)\n",
    "geomtime = dde.geometry.GeometryXTime(geom, time_domain)\n",
    "\n",
    "# Define gamma_2 as a trainable variable with an initial value\n",
    "gamma_1_AC = tf.Variable(1.0, dtype=tf.float32) # Alpha\n",
    "gamma_2_AC = tf.Variable(1.0, dtype=tf.float32, trainable=False) # Kappa \n",
    "def cahn_hilliard(x, y):\n",
    "    print(\"Presumed Alpha\")\n",
    "    print(gamma_1_AC)\n",
    "    dy_t = dde.grad.jacobian(y, x, i=0, j=1)\n",
    "    laplacian_u = dde.grad.hessian(y, x, i=0, j=0)\n",
    "    laplacian_u_cubed = dde.grad.hessian(y**3, x, i=0, j=0)   # second derivative y^3\n",
    "    fourth_derivative_u = dde.grad.hessian(laplacian_u, x, i=0, j=0)\n",
    "    return dy_t - gamma_2_AC * (laplacian_u_cubed - laplacian_u - gamma_1_AC * fourth_derivative_u)\n",
    "\n",
    "# Initial condition Allen Cahn\n",
    "def init_condition_CA(x):\n",
    "    return -np.cos(2 * np.pi * x[:, 0:1])\n",
    "\n",
    "# Initial condition dde for Allen Cahn Equation\n",
    "initial_condition_h_AC = dde.icbc.IC(geomtime, init_condition_CA, lambda _, on_initial: on_initial, component=0)\n",
    "\n",
    "# Boundary Condition for the Allen-Cahn equation\n",
    "bc_h = dde.icbc.PeriodicBC(geomtime, 0, lambda _, on_boundary: on_boundary, derivative_order=0, component=0)\n",
    "bc_h_deriv = dde.icbc.PeriodicBC(geomtime, 0, lambda _, on_boundary: on_boundary, derivative_order=1, component=0)\n",
    "\n",
    "\n",
    "# Load the data from the text file\n",
    "data = np.loadtxt('/kaggle/input/output-ch1d/output-CH1d.txt', skiprows=1)\n",
    "print(data)\n",
    "# Split the data into spatial coordinates (x), time (t), and solution values (u)\n",
    "observed_x = data[:, 0:1]  # The x column (as 2D array)\n",
    "observed_t = data[:, 1:2]  # The t column (as 2D array)\n",
    "observed_h = data[:, 2:4]  # The solution column (as 2D array)\n",
    "# Combine x and t to create the observation points in the space-time domain\n",
    "observed_xt = np.hstack((observed_x, observed_t))\n",
    "# Define the PointSetBC using the observed points and solution values\n",
    "observe_h_AC = dde.icbc.PointSetBC(observed_xt, observed_h, component=0)\n",
    "\n",
    "data_AC_inverse = dde.data.TimePDE(\n",
    "        geomtime,\n",
    "        cahn_hilliard,\n",
    "        #[bc_h, bc_h_deriv, initial_condition_h_AC],  # Include observe_h here\n",
    "        [bc_h, bc_h_deriv, initial_condition_h_AC, observe_h_AC],  # Include observe_h here\n",
    "        num_domain=20000,\n",
    "        num_boundary=1600,\n",
    "        num_initial=4096,\n",
    "        anchors=observed_xt,  # Make sure observed_xt is used as anchors if necessary\n",
    "        num_test=40000,\n",
    "    )\n",
    "\n",
    "# Your file path\n",
    "file_path = \"kaggle/working/losses_simple.txt\"\n",
    "# Check if file exists and delete it\n",
    "if os.path.exists(file_path):\n",
    "    os.remove(file_path)\n",
    "    print(f\"Removed existing file: {file_path}\")\n",
    "\n",
    "class SimpleLossTrackingCallback(Callback):\n",
    "    def __init__(self, every_n_epochs=1000, file_path=file_path):\n",
    "        super(SimpleLossTrackingCallback, self).__init__()\n",
    "        self.every_n_epochs = every_n_epochs\n",
    "        self.file_path = file_path\n",
    "        \n",
    "        # Ensure the directory exists\n",
    "        os.makedirs(os.path.dirname(self.file_path), exist_ok=True)\n",
    "        \n",
    "        # Check if file exists and is not empty, if so, skip writing the header\n",
    "        if not os.path.exists(self.file_path) or os.stat(self.file_path).st_size == 0:\n",
    "            with open(self.file_path, \"w\") as f:\n",
    "                f.write(\"Epoch,PDE Loss,BC1 Loss,BC2 Loss,IC Loss,Observe Loss\\n\")\n",
    "\n",
    "    def on_epoch_end(self):\n",
    "        if self.model.train_state.step % self.every_n_epochs == 0 or self.model.train_state.step == 1:\n",
    "            current_losses = self.model.train_state.loss_train\n",
    "            loss_str = \",\".join(map(str, current_losses))\n",
    "            with open(self.file_path, \"a\") as f:\n",
    "                f.write(f\"{self.model.train_state.step},{loss_str}\\n\")\n",
    "\n",
    "iterations_list = [0]  # Starting with iteration 0\n",
    "\n",
    "gamma_1_values = [gamma_1_AC.value().numpy()]  # Assuming this is how you access the value of your variable\n",
    "gamma_2_values = [gamma_2_AC.value().numpy()]  # Assuming this is how you access the value of your variable\n",
    "\n",
    "# Network Architecure\n",
    "#net = dde.nn.FNN([2] + [128] * 6 + [1], \"tanh\", \"Glorot normal\")\n",
    "net = dde.nn.FNN([2] + [60] * 4 + [1], \"tanh\", \"Glorot normal\")\n",
    "variable_gamma_1 = dde.callbacks.VariableValue(gamma_1_AC, period=1000)\n",
    "variable_gamma_2 = dde.callbacks.VariableValue(gamma_2_AC, period=1000)\n",
    "detailed_loss_tracker = SimpleLossTrackingCallback()\n",
    "model = dde.Model(data_AC_inverse, net)\n",
    "\n",
    "Loss_Weights = [1, 1, 1, 1, 1000]\n",
    "\n",
    "total_iterations = 0\n",
    "while total_iterations < 60000:\n",
    "                # Calculate the number of iterations for this loop\n",
    "                iter_this_loop = 1000\n",
    "                # Update the total iterations\n",
    "                #model.compile(\"adam\", lr=1e-3, loss= 'MSE', loss_weights=Loss_Weights, external_trainable_variables=[gamma_1_AC, gamma_2_AC])\n",
    "                #losshistory, train_state = model.train(epochs=70000, display_every=1000, callbacks=[variable_gamma_1, variable_gamma_2, detailed_loss_tracker])\n",
    "\n",
    "                model.compile(\"adam\", lr=1e-3, loss= 'MSE', loss_weights=Loss_Weights, external_trainable_variables=[gamma_1_AC, gamma_2_AC])\n",
    "                losshistory, train_state = model.train(epochs=iter_this_loop, display_every=1000, callbacks=[variable_gamma_1, variable_gamma_2, detailed_loss_tracker])\n",
    "                # Update gamma value and error after training\n",
    "                current_gamma_1_value = gamma_1_AC.value().numpy()\n",
    "                current_gamma_2_value = gamma_2_AC.value().numpy()\n",
    "\n",
    "                # model.compile(\"L-BFGS\", loss = 'MSE', loss_weights = Loss_Weights, external_trainable_variables=[gamma_2_AC])\n",
    "                # losshistory, train_state = model.train(display_every=1000, callbacks=[observed_data_loss_callback, variable])\n",
    "\n",
    "                # Update gamma value and error after training\n",
    "                gamma_1_values.append(current_gamma_1_value)\n",
    "                gamma_2_values.append(current_gamma_2_value)\n",
    "\n",
    "                iterations_list.append(total_iterations + iter_this_loop)\n",
    "\n",
    "                total_iterations += 1000\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(iterations_list, gamma_1_values, '-o', label='Iteration vs Gamma Values', color='blue')\n",
    "plt.plot(iterations_list, gamma_2_values, '-o', label='Iteration vs Gamma Values', color='red')\n",
    "plt.xlabel('Gamma Value', fontsize=14)\n",
    "plt.ylabel('Iterations', fontsize=14)\n",
    "plt.title('Iterations vs. Gamma Value', fontsize=16)\n",
    "plt.legend()\n",
    "plt.grid(True, which=\"both\", ls=\"--\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# Load the losses from the file\n",
    "losses_df = pd.read_csv(file_path)\n",
    "\n",
    "# Calculate the total loss as the sum of component-wise losses for each iteration\n",
    "# Assuming that the first column is 'Epoch' and the rest are loss components\n",
    "loss_components = losses_df.columns[1:]  # Exclude 'Epoch'\n",
    "losses_df['Total Loss'] = losses_df[loss_components].sum(axis=1)\n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot component-wise losses\n",
    "for component in loss_components:\n",
    "    plt.plot(losses_df['Epoch'], losses_df[component], label=component)\n",
    "\n",
    "# Plot total loss\n",
    "plt.plot(losses_df['Epoch'], losses_df['Total Loss'], label='Total Loss', color='black', linewidth=2, linestyle='--')\n",
    "\n",
    "plt.xlabel('Iteration', fontsize=14)\n",
    "plt.ylabel('Loss', fontsize=14)\n",
    "plt.title('Loss Components and Total Loss over Iterations', fontsize=16)\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.yscale('log')  # Use logarithmic scale if desired\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c011744e",
   "metadata": {
    "papermill": {
     "duration": 0.063628,
     "end_time": "2024-08-20T07:31:08.843306",
     "exception": false,
     "start_time": "2024-08-20T07:31:08.779678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5522806,
     "sourceId": 9143912,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5566588,
     "sourceId": 9206556,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2930.603067,
   "end_time": "2024-08-20T07:31:12.780190",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-20T06:42:22.177123",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
