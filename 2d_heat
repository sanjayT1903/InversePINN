{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26dd1033",
   "metadata": {
    "papermill": {
     "duration": 0.004435,
     "end_time": "2025-02-24T05:53:13.738052",
     "exception": false,
     "start_time": "2025-02-24T05:53:13.733617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c19e18a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:53:13.748356Z",
     "iopub.status.busy": "2025-02-24T05:53:13.747549Z",
     "iopub.status.idle": "2025-02-24T05:53:17.236544Z",
     "shell.execute_reply": "2025-02-24T05:53:17.235648Z"
    },
    "papermill": {
     "duration": 3.497299,
     "end_time": "2025-02-24T05:53:17.239148",
     "exception": false,
     "start_time": "2025-02-24T05:53:13.741849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f9353db5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:53:17.254533Z",
     "iopub.status.busy": "2025-02-24T05:53:17.254133Z",
     "iopub.status.idle": "2025-02-24T05:53:17.270300Z",
     "shell.execute_reply": "2025-02-24T05:53:17.269341Z"
    },
    "papermill": {
     "duration": 0.026079,
     "end_time": "2025-02-24T05:53:17.272113",
     "exception": false,
     "start_time": "2025-02-24T05:53:17.246034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7574e207",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:53:17.280611Z",
     "iopub.status.busy": "2025-02-24T05:53:17.280294Z",
     "iopub.status.idle": "2025-02-24T05:53:17.284375Z",
     "shell.execute_reply": "2025-02-24T05:53:17.283528Z"
    },
    "papermill": {
     "duration": 0.010153,
     "end_time": "2025-02-24T05:53:17.286062",
     "exception": false,
     "start_time": "2025-02-24T05:53:17.275909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "80faee22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:53:17.294275Z",
     "iopub.status.busy": "2025-02-24T05:53:17.294019Z",
     "iopub.status.idle": "2025-02-24T05:53:17.357932Z",
     "shell.execute_reply": "2025-02-24T05:53:17.357064Z"
    },
    "papermill": {
     "duration": 0.07046,
     "end_time": "2025-02-24T05:53:17.360170",
     "exception": false,
     "start_time": "2025-02-24T05:53:17.289710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd23b09f",
   "metadata": {
    "papermill": {
     "duration": 0.00636,
     "end_time": "2025-02-24T05:53:17.373322",
     "exception": false,
     "start_time": "2025-02-24T05:53:17.366962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9570d691",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:53:17.386906Z",
     "iopub.status.busy": "2025-02-24T05:53:17.386069Z",
     "iopub.status.idle": "2025-02-24T05:53:17.630344Z",
     "shell.execute_reply": "2025-02-24T05:53:17.629433Z"
    },
    "papermill": {
     "duration": 0.252694,
     "end_time": "2025-02-24T05:53:17.632509",
     "exception": false,
     "start_time": "2025-02-24T05:53:17.379815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e75899c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:53:17.641394Z",
     "iopub.status.busy": "2025-02-24T05:53:17.641105Z",
     "iopub.status.idle": "2025-02-24T05:53:18.955435Z",
     "shell.execute_reply": "2025-02-24T05:53:18.954520Z"
    },
    "papermill": {
     "duration": 1.321042,
     "end_time": "2025-02-24T05:53:18.957502",
     "exception": false,
     "start_time": "2025-02-24T05:53:17.636460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1af5435e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:53:18.967167Z",
     "iopub.status.busy": "2025-02-24T05:53:18.966789Z",
     "iopub.status.idle": "2025-02-24T05:53:18.970361Z",
     "shell.execute_reply": "2025-02-24T05:53:18.969733Z"
    },
    "papermill": {
     "duration": 0.010246,
     "end_time": "2025-02-24T05:53:18.971856",
     "exception": false,
     "start_time": "2025-02-24T05:53:18.961610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "52665b59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:53:18.980403Z",
     "iopub.status.busy": "2025-02-24T05:53:18.980162Z",
     "iopub.status.idle": "2025-02-24T06:07:13.715268Z",
     "shell.execute_reply": "2025-02-24T06:07:13.714240Z"
    },
    "papermill": {
     "duration": 834.741984,
     "end_time": "2025-02-24T06:07:13.717543",
     "exception": false,
     "start_time": "2025-02-24T05:53:18.975559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1500/1500 [13:54<00:00,  1.80it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1500)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 2*loss_res + 3*loss_ic + 2*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5b8b335f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T06:07:13.854657Z",
     "iopub.status.busy": "2025-02-24T06:07:13.854285Z",
     "iopub.status.idle": "2025-02-24T06:07:13.871479Z",
     "shell.execute_reply": "2025-02-24T06:07:13.870564Z"
    },
    "papermill": {
     "duration": 0.087441,
     "end_time": "2025-02-24T06:07:13.873212",
     "exception": false,
     "start_time": "2025-02-24T06:07:13.785771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.012238, Loss_IC: 0.134631, loss_bc: 0.076054\n",
      "Train Loss: 0.222923\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8d5f705",
   "metadata": {
    "papermill": {
     "duration": 0.068481,
     "end_time": "2025-02-24T06:07:14.010276",
     "exception": false,
     "start_time": "2025-02-24T06:07:13.941795",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7a28fa19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T06:07:14.151639Z",
     "iopub.status.busy": "2025-02-24T06:07:14.151271Z",
     "iopub.status.idle": "2025-02-24T06:07:14.184489Z",
     "shell.execute_reply": "2025-02-24T06:07:14.183552Z"
    },
    "papermill": {
     "duration": 0.106562,
     "end_time": "2025-02-24T06:07:14.186241",
     "exception": false,
     "start_time": "2025-02-24T06:07:14.079679",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/4090693566.py:4: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n"
     ]
    }
   ],
   "source": [
    "\n",
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# Load saved parameters\n",
    "model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# Move model to the correct device\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3436f72c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T06:07:14.327956Z",
     "iopub.status.busy": "2025-02-24T06:07:14.327574Z",
     "iopub.status.idle": "2025-02-24T06:40:30.392161Z",
     "shell.execute_reply": "2025-02-24T06:40:30.390721Z"
    },
    "papermill": {
     "duration": 1996.137819,
     "end_time": "2025-02-24T06:40:30.394030",
     "exception": false,
     "start_time": "2025-02-24T06:07:14.256211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 250/250 [33:16<00:00,  7.98s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(250)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 10* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 10*loss_res + 1*loss_ic + 3*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c93e948e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T06:40:30.556929Z",
     "iopub.status.busy": "2025-02-24T06:40:30.556163Z",
     "iopub.status.idle": "2025-02-24T06:40:30.573777Z",
     "shell.execute_reply": "2025-02-24T06:40:30.572851Z"
    },
    "papermill": {
     "duration": 0.098902,
     "end_time": "2025-02-24T06:40:30.575580",
     "exception": false,
     "start_time": "2025-02-24T06:40:30.476678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.011805, Loss_IC: 0.154677, loss_bc: 0.010256\n",
      "Train Loss: 0.176738\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bec4e8f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T06:40:30.733840Z",
     "iopub.status.busy": "2025-02-24T06:40:30.733484Z",
     "iopub.status.idle": "2025-02-24T06:40:30.747005Z",
     "shell.execute_reply": "2025-02-24T06:40:30.746135Z"
    },
    "papermill": {
     "duration": 0.094161,
     "end_time": "2025-02-24T06:40:30.748675",
     "exception": false,
     "start_time": "2025-02-24T06:40:30.654514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000103, Loss_IC: 0.041416, loss_bc: 0.000658\n",
      "Train Loss: 0.042177\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e4882c6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T06:40:30.916162Z",
     "iopub.status.busy": "2025-02-24T06:40:30.915831Z",
     "iopub.status.idle": "2025-02-24T06:40:31.175366Z",
     "shell.execute_reply": "2025-02-24T06:40:31.174500Z"
    },
    "papermill": {
     "duration": 0.348924,
     "end_time": "2025-02-24T06:40:31.177204",
     "exception": false,
     "start_time": "2025-02-24T06:40:30.828280",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA/IAAAIjCAYAAACgdyAGAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAC1iklEQVR4nOzdd3gUVdvH8d+mNxI6oUnovTcBpTcpigIi8kpRQYUIGEVFVERUBAHDI0hRKT7KIyCCoIhEBAug1KBUQemQ0AlJIFmSff8Yd5MlCSQhyWY33891zbU7Z87O3LNnid4z55wxWSwWiwAAAAAAgFNwc3QAAAAAAAAg80jkAQAAAABwIiTyAAAAAAA4ERJ5AAAAAACcCIk8AAAAAABOhEQeAAAAAAAnQiIPAAAAAIATIZEHAAAAAMCJkMgDAAAAAOBESOQBAIBTMZlMeuONNxwdRp45evSoTCaTFi5cmGP73Lhxo0wmkzZu3Jhj+8zPxwUAV0MiDwAuauHChTKZTNq+fbujQ8mUyMhI/d///Z/Kly8vb29vFS1aVB07dtSCBQuUlJTk6PCc3ocffpgriaB18fb2VqlSpdS2bVu98847OnfuXI4dK7+5cOGCxowZo+rVq8vHx0dFixZVly5d9M0339zRfhcvXqzw8PCcCdLBcvr3BgCwZ7JYLBZHBwEAyHkLFy7UkCFDtG3bNjVp0sTR4dzSxx9/rKefflqlSpXSY489pqpVq+rq1atav369vv32W7311lt65ZVXHB2mU6tTp46KFy+eY3dCN27cqHbt2mnkyJFq2rSpkpKSdO7cOW3evFmrV69WUFCQli5dqvbt2+fI8VK7fv26PDw85OHhkeP7vp2DBw+qQ4cOOnfunIYMGaImTZro8uXL+vzzzxUZGakXXnhB7733Xrb23aNHD+3Zs0dHjx61K7dYLEpISJCnp6fc3d1z4Cyk5ORkJSYmysvLS25uOX9fJ6PfW24fFwAKirz/LyAAAKn89ttvevrpp9WiRQutWbNGhQoVsm0bPXq0tm/frj179jgwQtzKvffeqz59+tiV7d69W507d1bv3r21b98+lS5d+o6PY00AfXx85OPjc8f7yw6z2aw+ffro0qVL+vnnn9W8eXPbtueee04DBgzQ1KlT1aRJE/Xr1y/HjmsymXL8nN3c3BzyPTrquADgargUCgAF3K5du3TfffcpMDBQAQEB6tChg3777Te7OmazWRMmTFDVqlXl4+OjYsWK6Z577lFERIStTlRUlIYMGaJy5crJ29tbpUuX1gMPPJDm7uLNJkyYIJPJpM8//9wuibdq0qSJBg8ebFuPi4vT888/b+uCX716dU2dOlU3dzAzmUwKDQ3VsmXLVKtWLfn6+qpFixb6888/JUlz585VlSpV5OPjo7Zt26aJs23btqpTp4527Nihli1bytfXVxUrVtScOXPSxHj27Fk98cQTKlWqlHx8fFS/fn0tWrTIro51nPPUqVM1b948Va5cWd7e3mratKm2bduWZp8HDhxQnz59VLRoUfn4+KhJkyZatWqVXR3r8IlNmzYpLCxMJUqUkL+/vx588EG7ru0hISHau3evfvrpJ1tX+LZt20rKXNtmVf369RUeHq7Lly9r5syZtvLBgwcrJCQkTf033nhDJpPJrszafp9//rlq164tb29vrV271rYt9Rh56+cPHz6swYMHq3DhwgoKCtKQIUMUHx9vt99r165p5MiRKl68uAoVKqT7779fp06dytS4++XLl2vPnj16+eWX7ZJ4SXJ3d9fcuXNVuHBhu/1YhyAsWbJEr7zyioKDg+Xv76/7779fJ06csNVr27atvv32Wx07dszWRtbvKr0x8oMHD1ZAQICOHz+uHj16KCAgQGXLltWsWbMkSX/++afat28vf39/VahQQYsXL7aL9+ax6tbfUnqL9bciSQsWLFD79u1VsmRJeXt7q1atWpo9e7bdvm/1e8tojPyyZcvUuHFj+fr6qnjx4vq///s/nTp1yq6O9ZxPnTqlXr16KSAgQCVKlNALL7zA8BsABQ535AGgANu7d6/uvfdeBQYG6sUXX5Snp6fmzp2rtm3b6qeffrIlK2+88YYmTZqkJ598Us2aNVNMTIy2b9+unTt3qlOnTpKk3r17a+/evXr22WcVEhKis2fPKiIiQsePH083eZOk+Ph4rV+/Xq1bt9Zdd91123gtFovuv/9+bdiwQU888YQaNGig77//XmPGjNGpU6f0/vvv29X/5ZdftGrVKo0YMUKSNGnSJPXo0UMvvviiPvzwQw0fPlyXLl3SlClT9Pjjj+vHH3+0+/ylS5fUrVs3Pfzww+rfv7+WLl2qZ555Rl5eXnr88cclGYlh27ZtdfjwYYWGhqpixYpatmyZBg8erMuXL2vUqFF2+1y8eLGuXr2qp556SiaTSVOmTNFDDz2kf/75R56enrZ2adWqlcqWLauXX35Z/v7+Wrp0qXr16qXly5frwQcftNvns88+qyJFimj8+PE6evSowsPDFRoaqiVLlkiSwsPD9eyzzyogIEDjxo2TJJUqVSrTbZsdffr00RNPPKF169bp7bffztY+fvzxRy1dulShoaEqXrx4hr8jq4cfflgVK1bUpEmTtHPnTn388ccqWbKkJk+ebKszePBgLV26VI899pjuvvtu/fTTT+revXum4lm9erUkaeDAgeluDwoK0gMPPKBFixbp8OHDqlKlim3b22+/LZPJpJdeeklnz55VeHi4OnbsqMjISPn6+mrcuHG6cuWKTp48afsdBwQE3DKepKQk3XfffWrdurWmTJmizz//XKGhofL399e4ceM0YMAAPfTQQ5ozZ44GDhyoFi1aqGLFiunuq3Xr1vrvf/9rV3bs2DG9+uqrKlmypK1s9uzZql27tu6//355eHho9erVGj58uJKTk23/zm71e0uPdRhQ06ZNNWnSJEVHR2vGjBnatGmTdu3apcKFC9udc5cuXdS8eXNNnTpVP/zwg6ZNm6bKlSvrmWeeueX3BQAuxQIAcEkLFiywSLJs27Ytwzq9evWyeHl5Wf7++29b2enTpy2FChWytG7d2lZWv359S/fu3TPcz6VLlyySLO+9916WYty9e7dFkmXUqFGZqr9y5UqLJMtbb71lV96nTx+LyWSyHD582FYmyeLt7W05cuSIrWzu3LkWSZbg4GBLTEyMrXzs2LEWSXZ127RpY5FkmTZtmq0sISHB0qBBA0vJkiUtiYmJFovFYgkPD7dIsnz22We2eomJiZYWLVpYAgICbMc5cuSIRZKlWLFilosXL9rqfv311xZJltWrV9vKOnToYKlbt67l+vXrtrLk5GRLy5YtLVWrVrWVWdu4Y8eOluTkZFv5c889Z3F3d7dcvnzZVla7dm1LmzZt0nynt2vbjGzYsMEiybJs2bIM69SvX99SpEgR2/qgQYMsFSpUSFNv/Pjxlpv/l0SSxc3NzbJ379409SVZxo8fn+bzjz/+uF29Bx980FKsWDHb+o4dOyySLKNHj7arN3jw4DT7TE+DBg0sQUFBt6wzffp0iyTLqlWrLBZLyvdUtmxZu9/c0qVLLZIsM2bMsJV179493e/H+ttZsGCBrWzQoEEWSZZ33nnHVnbp0iWLr6+vxWQyWb744gtb+YEDB9KcnzWuDRs2pHse165dszRu3NhSpkwZy5kzZ2zl8fHxaep26dLFUqlSJbuyjH5vNx83MTHRUrJkSUudOnUs165ds9X75ptvLJIsr7/+eppzfvPNN+322bBhQ0vjxo3TPQ8AcFV0rQeAAiopKUnr1q1Tr169VKlSJVt56dKl9eijj+rXX39VTEyMJKlw4cLau3evDh06lO6+fH195eXlpY0bN+rSpUuZjsG6//S61KdnzZo1cnd318iRI+3Kn3/+eVksFn333Xd25R06dLC7i2vtYdC7d2+7Y1rL//nnH7vPe3h46KmnnrKte3l56amnntLZs2e1Y8cOW0zBwcHq37+/rZ6np6dGjhyp2NhY/fTTT3b77Nevn4oUKWJbv/fee+2OffHiRf344496+OGHdfXqVZ0/f17nz5/XhQsX1KVLFx06dChNl+Nhw4bZdU2/9957lZSUpGPHjqX5Dm92u7a9EwEBAbp69Wq2P9+mTRvVqlUr0/Wffvppu/V7771XFy5csP3OrF3zhw8fblfv2WefzdT+r169etvfqnW79ZhWAwcOtPtsnz59VLp0aa1ZsyZTx87Ik08+aXtfuHBhVa9eXf7+/nr44Ydt5dWrV1fhwoXT/L5vZfjw4frzzz+1fPlyBQcH28p9fX1t769cuaLz58+rTZs2+ueff3TlypUsx799+3adPXtWw4cPtxs73717d9WoUUPffvttms+k185ZOTcAcAUk8gBQQJ07d07x8fGqXr16mm01a9ZUcnKybQzvm2++qcuXL6tatWqqW7euxowZoz/++MNW39vbW5MnT9Z3332nUqVK2br6RkVF3TKGwMBAScp0snfs2DGVKVMmTTJVs2ZN2/bUbu6uHxQUJEkqX758uuU3X4QoU6aM/P397cqqVasmSbYx9ceOHVPVqlXTzMCd2ZisSb312IcPH5bFYtFrr72mEiVK2C3jx4+XZIzJz8o+b+V2bXsnYmNjM32RJj0ZdQPPyO2+h2PHjsnNzS3NflN3gb+VQoUK3fa3at1+83lXrVrVbt1kMqlKlSq3nUPiVnx8fFSiRAm7sqCgIJUrVy7NnANBQUGZvsg2d+5cLViwQB988IHuvvtuu22bNm1Sx44d5e/vr8KFC6tEiRK2J0pkJ5G3/vtI7+9QjRo10vz7Se+cixQpkqULiADgCkjkAQC31bp1a/3999+aP3++6tSpo48//liNGjXSxx9/bKszevRo/fXXX5o0aZJ8fHz02muvqWbNmtq1a1eG+61SpYo8PDxsE9DltIwe1ZVRuSUPnsh6u2MnJydLkl544QVFRESku9yceN7J+WSmbbPDbDbrr7/+sov15uTSKqOJylLf/c2M3G7XmjVr6sqVKzp+/HiGdawXQbLSkyC7cuP3vXXrVo0aNUpPPvmkhg0bZrft77//VocOHXT+/HlNnz5d3377rSIiIvTcc89JSvnt5qacevweADg7EnkAKKBKlCghPz8/HTx4MM22AwcOyM3Nze7OddGiRTVkyBD973//04kTJ1SvXr00s3xXrlxZzz//vNatW6c9e/YoMTFR06ZNyzAGPz8/tW/fXj///LPdDN4ZqVChgk6fPp3mruiBAwds23PS6dOnFRcXZ1f2119/SZKty36FChV06NChNElMdmOyDnPw9PRUx44d012yc5c7oyRaylzbZtWXX36pa9euqUuXLrayIkWK6PLly2nqZmYIQE6oUKGCkpOTdeTIEbvyw4cPZ+rzPXr0kCR9+umn6W6PiYnR119/rRo1aqS52HLz0AWLxaLDhw/bDf24VRvlhXPnzqlPnz5q0KCBbfb71FavXq2EhAStWrVKTz31lLp166aOHTume8Els+di/feR3t+hgwcP5vi/aQBwFSTyAFBAubu7q3Pnzvr666/tuvdGR0dr8eLFuueee2xd3y9cuGD32YCAAFWpUkUJCQmSjNnnr1+/blencuXKKlSokK1ORsaPHy+LxaLHHntMsbGxabbv2LHD9ii3bt26KSkpye6RZpL0/vvvy2Qy6b777svcyWfSjRs3NHfuXNt6YmKi5s6dqxIlSqhx48a2mKKiomwzxFs/98EHHyggIEBt2rTJ0jFLliyptm3bau7cuTpz5kya7akfK5cV/v7+6SbRt2vb7Ni9e7dGjx6tIkWK2GYyl4zfxJUrV+y67p85c0YrVqzI9rGywnpR4cMPP7Qr/+CDDzL1+T59+qhWrVp69913tX37drttycnJeuaZZ3Tp0iXbEIjUPv30U7sLUF9++aXOnDlj95v19/fPVvf0nJCUlKRHHnlEiYmJWr58uby8vNLUsd4NT31n/8qVK1qwYEGauhn93m7WpEkTlSxZUnPmzLH7zX333Xfav39/pp8oAAAFDY+fAwAXN3/+fNskX6mNGjVKb731liIiInTPPfdo+PDh8vDw0Ny5c5WQkKApU6bY6taqVUtt27ZV48aNVbRoUW3fvl1ffvmlQkNDJRl3qTt06KCHH35YtWrVkoeHh1asWKHo6Gg98sgjt4yvZcuWmjVrloYPH64aNWroscceU9WqVXX16lVt3LhRq1at0ltvvSVJ6tmzp9q1a6dx48bp6NGjql+/vtatW6evv/5ao0ePVuXKlXPwmzPGyE+ePFlHjx5VtWrVtGTJEkVGRmrevHm2R8UNGzZMc+fO1eDBg7Vjxw6FhIToyy+/1KZNmxQeHp6tu+ezZs3SPffco7p162ro0KGqVKmSoqOjtWXLFp08eVK7d+/O8j4bN26s2bNn66233lKVKlVUsmRJtW/f/rZtezu//PKLrl+/rqSkJF24cEGbNm3SqlWrFBQUpBUrVthNlPbII4/opZde0oMPPqiRI0cqPj5es2fPVrVq1bRz584sn1NWNW7cWL1791Z4eLguXLhge/yctZfF7e4ie3l56csvv1SHDh10zz33aMiQIWrSpIkuX76sxYsXa+fOnXr++efT/c0XLVrU9pno6GiFh4erSpUqGjp0qF18S5YsUVhYmJo2baqAgAD17NkzZ7+EDMyZM0c//vijnn76aW3YsMFuW6lSpdSpUyd17txZXl5e6tmzp5566inFxsbqo48+UsmSJdNcdMro93YzT09PTZ48WUOGDFGbNm3Uv39/2+PnQkJCbN32AQA3cdR0+QCA3GV9NFlGy4kTJywWi8Wyc+dOS5cuXSwBAQEWPz8/S7t27SybN2+229dbb71ladasmaVw4cIWX19fS40aNSxvv/227RFs58+ft4wYMcJSo0YNi7+/vyUoKMjSvHlzy9KlSzMd744dOyyPPvqopUyZMhZPT09LkSJFLB06dLAsWrTIkpSUZKt39epVy3PPPWerV7VqVct7771n9/g1i8V4RNmIESPsyqyP8br5MXnpPUqtTZs2ltq1a1u2b99uadGihcXHx8dSoUIFy8yZM9PEHh0dbRkyZIilePHiFi8vL0vdunXtHhV2q2NbY7350Wd///23ZeDAgZbg4GCLp6enpWzZspYePXpYvvzyS1udjB4xmN6jxaKioizdu3e3FCpUyCLJ9miw27Vt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95327NmjadOmaffu3frvf/+bg1Henq+vr0qWLHnbesHBwfL29s6DiFwHibwLiY2VNm+Wxo+XoqIcHQ0AAACcicViUVxinEMWi8WSpVi9vb0VHBys4OBgNWjQQC+//LJOnDihc+fO2er8+eefat++vXx9fVWsWDE99dRTio2NtW1v27atRo8ebbffXr16afDgwbb1kJAQvfPOO3r88cdVqFAh3XXXXZo3b57dZ7Zu3aqGDRvKx8dHTZo00a5du+y2JyUl6YknnlDFihXl6+ur6tWra8aMGXZ1Bg8erF69euntt99WmTJlVL16db355puqU6dOmnNv0KCBXnvttXS/l61bt+qdd97RtGnT9N5776lly5YKCQlRp06dtHz5cg0aNMhWd/bs2apcubK8vLxUvXr1NEm+yWTSxx9/rAcffFB+fn6qWrWqVq1aZVdnzZo1qlatmnx9fdWuXTsdPXrUbnvqu+ALFy7UhAkTtHv3bltvioULF9qOlbpr/c1tN2zYMLu2s35fU6dOVenSpVWsWDGFhobKbDan+71kxvHjx/XAAw8oICBAgYGBevjhhxUdHW3bvnv3brVr106FChVSYGCgGjdurO3bt0uSjh07pp49e6pIkSLy9/dX7dq1tWbNmmzHkhk8R96JmUz2f/AuXZKefFLav1/63/+kVL1YAAAAgFuKN8crYFKAQ44dOzZW/l7+2ftsbKw+++wzValSRcWKFZMkxcXFqUuXLmrRooW2bdums2fP6sknn1RcXJw+++yzLO1/2rRpmjhxol555RV9+eWXeuaZZ9SmTRtVr15dsbGx6tGjhzp16qTPPvtMR44c0ahRo+w+n5ycrHLlymnZsmUqVqyYNm/erGHDhql06dJ6+OGHbfXWr1+vwMBARURESJKCgoI0YcIEbdu2TU2bNpUk7dq1S3/88Ye++uqrdGP9/PPPFRAQoOHDh6e73ZpUr1ixQqNGjVJ4eLg6duyob775RkOGDFG5cuXUrl07W/0JEyZoypQpeu+99/TBBx9owIABOnbsmIoWLaoTJ07ooYce0ogRIzRs2DBt375dzz//fIbfY79+/bRnzx6tXbtWP/zwg+0cb5ZR24WGhtoSf0nasGGDSpcurQ0bNujw4cPq16+fqlevrmeffTbDGDKSnJxsS+J/+ukn3bhxQyNGjFC/fv20ceNGSdKAAQPUsGFDzZ49W+7u7oqMjJSnp6ckacSIEUpMTNTPP/8sf39/7du3TwEBuftviUTeid3ctf7ECSOJl6RDh6TkZMmNPhcAAABwMd98840tUYqLi1Pp0qX1zTffyO3f//ldvHixrl+/rk8//VT+/sYFgv/85z964IEHNG3aNJUuXTrTx+rWrZstMX7ppZf0/vvva8OGDapevboWL16s5ORkffLJJ/Lx8VHt2rV18uRJPfPMM7bPe3p6asKECbb1ihUrasuWLVq6dKldIu/v76+PP/5YXl5etrIuXbpowYIFtkR+wYIFatOmjSpVqpRurIcOHVKlSpVsCWZGpk6dqsGDB9vOKywsTL/99pumTp1ql8gPHjxY/fv3lyS98847+s9//qOtW7eqa9eutjv606ZNkyRVr15df/75pyZPnpzuMX19fRUQECAPDw8FBwdnGFt6bTdz5kz17NlTkydPVqlSpSRJRYoU0cyZM+Xu7q4aNWqoW7du+umnn7KVyK9fv15//vmnjhw5ovLly0uSPv30U9WuXdt2IeX48eMaM2aMatSoIUmqWrWq7fPHjx9X7969VbduXUnKsH1yEom8E7s5kbcm8Vbx8VIuXwgCAACAi/Dz9FPs2NjbV8ylY2dFu3btNHv2bEnSpUuX9OGHH+q+++7T1q1bVaFCBe3fv1/169e3JYKS1KpVKyUnJ+vgwYNZSuTr1atne28ymRQcHKyzZ89Kkvbv36969erJx8fHVqdFixZp9jFr1izNnz9fx48f17Vr15SYmJhm0re6devaJfGSNHToUD3++OOaPn263NzctHjxYr3//vsZxprZIQr79+/XsGHD7MpatWqVpst/6nP39/dXYGCg3bk3b97crn56555Vt2s7ayJfu3Ztubu72+qULl06208K2L9/v8qXL29L4iWpVq1aKly4sPbv36+mTZsqLCxMTz75pP773/+qY8eO6tu3rypXrixJGjlypJ555hmtW7dOHTt2VO/eve2+u9zA/VoXFhfn6AgAAADgLEwmk/y9/B2ymG6+Q3Ub/v7+qlKliqpUqaKmTZvq448/VlxcnD766KNM78PNzS1N4pveGOub726bTCYlJydn+jhffPGFXnjhBT3xxBNat26dIiMjNWTIkDQT2qVOXK169uwpb29vrVixQqtXr5bZbFafPn0yPFa1atX0zz//3NFY8dTu9NxzU17H9sYbb2jv3r3q3r27fvzxR9WqVUsrVqyQJD355JP6559/9Nhjj+nPP/9UkyZN9MEHH+RaLBKJvFO73d+7WMdcUAUAAADylMlkkpubm65duyZJqlmzpnbv3q24VHe2Nm3aJDc3N1WvXl2SVKJECZ05c8a2PSkpSXv27MnScWvWrKk//vhD11M9Puq3336zq7Np0ya1bNlSw4cPV8OGDVWlShX9/fffmdq/h4eHBg0apAULFmjBggV65JFH5Ovrm2H9Rx99VLGxsfrwww/T3W59vnvNmjW1adOmNHHWqlUrU3FZ97F161a7spvP/WZeXl5KSkq67X5v13Y5rWbNmjpx4oROnDhhK9u3b58uX75s951Uq1ZNzz33nNatW6eHHnpICxYssG0rX768nn76aX311Vd6/vnns3RRKTtI5J3Y7RL5X37JmzgAAACAvJSQkKCoqChFRUVp//79evbZZxUbG6uePXtKMiYm8/Hx0aBBg7Rnzx5t2LBBo0aNUr9+/Wxds9u3b69vv/1W3377rQ4cOKBnnnnGluhm1qOPPiqTyaShQ4dq3759WrNmjaZOnWpXp2rVqtq+fbu+//57/fXXX3rttde0bdu2TB/jySef1I8//qi1a9fq8ccfv2Xd5s2b68UXX9Tzzz+vF198UVu2bNGxY8e0fv169e3bV4sWLZIkjRkzRgsXLtTs2bN16NAhTZ8+XV999ZVeeOGFTMf19NNP69ChQxozZowOHjyoxYsX201Gl56QkBAdOXJEkZGROn/+vBISEtLUSa/tnn32WT322GO2tsuupKQkRUZG2i379+9Xx44dVbduXQ0YMEA7d+7U1q1bNXDgQLVp00ZNmjTRtWvXFBoaqo0bN+rYsWPatGmTtm3bppo1a0qSRo8ere+//15HjhzRzp07tWHDBtu23EIi78K++cbREQAAAAA5b+3atSpdurRKly6t5s2ba9u2bVq2bJnatm0rSfLz89P333+vixcvqmnTpurTp4/at2+vKVOm2Pbx+OOPa9CgQbaErVKlSnYTvWVGQECAVq9erT///FMNGzbUuHHj0kz29tRTT+mhhx5Sv3791Lx5c124cCHDWeXTU7VqVbVs2VI1atRIMyY9PZMnT9bixYv1+++/q0uXLqpdu7bCwsJUr1492+PnevXqpRkzZmjq1KmqXbu25s6dqwULFti+v8y46667tHz5cq1cuVL169fXnDlz9M4779zyM71791bXrl3Vrl07lShRQv/73//S1Emv7Tp06KCZM2dmOraMxMbGqmHDhnZLz549ZTKZ9PXXX6tIkSJq3bq1OnbsqEqVKmnJkiWSJHd3d124cEEDBw5UtWrV9PDDD+u+++6zTWKYlJSkESNGqGbNmuratauqVauWYa+InGKyZPWhjQVATEyMgoKCdOXKFQUGBjo6nAwNH56k2bPd05S/8470yivG+z17pNq18zgw5Aiz2aw1a9aoW7dut515FM6H9nVttK/rom1dW0Fr3+vXr+vIkSOqWLGi3WRtrio5OVkxMTEKDAy0zW7vDCwWi6pWrarhw4crLCzM0eHkW87Svrf6d5eVPDT/niFuK6Ou9fffL/37iEjVqSNt3pxnIQEAAADIIefOndPMmTMVFRWlIUOGODoc5CM8fs6JZZTIly4tNW4srV9vrH/+ufGakCBlsbcQAAAAAAcpWbKkihcvrnnz5qlIkSKODgf5CIm8CwoKkt54IyWR//BDY5GkLVuku+92WGgAAAAAMolR0MgIXeudWEZ35N3dpXvukb77Lu22pUuldeukQ4ek06el116Tzp/P3TgBAAAAADmHO/JO7HaPn2vQIG3Z++8bS+XKkq+vMRnesWPSp5/mSogAAAAAgBzGHXkXFhxsv5568sa//zaSeEn673/zLiYAAAAAwJ0hkXdiqe/IjxollS0rffWVfZ3PPjPqPfSQ1L59xvuKj8+dGAEAAAAAOYtE3omlTuTbtZNOnpQefNC+zoABRvn//meMj586VerePe2+tm7N3VgBAAAAADmDRN5FeHpmvK1MGcnLSypSRHr+eWO52aZNuRcbAAAAACDnkMg7sdR35L28Mv+59J4l//33dx4PAAAAkB+ZTCatXLnylnUGDx6sXr16ZXqfR48elclkUmRk5B3FlptCQkIUHh5uW8+N7wGOQSLvxFIn8re6I5+e+fOlxo2lxYuNdbrWAwAAwBlkJ9E8c+aM7rvvPkkZJ+AzZszQwoULcybIVA4fPqwhQ4aoXLly8vb2VsWKFdW/f39t3749x491O478Hm6WmYsKyBiJvBO7k0R+yBBp+3apSxdjPSFBMptzLjYAAAAgvwgODpa3t/ct6wQFBalw4cI5etzt27ercePG+uuvvzR37lzt27dPK1asUI0aNfR8euNdc5mjvgfkPBJ5F5GVrvWpFSqU8v7q1ZyJBQAAAM7HYpHi4hyzWCzZj7tt27YaOXKkXnzxRRUtWlTBwcF644037OqkvvtbuXJlSVLDhg1lMpnUtm1bSWnv9K9du1b33HOPChcurGLFiqlHjx76+++/s/B9WjR48GBVrVpVv/zyi7p3767KlSurQYMGGj9+vL7++mtb3T///FPt27eXr6+vihUrpmHDhik2Nta23Rrb1KlTVbp0aRUrVkwjRoyQOdWduLNnz6pnz57y9fVVxYoV9fnnn6eJKfX3ULFixUx9DwkJCRo5cqRKliwpHx8f3XPPPdq2bZtt+8aNG2UymbR+/Xo1adJEfn5+atmypQ4ePJjp7+pmycnJevPNN229GBo0aKC1a9faticmJio0NFSlS5eWj4+PKlSooHfffdf2vb/xxhu666675O3trTJlymjkyJHZjiW/IpF3YklJKe99fbO3j9R38l9++c7iAQAAgPOKj5cCAhyz3OmjkBctWiR/f3/9/vvvmjJlit58801FRESkW/e3336TJP3www86c+aMvrr5+c3/iouLU1hYmLZv367169fLzc1NDz74oJKTkzMVU2RkpPbu3avnn39ebm5p0y7rXe+4uDh16dJFRYoU0bZt27Rs2TL98MMPCg0Ntau/YcMG/f3339qwYYMWLVqkhQsX2nWBHzx4sE6cOKENGzboyy+/1IcffqizZ89mGN/Wf8fW3u57ePHFF7V8+XItWrRIO3fuVJUqVdSlSxddvHjRrt64ceM0bdo0bd++XR4eHnr88ccz8zWla8aMGZo2bZqmTp2qP/74Q126dNH999+vQ4cOSZL+85//aNWqVVq6dKkOHjyozz//XBUqVJAkLV++XO+//77mzp2rQ4cOaeXKlapbt262Y8mvPBwdALLvxImUvvU1atz5/j76SJo37873AwAAAOSlevXqafz48ZKkqlWraubMmVq/fr06deqUpm6JEiUkScWKFVNwcHCG++zdu7fd+vz581WiRAnt27dPderUuW1M1qSzxm3+R33x4sW6fv26Pv30U/n7+0uSZs6cqZ49e2ry5MkqVaqUJKlIkSKaOXOm3N3dVaNGDXXv3l3r16/X0KFD9ddff+m7777T1q1b1bRpU0nSJ598opo1a2Z43Mx8D3FxcZo9e7YWLlxoG1v/0UcfKSIiQp988onG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crK0YYMUEmJsa9dOKlZMevBB6do1h4YJAAAAwAlla9b6nTt36v3335ckffnllypVqpR27dql5cuX6/XXX9czzzyTqf0kJiZqx44dGjt2rK3Mzc1NHTt21JYtW9L9zJYtWxQWFmZX1qVLF61cudK23rJlS61atUqPP/64ypQpo40bN+qvv/6yxXyzhIQEJSQk2NZjYmIkGbPzm/PxA8KtseXnGAuy4GBjuXFDatVK6t3bTdOmuUuSLl6UVq6UypSxqGxZac2aGypd2v7ztK9ro31dG+3rumhb10b7ujba17W5QvtmJfZsJfLx8fEqVKiQJGndunV66KGH5ObmprvvvlvHjh3L9H7Onz+vpKQklSpVyq68VKlSOpDeQGNJUVFR6daPioqyrX/wwQcaNmyYypUrJw8PD7m5uemjjz5S69at093npEmTNGHChDTl69atk9+tnkeWT0Rk1I8b+UqTJu66994GMpksCggwa82aSrp82aTLl6VGjW7ok0/Wpfs52te10b6ujfZ1XbSta6N9XRvt69qcuX3j4+MzXTdbiXyVKlW0cuVKPfjgg/r+++/13HPPSZLOnj2rwMDA7OwyR33wwQf67bfftGrVKlWoUEE///yzRowYoTJlyqhjx45p6o8dO9buLn9MTIzKly+vzp0754vzyYjZbFZERIQ6deokz5uff4Z8qXfvlPdHjpjVr5+HIiNNunDBV//3f/fr5MkbtmfZ076ujfZ1bbSv66JtXRvt69poX9fmCu1r7RmeGdlK5F9//XU9+uijeu6559S+fXu1aNFCknEHu2HDhpneT/HixeXu7q7o6Gi78ujoaAUHB6f7meDg4FvWv3btml555RWtWLFC3bt3lyTVq1dPkZGRmjp1arqJvLe3t7y9vdOUe3p6OsWPwFnihL1q1aSdO6UmTYzX2FiTqlf31Pbt0tWrUpMmHipcuIMmTPDSE094yGRydMTIDfz7dW20r+uibV0b7evaaF/X5sztm5W4szXZXZ8+fXT8+HFt375d33//va28Q4cOGY5DT4+Xl5caN26s9evX28qSk5O1fv1628WBm7Vo0cKuvmR0n7DWt45rd3OzPzV3d3clJydnOjYgL5hMxkz2VtHRUvnyUq1aUny8SadPB2joUA/17Stdv+64OAEAAADkH9m6Iy8Zd8aDg4N18uRJSVK5cuXUzPpQ7SwICwvToEGD1KRJEzVr1kzh4eGKi4vTkCFDJEkDBw5U2bJlNWnSJEnSqFGj1KZNG02bNk3du3fXF198oe3bt2vevHmSpMDAQLVp00ZjxoyRr6+vKlSooJ9++kmffvqppk+fnt3TBXKNr69ksRgz3HftKqWa7kGenkkym921fLm0fLlUoYJ08KCUTgcSAAAAAAVEtu7IJycn680331RQUJAqVKigChUqqHDhwpo4cWKW73r369dPU6dO1euvv64GDRooMjJSa9eutU1od/z4cZ05c8ZWv2XLllq8eLHmzZun+vXr68svv9TKlStVp04dW50vvvhCTZs21YABA1SrVi29++67evvtt/X0009n53SBPFG/vvT111KZMsb6gAHJ+uKLbzR1apKtzrFj0lNPGTPhnz9vXAAAAAAAULBk6478uHHj9Mknn+jdd99Vq1atJEm//vqr3njjDV2/fl1vv/12lvYXGhqq0NDQdLdt3LgxTVnfvn3Vt2/fDPcXHBysBQsWZCkGID9o1kw6dcp4bzYnac0a6dlnk1W9uruef1766y9p0SJjkaS+faXataU33jDu7O/fLxUvLvn7O+wUAAAAAOSybN2RX7RokT7++GM988wzqlevnurVq6fhw4fro48+0sKFC3M4RKBgM5mkHj2kAwekm6egWLbMSOIl6do1KSRECgiQXnstr6MEAAAAkFeylchfvHhRNWrUSFNeo0YNXbx48Y6DApCWySSNHi19883t6771lsTcjgAAAIBrylYiX79+fc2cOTNN+cyZM1WvXr07DgpAxrp3l2JipDNnpF27jDvxFou0bp3Upk1KvRUrHBcjAAAAgNyTrTHyU6ZMUffu3fXDDz/YHvu2ZcsWnThxQmvWrMnRAAGkVaiQsQQHp5R16mQs1ufN9+ljzILfs6fk5SX99ps0dapUuLBDQgYAAACQQ7J1R75Nmzb666+/9OCDD+ry5cu6fPmyHnroIe3du1f//e9/czpGAFnw6KMp79eulUaMkIYOlT75RCpSRDp9OmX7oUPG7PcAAAAAnEe2nyNfpkyZNLPT7969W5988ontme4A8t7cuVKlStKlS9KsWWm3ly0rlSol3XWXtG2bVK+eFBmZcicfAAAAQP6WrTvyAPKvgABp4kRp5kwpNlbau1f6v/8zlqJFjTrR0UYSL0l//CG5uUmlS0vPPGM84g4A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98XYdm+Mb/fG+HZv3SG+nvzTk4+eDhN5P2w2GwAgLS2tk1tCRERERERE5xObzYbIyMjT1pFEW9L984yqqigqKkJ4eDgkSers5rTIarUiLS0Nx44dQ0RERGc3h9oZ49u9Mb7dG+PbfTG23Rvj270xvt1bd4ivEAI2mw0pKSmQ5dPfBc8z8n7IsozU1NTObkabRUREBOzGSq1jfLs3xrd7Y3y7L8a2e2N8uzfGt3sL9Pi2dibegw+7IyIiIiIiIgogTOSJiIiIiIiIAggT+QBmNpuxYMECmM3mzm4KnQOMb/fG+HZvjG/3xdh2b4xv98b4dm/nW3z5sDsiIiIiIiKiAMIz8kREREREREQBhIk8ERERERERUQBhIk9EREREREQUQJjIExEREREREQUQJvIB7JVXXkFGRgaCgoIwZswYbNq0qbObRK147LHHIEmST9e/f399eH19PWbPno3Y2FiEhYXhv/7rv1BaWuozjaNHj+KKK65ASEgIEhIScN9998HlcnX0ohCAH374AVdddRVSUlIgSRK++OILn+FCCDz66KNITk5GcHAwcnNzsW/fPp86lZWVuOmmmxAREYGoqCjcfvvtqK6u9qlTUFCAiy++GEFBQUhLS8MzzzxzrheN0Hp8b7nllmb782WXXeZTh/HtmhYuXIhRo0YhPDwcCQkJmDp1KgoLC33qtNfvcV5eHkaMGAGz2Yw+ffpgyZIl53rxznttie8ll1zSbP+98847feowvl3Ta6+9hqFDhyIiIgIRERHIycnBN998ow/nvhu4Wost99smBAWkpUuXCpPJJN5++22xa9cuMXPmTBEVFSVKS0s7u2l0GgsWLBCDBg0SxcXFenfy5El9+J133inS0tLEqlWrxJYtW8SFF14oxo4dqw93uVxi8ODBIjc3V+Tn54vly5eLuLg48dBDD3XG4pz3li9fLv77v/9bfP755wKAWLZsmc/wp59+WkRGRoovvvhCbN++XVx99dUiMzNT1NXV6XUuu+wyMWzYMLFhwwbx448/ij59+ogbbrhBH15VVSUSExPFTTfdJHbu3Ck++ugjERwcLN54442OWszzVmvxnTFjhrjssst89ufKykqfOoxv1zR58mTxzjvviJ07d4pt27aJyy+/XKSnp4vq6mq9Tnv8Hh88eFCEhISIefPmid27d4uXXnpJKIoiVqxY0aHLe75p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FU6ns6MXhYQQa9asEQCadTNmzBBCaK+ge+SRR0RiYqIwm81i4sSJorCw0GcaFRUV4oYbbhBhYWEiIiJC3HrrrcJms/nU2b59u7jooouE2WwWPXr0EE8//XRHLeJ57XTxra2tFZMmTRLx8fHCaDSKnj17ipkzZzY7mMr4dk3+4gpAvPPOO3qd9vo9XrNmjRg+fLgwmUyiV69ePvOgc6O1+B49elSMHz9exMTECLPZLPr06SPuu+8+n/dRC8H4dlW33Xab6NmzpzCZTCI+Pl5MnDhRT+KF4L4byE4XW+63zUlCCNFx5/+JiIiIiIiI6LfgPfJEREREREREAYSJPBEREREREVEAYSJPREREREREFECYyBMREREREREFECbyRERERERERAGEiTwRERERERFRAGEiT0RERERERBRAmMgTERERERERBRAm8kRERNThMjIy8MILL3R2M4iIiAISE3kiIqJu7pZbbsHUqVMBAJdccgnmzp3bYfNesmQJoqKimpVv3rwZd9xxR4e1g4iIqDsxdHYDiIiIKPA4HA6YTKazHj8+Pr4dW0NERHR+4Rl5IiKi88Qtt9yCtWvXYvHixZAkCZIk4fDhwwCAnTt3YsqUKQgLC0NiYiKmT5+O8vJyfdxLLrkEc+bMwdy5cxEXF4fJkycDAJ5//nkMGTIEoaGhSEtLw1133YXq6moAQF5eHm699VZUVVXp83vssccANL+0/ujRo7jmmmsQFhaGiIgIXHfddSgtLdWHP/bYYxg+fDjef/99ZGRkIDIyEtdffz1sNtu5XWlERERdEBN5IiKi88TixYuRk5ODmTNnori4GMXFxUhLS4PFYsHvf/97XHDBBdiyZQtWrFiB0tJSXHfddT7jv/vuuzCZTPj555/x+uuvAwBkWcaLL76IXbt24d1338Xq1atx//33AwDGjh2LF154AREREfr85s+f36xdqqrimmuuQWVlJdauXYuVK1fi4MGDmDZtmk+9AwcO4IsvvsBXX32Fr776CmvXrsXTTz99jtYWERFR18VL64mIiM4TkZGRMJlMCAkJQVJSkl7+8ssv44ILLsBTTz2ll7399ttIS0vD3r170bdvXwBAVlYWnnnmGZ9pet9vn5GRgX/84x+488478eqrr8JkMiEyMhKSJPnMr6lVq1Zhx44dOHToENLS0gAA7733HgYNGoTNmzdj1KhRALSEf8mSJQgPDwcATJ8+HatWrcKTTz7521YMERFRgOEZeSIiovPc9u3bsWbNGoSFheld//79AWhnwT2ys7Objfv9999j4sSJ6NGjB8LDwzF9+nRUVFSgtra2zfPfs2cP0tLS9CQeAAYOHIioqCjs2bNHL8vIyNCTeABITk5GWVnZGS0rERFRd8Az8kREROe56upqXHXVVVi0aFGzYcnJyXp/aGioz7DDhw/jyiuvxKxZs/Dkk08iJiYGP/30E26//XY4HA6EhIS0azuNRqPPd0mSoKpqu86DiIgoEDCRJyIiOo+YTCa43W6fshEjRuBf//oXMjIyYDC0/U+DrVu3QlVVPPfcc5Bl7SK/Tz75pNX5NTVgwAAcO3YMx44d08/K7969GxaLBQMHDmxze4iIiM4XvLSeiIjoPJKRkYGNGzfi8OHDKC8vh6qqmD17NiorK3HDDTdg8+bNOHDgAL799lvceuutp03C+/TpA6fTiZdeegkHDx7E+++/rz8Ez3t+1dXVWLVqFcrLy/1ecp+bm4shQ4bgpptuwi+//IJNmzbh5ptvxoQJEzBy5Mh2XwdERESBjok8ERHReWT+/PlQFAUDBw5EfHw8jh49ipSUFPz8889wu92YNGkShgwZgrlz5yIqKko/0+7PsGHD8Pzzz2PRokUYPHgwPvjgAyxcuNCnztixY3HnnXdi2rRpiI+Pb/awPEC7RP7LL79EdHQ0xo8fj9zcXPTq1Qsff/xxuy8/ERFRdyAJIURnN4KIiIiIiIiI2oZn5ImIiIiIiIgCCBN5IiIiIiIiogDCRJ6IiIiIiIgogDCRJyIiIiIiIgogTOSJiIiIiIiIAggTeSIiIiIiIqIAwkSeiIiIiIiIKIAwkSciIiIiIiIKIEzkiYiIiIiIiAIIE3kiIiIiIiKiAMJEnoiIiIiIiCiA/H9XER9ozmSaIAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3293ac87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T06:40:31.340061Z",
     "iopub.status.busy": "2025-02-24T06:40:31.339355Z",
     "iopub.status.idle": "2025-02-24T06:40:31.343250Z",
     "shell.execute_reply": "2025-02-24T06:40:31.342565Z"
    },
    "papermill": {
     "duration": 0.085453,
     "end_time": "2025-02-24T06:40:31.344857",
     "exception": false,
     "start_time": "2025-02-24T06:40:31.259404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b56e299e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T06:40:31.545475Z",
     "iopub.status.busy": "2025-02-24T06:40:31.544610Z",
     "iopub.status.idle": "2025-02-24T06:40:32.676143Z",
     "shell.execute_reply": "2025-02-24T06:40:32.675247Z"
    },
    "papermill": {
     "duration": 1.214151,
     "end_time": "2025-02-24T06:40:32.677963",
     "exception": false,
     "start_time": "2025-02-24T06:40:31.463812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAEiCAYAAADwEwVaAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAC8Y0lEQVR4nO29e7xeRXU+/sze5xIgJKCQcDGIgIIiSgWJgApqFCsitF8lQgsBq6KAF9KqpF4CXohaRWzlUqmCVZBbQVH4oRChiKAoiqXKRUkURBJNKQkNkJyzZ/3+mFkzay57v+97cs55T5K9Pp/3nL1n1syefXvWdWYrIiK01FJLLbW02VHR7wG01FJLLbXUH2oFQEsttdTSZkqtAGippZZa2kypFQAttdRSS5sptQKgpZZaamkzpVYAtNRSSy1tptQKgJZaaqmlzZRaAdBSSy21tJlSKwBaaqmlljZT2iwFwMUXXwylFH73u99N6T4lnXHGGVBKjXu/d955J4aGhvD73/9+3PvuB91www2YPn06/vznP/d7KC1tpKSUwhlnnNHvYUwK9V0AnHfeeVBKYe7cuf0eSld01lln4Vvf+la/hzFu9OEPfxjHHHMMnv3sZ/d7KD3Reeedh4svvjgpf/3rX4899tgDS5YsGfdj/vSnP8Wpp56KvffeG1tttRV22WUXHH300XjggQcS3kMPPRRKKSilUBQFZsyYgT333BPHHXccbrzxxq6PecIJJ2D69Om19UopnHrqqWM6n26p7lrXEZ937veud71r4gbaA11//fWbDcg30UC/B3DJJZdg1113xZ133onf/va32GOPPfo9pEY666yz8OY3vxlHHXVUUH7cccfhrW99K4aHh/szsDHQ3XffjZtuugm33357v4fSM5133nnYbrvtcMIJJyR1J510Ev7hH/4BZ555JrbeeutxO+ZnPvMZ/OhHP8Jb3vIWvOhFL8KKFSvwpS99CS95yUvw4x//GC984QsD/mc961lOEK1duxa//e1vcfXVV+Mb3/gGjj76aHzjG9/A4ODguI1voqjpWtfRa1/7Whx//PFJ+fOe97xxHNnY6frrr8e5556bFQJPPfUUBgb6Do2TQn09y+XLl+P222/H1VdfjZNOOgmXXHIJFi9e3M8hjZnKskRZlv0eRk900UUXYZdddsHLXvayfg9lXOn//b//h/e85z248sor8ba3vW3c+l24cCEuvfRSDA0NubL58+djn332wac//Wl84xvfCPhnzpyJv/3bvw3KPv3pT+O9730vzjvvPOy66674zGc+M27jm0r0vOc9Lzn3jYWmTZvW7yFMGvXVBXTJJZdg2223xeGHH443v/nNuOSSSxKe3/3ud1BK4XOf+xy+/OUvY/fdd8fw8DBe+tKX4qc//WnA+1//9V844YQTsNtuu2HatGnYYYcd8La3vQ3/8z//0ziOBQsWYLvttsPIyEhS97rXvQ577rknAGParl27Fl/72tecSctaUV0M4P/7//4/HHLIIdh6660xY8YMvPSlL8Wll17q6n/4wx/iLW95C3bZZRcMDw9jzpw5OO200/DUU091cwkT2nXXXbOa2qGHHopDDz00KPvWt76FV7/61UFs4Qc/+AGKosDHPvaxgPfSSy+FUgrnn39+T+NZtmwZlFL4whe+kNTdfvvtUErhm9/8Zk997rrrrvjVr36F//zP/3T3QZ7brFmz8KIXvQjf/va3e+q3Ex100EEB+APAc5/7XOy999649957u+qjLEv88z//M17wghfgS1/6ElavXj2uYwSAdevWYfHixdhjjz3cM/XBD34Q69atC/guuugivPrVr8asWbMwPDyMF7zgBcn97XStN5T4nd5iiy1wwAEH4Ic//GHyrNa9W7fccguUUrjllltcWTfv0wknnIBzzz0XQOiuYsrFAH7xi1/gL//yLzFjxgxMnz4dr3nNa/DjH/844OFx/uhHP8LChQux/fbbY6uttsJf/dVfTdmYVF8tgEsuuQR//dd/jaGhIRxzzDE4//zz8dOf/hQvfelLE95LL70UTzzxBE466SQopfDZz34Wf/3Xf41ly5Y5M/rGG2/EsmXLcOKJJ2KHHXbAr371K3z5y1/Gr371K/z4xz+uDaIed9xx+Pd//3d873vfwxvf+EZXvmLFCvzgBz9wVsnXv/51vP3tb8cBBxyAd77znQCA3Xffvfb8Lr74YrztbW/D3nvvjUWLFmGbbbbBL37xC9xwww049thjAQBXXnklnnzySbz73e/GM5/5TNx55534l3/5F/zhD3/AlVdeObYL2wU98sgjeOihh/CSl7wkKH/1q1+Nk08+GUuWLMFRRx2Fl7zkJXj00Ufxnve8B/PmzevZh7vbbrvh4IMPxiWXXILTTjstqLvkkkuw9dZb48gjj+ypz3POOQfvec97MH36dHz4wx8GAMyePTvg2W+//SYlVkNEWLlyJfbee++u25RliWOOOQYf/ehHcdttt+Hwww/v2GbVqlVd9a21xpve9CbcdttteOc734nnP//5uOeee/CFL3wBDzzwQHBNzj//fOy9995405vehIGBAXznO9/BySefDK01TjnlFADdXescPf3009kxz5gxwwnRr3zlKzjppJNw0EEH4f3vfz+WLVuGN73pTXjGM56BOXPmdHW+MXXzPp100kn44x//iBtvvBFf//rXO/b5q1/9Cq94xSswY8YMfPCDH8Tg4CD+9V//FYceeij+8z//M4lfvuc978G2226LxYsX43e/+x3OOeccnHrqqbj88svHdE4TStQn+tnPfkYA6MYbbyQiIq01PetZz6L3ve99Ad/y5csJAD3zmc+kxx57zJV/+9vfJgD0ne98x5U9+eSTyXG++c1vEgC69dZbXdlFF11EAGj58uVERFRVFT3rWc+i+fPnB23PPvtsUkrRsmXLXNlWW21FCxYsSI4T9/n444/T1ltvTXPnzqWnnnoq4NVaN455yZIlpJSi3//+965s8eLF1M3tevazn50d3yGHHEKHHHKI27/pppuS68e0du1a2mOPPWjvvfemp59+mg4//HCaMWNGMJ5e6F//9V8JAN17772ubP369bTddttlx9oN7b333sH5xHTWWWcRAFq5cuWY+u+Wvv71rxMA+spXvhKUH3LIIbT33nvXtrvmmmsIAH3xi19s7H/BggUEoPF3yimnBOMpioJ++MMfBv1ccMEFBIB+9KMfubLcs3fYYYfRbrvtFpR1utYxNY31m9/8JhGZ+z9r1izad999ad26da7tl7/8ZQIQHC9+t5huvvlmAkA333xz4znl3qdTTjml9n0CQIsXL3b7Rx11FA0NDdGDDz7oyv74xz/S1ltvTa985SuTcc6bNy94x0877TQqy5Ief/zx/AXrI/XNBXTJJZdg9uzZeNWrXgXAmF3z58/HZZddhqqqEv758+dj2223dfuveMUrABgXA9MWW2zhtlkDYf/2z3/+89qxFEWBv/mbv8G1116LJ554IhjjQQcdhOc85zk9n9+NN96IJ554AqeffnriU5SWiBzz2rVrsWrVKhx00EEgIvziF7/o+bjdErvF5DVl2nLLLXHxxRfj3nvvxStf+Upcd911+MIXvoBddtllTMc6+uijMW3atMDF973vfQ+rVq2aMD8xn1e3mvNY6L777sMpp5yCAw88EAsWLOipLWf2yOetjqZNm4Ybb7wx+4vpyiuvxPOf/3zstddeWLVqlfu9+tWvBgDcfPPNjlc+e6tXr8aqVatwyCGHYNmyZRvsmjryyCOz4+X3/Wc/+xn+9Kc/4V3velfgVjvhhBMwc+bMMR93vN+nqqrw/e9/H0cddRR22203V77jjjvi2GOPxW233YY1a9YEbd75zncG7/grXvEKVFU1JVOt++ICqqoKl112GV71qldh+fLlrnzu3Ln4/Oc/j6VLl+J1r3td0CYGH37B//d//9eVPfbYYzjzzDNx2WWX4U9/+lPA3+mBPv744/GZz3wG11xzDY4//njcf//9uOuuu3DBBReM6RwffPBBAEgyQ2J66KGH8LGPfQzXXnttcC7djHk8iGo+CHfwwQfj3e9+N84991wcdthhGxRM3WabbXDEEUfg0ksvxSc+8QkARrjuvPPODpjGm/i8muZOPPXUU8k13mGHHbrqf8WKFTj88MMxc+ZMXHXVVT0nAPzf//0fAHSVpVSWJebNm9dVv7/5zW9w7733Yvvtt8/Wy/fiRz/6ERYvXow77rgDTz75ZMC3evXqDQLiZz3rWY1jZjB87nOfG5QPDg4GQNsrjff79Oc//xlPPvmkiwNKev7znw+tNR5++OHABdgNVk0V6osA+MEPfoBHH30Ul112GS677LKk/pJLLkkEQN0LJgHs6KOPxu23344PfOAD2HfffTF9+nRorfH6178eWuvGMb3gBS/Afvvth2984xs4/vjj8Y1vfANDQ0M4+uijx3CG3VFVVXjta1+Lxx57DB/60Iew1157YauttsIjjzyCE044oeOYc1QHeFVVBdfwmc98JoD6h3LdunUuuPbggw/iySefxJZbbtnzeJiOP/54XHnllbj99tuxzz774Nprr8XJJ5+MopgYI5TPa7vttqvlufzyy3HiiScGZXUCUdLq1avxl3/5l3j88cfxwx/+EDvttFPP4/vv//5vABj3tGetNfbZZx+cffbZ2Xr2rT/44IN4zWteg7322gtnn3025syZg6GhIVx//fX4whe+MKZnb6Ko6ZmO98f7fRoLdYNVU4X6IgAuueQSzJo1y0XiJV199dW45pprcMEFFwTmXCf63//9XyxduhRnnnlmkMHym9/8pus+jj/+eCxcuBCPPvooLr30Uhx++OGJi6Tb2bgcHP7v//7v2pf8nnvuwQMPPICvfe1rQc50LxOFYtp2223x+OOPJ+W///3vA81qr732AoDAApO0ePFi3Hvvvfjc5z6HD33oQzj99NPxz//8z2Me1+tf/3psv/32uOSSSzB37lw8+eSTOO6448bcX6f7sHz5cmy33Xa1mjAAHHbYYT1f66effhpHHHEEHnjgAdx00014wQte0FN7wADVpZdeii233BIvf/nLe27fRLvvvjt++ctf4jWveU3jNfrOd76DdevW4dprrw00VukiYpqIGeg88fA3v/lNYAWOjIxg+fLlePGLX+zK+B2Mn+vYpdLL+9TtOW2//fbYcsstcf/99yd19913H4qiGHPAeirQpMcAnnrqKVx99dV44xvfiDe/+c3J79RTT8UTTzyBa6+9tqd+WerGUvacc87puo9jjjkGSim8733vw7Jly7L+6a222ioLsDG97nWvw9Zbb40lS5bg6aefDup4jLkxExG++MUvdj3mmHbffXf8+Mc/xvr1613Zd7/7XTz88MMB384774w5c+bgZz/7WdLHT37yE3zuc5/D+9//fvz93/89PvCBD+BLX/oS/vM//3PM4xoYGMAxxxyDK664AhdffDH22WcfvOhFLxpzf53uw1133YUDDzywsY8dd9wR8+bNC35NVFUV5s+fjzvuuANXXnllx/7r+njve9+Le++9F+9973sxY8aMnvtooqOPPhqPPPIILrzwwqTuqaeewtq1awHkn73Vq1fjoosuStp1+8z3Qvvvvz+23357XHDBBcGzevHFFyfHYmXq1ltvdWVVVeHLX/5ywNfL+7TVVlsBSIVKTGVZ4nWvex2+/e1vB2moK1euxKWXXoqXv/zl434PJ5Mm3QLgQOub3vSmbP3LXvYypynOnz+/635nzJiBV77ylfjsZz+LkZER7Lzzzvj+979fq+HmaPvtt8frX/96XHnlldhmm22y6Xn77bcfbrrpJpx99tnYaaed8JznPCe7jMWMGTPwhS98AW9/+9vx0pe+FMceeyy23XZb/PKXv8STTz6Jr33ta9hrr72w++674x/+4R/wyCOPYMaMGfiP//iPDfIVvv3tb8dVV12F17/+9Tj66KPx4IMP4hvf+EY2XfXII4/ENddcAyJyGtHTTz+NBQsW4LnPfS4+9alPAQDOPPNMfOc738GJJ56Ie+65x708Z5xxBs4880zcfPPNXeWGH3/88fjnf/5n3HzzzbUToJRSOOSQQ4Lc7hztt99+OP/88/HJT34Se+yxB2bNmuU0yT/96U/4r//6L5fKOF7093//97j22mtxxBFH4LHHHksmfsUKw+rVqx3Pk08+6WYCP/jgg3jrW9/q4iHjSccddxyuuOIKvOtd78LNN9+Mgw8+GFVV4b777sMVV1yB733ve9h///3xute9DkNDQzjiiCNw0kkn4f/+7/9w4YUXYtasWXj00UeDPpuudR098MADyfUBTArpa1/7WgwODuKTn/wkTjrpJLz61a/G/PnzsXz5clx00UVJDGDvvffGy172MixatAiPPfYYnvGMZ+Cyyy7D6OhowNfL+7TffvsBAN773vfisMMOQ1mWeOtb35o9l09+8pO48cYb8fKXvxwnn3wyBgYG8K//+q9Yt24dPvvZzzZehylPk512dMQRR9C0adNo7dq1tTwnnHACDQ4O0qpVq1wa6D/90z8lfIjStf7whz/QX/3VX9E222xDM2fOpLe85S30xz/+MeGrSysjIrriiisIAL3zne/Mju2+++6jV77ylbTFFlsQAJfGWNfntddeSwcddBBtscUWNGPGDDrggANcKhwR0a9//WuaN28eTZ8+nbbbbjt6xzveQb/85S8JAF100UWOr9s0UCKiz3/+87TzzjvT8PAwHXzwwfSzn/0sSQMlIvr5z39OAIKUQU5Z+8lPfhLw/uxnP6OBgQF697vf7cr+/u//npRSQXpnJ9p7772pKAr6wx/+kNQ98cQTBIDe+ta3duxnxYoVdPjhh9PWW2+dpA2ef/75tOWWW9KaNWu6Hlc3dMghhzSmODbxTp8+nZ773OfS3/7t39L3v//9ro+5YMEC2mqrrWrrEaWBEpkUy8985jO099570/DwMG277ba033770ZlnnkmrV692fNdeey296EUvomnTptGuu+5Kn/nMZ+irX/1q8hw3Xeu6MdX94rbnnXcePec5z6Hh4WHaf//96dZbb80+qw8++CDNmzePhoeHafbs2fSP//iPdOONNyZpoN2+T6Ojo/Se97yHtt9+e1JKBfcvxgsi864cdthhNH36dNpyyy3pVa96Fd1+++0BD2PAT3/606A8l646VUgR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MDk4WEd9FQBDQ0PYb7/9sHTpUhx11FEATPBj6dKlOPXUU7NtDjzwQCxduhTvf//7XdmNN96IAw88MMtfZ3bNnDlzo3+gmWbMmNGeyxSk9lymJhUbkOE2bdo0TJs2bRxHMzk4WEvUZ7rssstoeHiYLr74Yvr1r39N73znO2mbbbahFStWEBHRcccdR6effrrj/9GPfkQDAwP0uc99ju69915avHgxDQ4O0j333NPV8VavXk0AaPXq1RNyPpNJ7blMTWrPZWrSVD6XycZBpr4LACKif/mXf6FddtmFhoaG6IADDqAf//jHru6QQw6hBQsWBPxXXHEFPe95z6OhoSHae++96brrruv6WFP5IeiV2nOZmtSey9SkqX4uk4mDTFNCAEwmPf3007R48WJ6+umn+z2UDab2XKYmtecyNWlTOpfxor5PBGuppZZaaqk/NCXWAmqppZZaamnyqRUALbXUUkubKbUCoKWWWmppM6VNUgBMmeWlx4F6OZcLL7wQr3jFK7Dtttti2223xbx58zqe+2RSr/eF6bLLLoNSyuVITwXq9Vwef/xxnHLKKdhxxx0xPDyM5z3veVPmOev1XM455xzsueee2GKLLTBnzhycdtppePrppydptPV066234ogjjsBOO+0EpVRX6+LccssteMlLXoLh4WHsscceuPjiiyd8nFOK+h2FHm+67LLLaGhoiL761a/Sr371K3rHO95B22yzDa1cuTLL/6Mf/YjKsqTPfvaz9Otf/5o+8pGPjCmfdiKo13M59thj6dxzz6Vf/OIXdO+999IJJ5xAM2fOpD/84Q+TPPKUej0XpuXLl9POO+9Mr3jFK+jII4+cnMF2oF7PZd26dbT//vvTG97wBrrtttto+fLldMstt9Ddd989ySNPqddzueSSS2h4eJguueQSWr58OX3ve9+jHXfckU477bRJHnlK119/PX34wx+mq6++mgDQNddc08i/bNky2nLLLWnhwoX061//mv7lX/6FyrKkG264YXIGPAVokxMABxxwAJ1yyiluv6oq2mmnnWjJkiVZ/qOPPpoOP/zwoGzu3Ll00kknTeg4u6FezyWm0dFR2nrrrelrX/vaRA2xaxrLuYyOjtJBBx1E//Zv/0YLFiyYMgKg13M5//zzabfddqP169dP1hC7pl7P5ZRTTqFXv/rVQdnChQvp4IMPntBx9krdCIAPfvCDtPfeewdl8+fPp8MOO2wCRza1aJNyAfGyqvPmzXNl3SyrKvkBs6xqHf9k0VjOJaYnn3wSIyMjY177ZLxorOfy8Y9/HLNmzcLf/d3fTcYwu6KxnMu1116LAw88EKeccgpmz56NF77whTjrrLNQ5b6/PIk0lnM56KCDcNdddzk30bJly3D99dfjDW94w6SMeTxpqr77k0mb1Gqg/VxWdbxpLOcS04c+9CHstNNOyUM+2TSWc7ntttvwla98BXffffckjLB7Gsu5LFu2DD/4wQ/wN3/zN7j++uvx29/+FieffDJGRkawePHiyRh2lsZyLsceeyxWrVqFl7/85SAijI6O4l3vehf+8R//cTKGPK5U9+6vWbMGTz31FLbYYos+jWzyaJOyAFry9OlPfxqXXXYZrrnmmnFfvGqi6YknnsBxxx2HCy+8ENttt12/h7PBpLXGrFmz8OUvfxn77bcf5s+fjw9/+MM9fblpqtAtt9yCs846C+eddx5+/vOf4+qrr8Z1112HT3ziE/0eWktjoE3KAujnsqrjTWM5F6bPfe5z+PSnP42bbroJL3rRiyZymF1Rr+fy4IMP4ne/+x2OOOIIV6bt924HBgZw//33Y/fdd5/YQdfQWO7LjjvuiMHBQZRl6cqe//znY8WKFVi/fj2GhoYmdMx1NJZz+ehHP4rjjjsOb3/72wEA++yzD9auXYt3vvOd+PCHP7xBK21ONtW9+zNmzNgstH9gE7MA5LKqTLysat0yqbysqqQxLas6zjSWcwGAz372s/jEJz6BG264Afvvv/9kDLUj9Xoue+21F+655x7cfffd7vemN70Jr3rVq3D33XcnH9qYTBrLfTn44IPx29/+1gkxAHjggQew44479g38gbGdy5NPPpmAPAs22shWlZmq7/6kUr+j0ONN/VpWdSKo13P59Kc/TUNDQ3TVVVfRo48+6n5PPPFEv07BUa/nEtNUygLq9Vweeugh2nrrrenUU0+l+++/n7773e/SrFmz6JOf/GS/TsFRr+eyePFi2nrrremb3/wmLVu2jL7//e/T7rvvTkcffXS/TsHRE088Qb/4xS/oF7/4BQGgs88+m37xi1/Q73//eyIiOv300+m4445z/JwG+oEPfIDuvfdeOvfcc9s00E2B+rGs6kRRL+fy7Gc/m2C+phv8Fi9ePPkDz1Cv90XSVBIARL2fy+23305z586l4eFh2m233ehTn/oUjY6OTvKo89TLuYyMjNAZZ5xBu+++O02bNo3mzJlDJ598Mv3v//7v5A88optvvjn7/PP4FyxYQIccckjSZt9996WhoSHabbfd6KKLLpr0cfeT2tVAW2qppZY2U9qkYgAttdRSSy11T60AaKmlllraTKkVAC211FJLmym1AqClllpqaTOlVgC01FJLLW2m1AqAllpqqaXNlFoB0FJLLbW0mVIrAFpqqaWWNlNqBUBLLbXU0mZKrQBoqaWWWtpMqRUALbXUUkubKbUCoKVNnv785z9jhx12wFlnneXKbr/9dgwNDSXLAbfU0uZE7WJwLW0WdP311+Ooo47C7bffjj333BP77rsvjjzySJx99tn9HlpLLfWNWgHQ0mZDp5xyCm666Sbsv//+uOeee/DTn/4Uw8PD/R5WSy31jVoB0NJmQ0899RRe+MIX4uGHH8Zdd92FffbZp99DaqmlvlIbA2hps6EHH3wQf/zjH6G1xu9+97t+D6ellvpOrQXQ0mZB69evxwEHHIB9990Xe+65J8455xzcc889mDVrVr+H1lJLfaNWALS0WdAHPvABXHXVVfjlL3+J6dOn45BDDsHMmTPx3e9+t99Da6mlvlHrAmppk6dbbrkF55xzDr7+9a9jxowZKIoCX//61/HDH/4Q559/fr+H11JLfaPWAmippZZa2kyptQBaaqmlljZTagVASy211NJmSq0AaKmlllraTKkVAC211FJLmym1AqClllpqaTOlVgC01FJLLW2m1AqAllpqqaXNlFoB0FJLLbW0mVIrAFpqqaWWNlNqBUBLLbXU0mZKrQBoqaWWWtpMqRUALbXUUkubKf3/uzFcijVkeF8AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Predicted u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Analytical u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2842.846949,
   "end_time": "2025-02-24T06:40:34.080099",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-24T05:53:11.233150",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
