{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "049f8d94",
   "metadata": {
    "_cell_guid": "12a40a52-ec70-471a-9fcf-0b454e269f9d",
    "_uuid": "a17e74a7-87b0-46ac-84ab-59d7cfd92dc5",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.005037,
     "end_time": "2025-04-07T17:35:48.167243",
     "exception": false,
     "start_time": "2025-04-07T17:35:48.162206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0901620b",
   "metadata": {
    "_cell_guid": "a795b49b-c84a-4204-be59-076ff2b849e4",
    "_uuid": "e1f4b098-0e6a-4060-95a3-2e7ee8ad2213",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T17:35:48.177036Z",
     "iopub.status.busy": "2025-04-07T17:35:48.176718Z",
     "iopub.status.idle": "2025-04-07T17:35:51.594875Z",
     "shell.execute_reply": "2025-04-07T17:35:51.594193Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 3.425347,
     "end_time": "2025-04-07T17:35:51.596918",
     "exception": false,
     "start_time": "2025-04-07T17:35:48.171571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "89d792b9",
   "metadata": {
    "_cell_guid": "8dca3706-fb4e-41fa-939e-830bb170e9e1",
    "_uuid": "295f95a3-b718-44bb-9d53-9ca5feb0ed09",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T17:35:51.607073Z",
     "iopub.status.busy": "2025-04-07T17:35:51.606737Z",
     "iopub.status.idle": "2025-04-07T17:35:51.621656Z",
     "shell.execute_reply": "2025-04-07T17:35:51.621045Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.021842,
     "end_time": "2025-04-07T17:35:51.623217",
     "exception": false,
     "start_time": "2025-04-07T17:35:51.601375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "39f988f0",
   "metadata": {
    "_cell_guid": "22869a00-394e-4368-8f94-e385ebbcb509",
    "_uuid": "8171cf34-52c5-49ba-b926-b406a965be7d",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T17:35:51.632325Z",
     "iopub.status.busy": "2025-04-07T17:35:51.632099Z",
     "iopub.status.idle": "2025-04-07T17:35:51.635610Z",
     "shell.execute_reply": "2025-04-07T17:35:51.634941Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.009817,
     "end_time": "2025-04-07T17:35:51.637173",
     "exception": false,
     "start_time": "2025-04-07T17:35:51.627356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "36c05fe9",
   "metadata": {
    "_cell_guid": "8cd92b7a-1b37-4c5b-b0f8-e97cfd7f870c",
    "_uuid": "20f5cf48-74b7-41c1-ace5-d23b4e513a60",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T17:35:51.646512Z",
     "iopub.status.busy": "2025-04-07T17:35:51.646053Z",
     "iopub.status.idle": "2025-04-07T17:35:51.651866Z",
     "shell.execute_reply": "2025-04-07T17:35:51.651024Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.012119,
     "end_time": "2025-04-07T17:35:51.653359",
     "exception": false,
     "start_time": "2025-04-07T17:35:51.641240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def get_data_3dV2(x_range, y_range, t_range, x_num, y_num, t_num):\n",
    "    # Input validation\n",
    "    assert x_num > 1 and y_num > 1 and t_num > 1, \"All nums must be ≥ 2\"\n",
    "    \n",
    "    # Generate grid using linspace + meshgrid\n",
    "    x = np.linspace(*x_range, x_num)\n",
    "    y = np.linspace(*y_range, y_num)\n",
    "    t = np.linspace(*t_range, t_num)\n",
    "    \n",
    "    # Create full grid with \"ij\" indexing\n",
    "    x_mesh, y_mesh, t_mesh = np.meshgrid(x, y, t, indexing='ij')\n",
    "    data = np.stack((x_mesh, y_mesh, t_mesh), axis=-1)  # (x_num, y_num, t_num, 3)\n",
    "    \n",
    "    # Extract boundaries (match your original code expectations)\n",
    "    b_left = data[0, :, :, :].reshape(-1, 3)    # x=x_min (all y/t)\n",
    "    b_right = data[-1, :, :, :].reshape(-1, 3)   # x=x_max\n",
    "    b_lower = data[:, 0, :, :].reshape(-1, 3)    # y=y_min (all x/t)\n",
    "    b_upper = data[:, -1, :, :].reshape(-1, 3)   # y=y_max\n",
    "    \n",
    "    # Return format matching your original code (no initial/final)\n",
    "    return (\n",
    "        data.reshape(-1, 3),  # All points (N, 3)\n",
    "        b_left, b_right, b_upper, b_lower\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e1bb9940",
   "metadata": {
    "_cell_guid": "dab6aa21-c28f-4ea2-8288-6fceab7766a5",
    "_uuid": "dcd65402-6f5f-46bc-8e3b-fdd33e51be42",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T17:35:51.662829Z",
     "iopub.status.busy": "2025-04-07T17:35:51.662137Z",
     "iopub.status.idle": "2025-04-07T17:35:51.719420Z",
     "shell.execute_reply": "2025-04-07T17:35:51.718548Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.063692,
     "end_time": "2025-04-07T17:35:51.721095",
     "exception": false,
     "start_time": "2025-04-07T17:35:51.657403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=17\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "faed9882",
   "metadata": {
    "_cell_guid": "e5c68518-7f64-4130-bebd-cf399165e1ef",
    "_uuid": "972f9704-ccc2-4cd9-b898-a96a63839dfc",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.003966,
     "end_time": "2025-04-07T17:35:51.729410",
     "exception": false,
     "start_time": "2025-04-07T17:35:51.725444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7982c4bd",
   "metadata": {
    "_cell_guid": "0a6f6a7e-59ae-4187-b2f4-f67162313603",
    "_uuid": "1a02e333-9bec-4c34-861f-66244dfe3c90",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T17:35:51.738802Z",
     "iopub.status.busy": "2025-04-07T17:35:51.738114Z",
     "iopub.status.idle": "2025-04-07T17:35:51.933451Z",
     "shell.execute_reply": "2025-04-07T17:35:51.932531Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.202311,
     "end_time": "2025-04-07T17:35:51.935711",
     "exception": false,
     "start_time": "2025-04-07T17:35:51.733400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3dV2([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=5, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=5, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=5, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=5, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=5, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "35ff79f9",
   "metadata": {
    "_cell_guid": "220e7730-d232-40b2-b482-dc8eadb5cc2c",
    "_uuid": "98d3beb0-f9b6-485c-b699-49b38da081bd",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T17:35:51.949633Z",
     "iopub.status.busy": "2025-04-07T17:35:51.949088Z",
     "iopub.status.idle": "2025-04-07T17:35:53.117656Z",
     "shell.execute_reply": "2025-04-07T17:35:53.116768Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.177478,
     "end_time": "2025-04-07T17:35:53.119642",
     "exception": false,
     "start_time": "2025-04-07T17:35:51.942164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3c20d2be",
   "metadata": {
    "_cell_guid": "8b6d4148-1f6b-4c8d-9760-b0854d13e940",
    "_uuid": "6b2a831d-f943-4c61-b861-65115fab4987",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T17:35:53.129529Z",
     "iopub.status.busy": "2025-04-07T17:35:53.129137Z",
     "iopub.status.idle": "2025-04-07T17:35:53.132775Z",
     "shell.execute_reply": "2025-04-07T17:35:53.131936Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.010118,
     "end_time": "2025-04-07T17:35:53.134237",
     "exception": false,
     "start_time": "2025-04-07T17:35:53.124119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6c8d3762",
   "metadata": {
    "_cell_guid": "51d3cd2d-5263-48f1-a02e-efd27de78cb7",
    "_uuid": "8fdbc6b6-f540-490d-b03c-ef0e4b5f9fec",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T17:35:53.143681Z",
     "iopub.status.busy": "2025-04-07T17:35:53.143393Z",
     "iopub.status.idle": "2025-04-07T18:47:30.728441Z",
     "shell.execute_reply": "2025-04-07T18:47:30.727489Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 4297.591935,
     "end_time": "2025-04-07T18:47:30.730250",
     "exception": false,
     "start_time": "2025-04-07T17:35:53.138315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1000 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1000/1000 [1:11:37<00:00,  4.30s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "\n",
    "for i in tqdm(range(1000)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, \n",
    "        )[0]\n",
    "\n",
    "        # u_bc_x_min = torch.autograd.grad(\n",
    "        #     bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "        #     retain_graph=True, create_graph=True,\n",
    "        # )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, \n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True,\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)  # PDE residual\n",
    "        u_ic_true = 0.01\n",
    "        loss_ic = torch.mean((pred_ic - 0) ** 2) # Initial condition\n",
    "        mask_t_positive = (t_left > 0).squeeze()  # True for t > 0\n",
    "\n",
    "        # Compute loss only for t > 0\n",
    "        if mask_t_positive.any():\n",
    "            loss_dirichlet = 10 * torch.mean((bc_x_min[mask_t_positive] - 1) ** 2)\n",
    "        else:\n",
    "            loss_dirichlet = 0.0  # No loss if no t > 0 in this batch\n",
    "        \n",
    "        loss_bc = (\n",
    "            torch.mean((u_bc_x_max) ** 2) +  # Neumann: x=L\n",
    "            torch.mean((u_bc_y_min) ** 2) +  # Neumann: y=0\n",
    "            torch.mean((u_bc_y_max) ** 2) +  # Neumann: y=L\n",
    "            loss_dirichlet  # Dirichlet: x=0 (t > 0 only)\n",
    "        )\n",
    "\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "        if (loss_ic>0.05):\n",
    "            c=100\n",
    "            d=10\n",
    "        else:\n",
    "            d=100\n",
    "            c=10\n",
    "\n",
    "        loss = d * loss_res + c * loss_ic + 1000.0 * loss_bc\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "645bccb9",
   "metadata": {
    "_cell_guid": "ed1ec62e-3dff-4c65-b0d3-98ce78a57789",
    "_uuid": "f7a8b545-5ca0-4bd1-8849-b1d6fbaac0ab",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T18:47:30.822550Z",
     "iopub.status.busy": "2025-04-07T18:47:30.822225Z",
     "iopub.status.idle": "2025-04-07T18:47:30.837174Z",
     "shell.execute_reply": "2025-04-07T18:47:30.836292Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.062526,
     "end_time": "2025-04-07T18:47:30.838915",
     "exception": false,
     "start_time": "2025-04-07T18:47:30.776389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.011324, Loss_IC: 0.050586, loss_bc: 0.000143\n",
      "Train Loss: 0.062053\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b9ac500",
   "metadata": {
    "_cell_guid": "6886d226-44b4-4842-ac53-865fa690fdc6",
    "_uuid": "3f18c882-4b2f-4eb8-b85c-2e7f02ce0862",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.045485,
     "end_time": "2025-04-07T18:47:30.936080",
     "exception": false,
     "start_time": "2025-04-07T18:47:30.890595",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b6e6f68",
   "metadata": {
    "_cell_guid": "83894590-3d44-4f89-a3bd-382fccd09a71",
    "_uuid": "e9861593-ee48-413a-bfb2-cede94e92547",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.044961,
     "end_time": "2025-04-07T18:47:31.025937",
     "exception": false,
     "start_time": "2025-04-07T18:47:30.980976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95aaa5d8",
   "metadata": {
    "_cell_guid": "3de9a64d-99c2-4436-9be3-560e9685a72c",
    "_uuid": "eca3c03d-9e0a-4276-871e-95dca060bffd",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.045989,
     "end_time": "2025-04-07T18:47:31.116715",
     "exception": false,
     "start_time": "2025-04-07T18:47:31.070726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c5f0bc1a",
   "metadata": {
    "_cell_guid": "e84acde1-d1f9-4d88-b64b-0baceb782187",
    "_uuid": "77353409-bc2b-48d0-9732-aa2df5528542",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T18:47:31.209102Z",
     "iopub.status.busy": "2025-04-07T18:47:31.208776Z",
     "iopub.status.idle": "2025-04-07T18:47:31.222097Z",
     "shell.execute_reply": "2025-04-07T18:47:31.221218Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.06216,
     "end_time": "2025-04-07T18:47:31.223716",
     "exception": false,
     "start_time": "2025-04-07T18:47:31.161556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023872, Loss_IC: 0.658993, loss_bc: 28.641047\n",
      "Train Loss: 29.323912\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "39c088f3",
   "metadata": {
    "_cell_guid": "411e2791-3c29-4aa6-95b3-d673fac38e2b",
    "_uuid": "314f01b7-ede4-487c-b18c-fbe5e7e3a13f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T18:47:31.315628Z",
     "iopub.status.busy": "2025-04-07T18:47:31.315287Z",
     "iopub.status.idle": "2025-04-07T18:47:31.328789Z",
     "shell.execute_reply": "2025-04-07T18:47:31.327927Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.061114,
     "end_time": "2025-04-07T18:47:31.330402",
     "exception": false,
     "start_time": "2025-04-07T18:47:31.269288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.011324, Loss_IC: 0.050586, loss_bc: 0.000143\n",
      "Train Loss: 0.062053\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "69b3f612",
   "metadata": {
    "_cell_guid": "8d095e2b-0ae4-45a4-960a-b5a2e2abe280",
    "_uuid": "4402d15d-5d4b-441b-b20d-163d56ba9dab",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T18:47:31.424209Z",
     "iopub.status.busy": "2025-04-07T18:47:31.423363Z",
     "iopub.status.idle": "2025-04-07T18:47:31.728934Z",
     "shell.execute_reply": "2025-04-07T18:47:31.728055Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.354375,
     "end_time": "2025-04-07T18:47:31.730708",
     "exception": false,
     "start_time": "2025-04-07T18:47:31.376333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "20e4c817",
   "metadata": {
    "_cell_guid": "18fd8af2-1ec7-44d2-bd1d-221ed40fece1",
    "_uuid": "05a41581-c0e7-4bbf-9462-ccb046f4f10f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T18:47:31.824380Z",
     "iopub.status.busy": "2025-04-07T18:47:31.824082Z",
     "iopub.status.idle": "2025-04-07T18:47:31.827815Z",
     "shell.execute_reply": "2025-04-07T18:47:31.827007Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.051782,
     "end_time": "2025-04-07T18:47:31.829305",
     "exception": false,
     "start_time": "2025-04-07T18:47:31.777523",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "db865e18",
   "metadata": {
    "_cell_guid": "d0fa43bc-e228-4ce2-b441-546805f37a05",
    "_uuid": "c5906942-88d1-4f92-a6c6-bd6b47d093a3",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-07T18:47:31.921832Z",
     "iopub.status.busy": "2025-04-07T18:47:31.921364Z",
     "iopub.status.idle": "2025-04-07T18:47:33.442113Z",
     "shell.execute_reply": "2025-04-07T18:47:33.441263Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.568914,
     "end_time": "2025-04-07T18:47:33.443883",
     "exception": false,
     "start_time": "2025-04-07T18:47:31.874969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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YubMmaJLly6ioqJCCCFEamqqmD9/vvX4o0ePioCAAPHBBx+I0tJSYTAYfGoaqJS6LF++XGi1WrF7925x/fp163bnzh1vVcFKal0e5kuzgKTW5cqVK6Jz584iIyNDnD9/Xnz++eciJCREvPPOO96qgpXUuhgMBtG5c2fx3//936KsrEx88cUXom/fvmLChAneqoLVnTt3xKlTp8SpU6cEAJGTkyNOnTolvv32WyGEEPPnzxepqanW4xungf7ud78TpaWlYu3atZwG6g9Wr14tevXqJbRarYiLixNfffWV9bXRo0eLtLQ0m+N37dol+vfvL7RarRgyZIgoKCjwcImbJ6UuvXv3Fri/iKPNZjAYPF9wO6T+Xh7kSwFACOl1OXbsmIiPjxc6nU706dNHvPvuu6KhocHDpbZPSl3q6+vF4sWLRd++fUVgYKCIjIwUr732mvjnP//p+YI/5PDhw3b//hvLn5aWJkaPHt3knOjoaKHVakWfPn3Epk2bPF5ub2I2UCIihfKrMQAiInIeAwARkUIxABARKRQDABGRQjEAEBEpFAMAEZFCMQAQESkUAwARkUIxABARKRQDABGRQjEAEBEpFAMA+b2bN28iLCwMy5Yts+47duwYtFptk3TARErCZHCkCIWFhRg3bhyOHTuGAQMGIDo6Gi+//DJycnK8XTQir2EAIMVIT0/HoUOHEBsbizNnzuCvf/0rdDqdt4tF5DUMAKQYd+/exdChQ3H16lWcOHECw4YN83aRiLyKYwCkGJcuXcL//d//wWKx4PLly94uDpHXsQVAimAymRAXF4fo6GgMGDAAubm5OHPmDEJCQrxdNCKvYQAgRfjd736H3bt34+uvv0anTp0wevRoBAcH4/PPP/d20Yi8hl1A5PeKi4uRm5uLrVu3IigoCGq1Glu3bsWXX36J9evXe7t4RF7DFgARkUKxBUBEpFAMAERECsUAQESkUAwAREQKxQBARKRQDABERArFAEBEpFAMAERECsUAQESkUAwAREQKxQBARKRQDABERAr1/557t390J3l5AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana_neumann(x, y, t, alpha=0.4, L=1, n=1):\n",
    "    # Steady-state solution for the given boundary conditions\n",
    "    return 1 - x / L\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u_corrected = u_ana_neumann(res_test[:, 0], res_test[:, 1], t=1)\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u_corrected = u_corrected.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u_corrected[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Last time step\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat Analytical Solution t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical_t1.png')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4308.959932,
   "end_time": "2025-04-07T18:47:34.712560",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-07T17:35:45.752628",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
