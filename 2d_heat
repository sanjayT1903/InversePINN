{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a207356",
   "metadata": {
    "papermill": {
     "duration": 0.005046,
     "end_time": "2025-02-24T21:23:32.272379",
     "exception": false,
     "start_time": "2025-02-24T21:23:32.267333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ba3f01e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:23:32.282537Z",
     "iopub.status.busy": "2025-02-24T21:23:32.282165Z",
     "iopub.status.idle": "2025-02-24T21:23:36.157975Z",
     "shell.execute_reply": "2025-02-24T21:23:36.157135Z"
    },
    "papermill": {
     "duration": 3.883333,
     "end_time": "2025-02-24T21:23:36.160194",
     "exception": false,
     "start_time": "2025-02-24T21:23:32.276861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3b76327c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:23:36.170245Z",
     "iopub.status.busy": "2025-02-24T21:23:36.169797Z",
     "iopub.status.idle": "2025-02-24T21:23:36.188545Z",
     "shell.execute_reply": "2025-02-24T21:23:36.187399Z"
    },
    "papermill": {
     "duration": 0.0259,
     "end_time": "2025-02-24T21:23:36.190660",
     "exception": false,
     "start_time": "2025-02-24T21:23:36.164760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ccca80f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:23:36.200868Z",
     "iopub.status.busy": "2025-02-24T21:23:36.200205Z",
     "iopub.status.idle": "2025-02-24T21:23:36.204548Z",
     "shell.execute_reply": "2025-02-24T21:23:36.203522Z"
    },
    "papermill": {
     "duration": 0.011298,
     "end_time": "2025-02-24T21:23:36.206274",
     "exception": false,
     "start_time": "2025-02-24T21:23:36.194976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f04fe185",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:23:36.216187Z",
     "iopub.status.busy": "2025-02-24T21:23:36.215636Z",
     "iopub.status.idle": "2025-02-24T21:23:36.282038Z",
     "shell.execute_reply": "2025-02-24T21:23:36.280866Z"
    },
    "papermill": {
     "duration": 0.073436,
     "end_time": "2025-02-24T21:23:36.283927",
     "exception": false,
     "start_time": "2025-02-24T21:23:36.210491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4757aebe",
   "metadata": {
    "papermill": {
     "duration": 0.004017,
     "end_time": "2025-02-24T21:23:36.292387",
     "exception": false,
     "start_time": "2025-02-24T21:23:36.288370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "26720b32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:23:36.302054Z",
     "iopub.status.busy": "2025-02-24T21:23:36.301734Z",
     "iopub.status.idle": "2025-02-24T21:23:36.544006Z",
     "shell.execute_reply": "2025-02-24T21:23:36.543129Z"
    },
    "papermill": {
     "duration": 0.24979,
     "end_time": "2025-02-24T21:23:36.546244",
     "exception": false,
     "start_time": "2025-02-24T21:23:36.296454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2fe1d039",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:23:36.556257Z",
     "iopub.status.busy": "2025-02-24T21:23:36.555884Z",
     "iopub.status.idle": "2025-02-24T21:23:37.940511Z",
     "shell.execute_reply": "2025-02-24T21:23:37.939562Z"
    },
    "papermill": {
     "duration": 1.392151,
     "end_time": "2025-02-24T21:23:37.942669",
     "exception": false,
     "start_time": "2025-02-24T21:23:36.550518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cb1f8f88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:23:37.952536Z",
     "iopub.status.busy": "2025-02-24T21:23:37.952095Z",
     "iopub.status.idle": "2025-02-24T21:23:37.956101Z",
     "shell.execute_reply": "2025-02-24T21:23:37.955318Z"
    },
    "papermill": {
     "duration": 0.010762,
     "end_time": "2025-02-24T21:23:37.957809",
     "exception": false,
     "start_time": "2025-02-24T21:23:37.947047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "787d2c0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:23:37.967591Z",
     "iopub.status.busy": "2025-02-24T21:23:37.967287Z",
     "iopub.status.idle": "2025-02-24T21:37:44.520759Z",
     "shell.execute_reply": "2025-02-24T21:37:44.519617Z"
    },
    "papermill": {
     "duration": 846.561379,
     "end_time": "2025-02-24T21:37:44.523318",
     "exception": false,
     "start_time": "2025-02-24T21:23:37.961939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1500/1500 [14:06<00:00,  1.77it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1500)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 2*loss_res + 10*loss_ic + 2*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e92c07c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:37:44.686891Z",
     "iopub.status.busy": "2025-02-24T21:37:44.685763Z",
     "iopub.status.idle": "2025-02-24T21:37:44.703383Z",
     "shell.execute_reply": "2025-02-24T21:37:44.702144Z"
    },
    "papermill": {
     "duration": 0.101192,
     "end_time": "2025-02-24T21:37:44.705346",
     "exception": false,
     "start_time": "2025-02-24T21:37:44.604154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.022960, Loss_IC: 0.073470, loss_bc: 0.067246\n",
      "Train Loss: 0.163676\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baf64577",
   "metadata": {
    "papermill": {
     "duration": 0.079514,
     "end_time": "2025-02-24T21:37:44.864568",
     "exception": false,
     "start_time": "2025-02-24T21:37:44.785054",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "11287435",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:37:45.023984Z",
     "iopub.status.busy": "2025-02-24T21:37:45.023186Z",
     "iopub.status.idle": "2025-02-24T21:37:45.027429Z",
     "shell.execute_reply": "2025-02-24T21:37:45.026536Z"
    },
    "papermill": {
     "duration": 0.086583,
     "end_time": "2025-02-24T21:37:45.029305",
     "exception": false,
     "start_time": "2025-02-24T21:37:44.942722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "57bcc1ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:37:45.185907Z",
     "iopub.status.busy": "2025-02-24T21:37:45.185158Z",
     "iopub.status.idle": "2025-02-24T21:37:45.192221Z",
     "shell.execute_reply": "2025-02-24T21:37:45.191167Z"
    },
    "papermill": {
     "duration": 0.08587,
     "end_time": "2025-02-24T21:37:45.193987",
     "exception": false,
     "start_time": "2025-02-24T21:37:45.108117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(250)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 10* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 10*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6aee2cd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:37:45.352289Z",
     "iopub.status.busy": "2025-02-24T21:37:45.351428Z",
     "iopub.status.idle": "2025-02-24T21:37:45.368984Z",
     "shell.execute_reply": "2025-02-24T21:37:45.368150Z"
    },
    "papermill": {
     "duration": 0.099588,
     "end_time": "2025-02-24T21:37:45.370967",
     "exception": false,
     "start_time": "2025-02-24T21:37:45.271379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 284.411804\n",
      "Train Loss: 285.094540\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "04e25032",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:37:45.537499Z",
     "iopub.status.busy": "2025-02-24T21:37:45.537100Z",
     "iopub.status.idle": "2025-02-24T21:37:45.552144Z",
     "shell.execute_reply": "2025-02-24T21:37:45.551150Z"
    },
    "papermill": {
     "duration": 0.104759,
     "end_time": "2025-02-24T21:37:45.554365",
     "exception": false,
     "start_time": "2025-02-24T21:37:45.449606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.022960, Loss_IC: 0.073470, loss_bc: 0.067246\n",
      "Train Loss: 0.163676\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d590845a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:37:45.737232Z",
     "iopub.status.busy": "2025-02-24T21:37:45.736744Z",
     "iopub.status.idle": "2025-02-24T21:37:46.105535Z",
     "shell.execute_reply": "2025-02-24T21:37:46.104433Z"
    },
    "papermill": {
     "duration": 0.475173,
     "end_time": "2025-02-24T21:37:46.107544",
     "exception": false,
     "start_time": "2025-02-24T21:37:45.632371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "28a69680",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:37:46.268485Z",
     "iopub.status.busy": "2025-02-24T21:37:46.268054Z",
     "iopub.status.idle": "2025-02-24T21:37:46.272295Z",
     "shell.execute_reply": "2025-02-24T21:37:46.271455Z"
    },
    "papermill": {
     "duration": 0.088606,
     "end_time": "2025-02-24T21:37:46.274089",
     "exception": false,
     "start_time": "2025-02-24T21:37:46.185483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "69bef188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T21:37:46.433473Z",
     "iopub.status.busy": "2025-02-24T21:37:46.433041Z",
     "iopub.status.idle": "2025-02-24T21:37:47.784884Z",
     "shell.execute_reply": "2025-02-24T21:37:47.783875Z"
    },
    "papermill": {
     "duration": 1.432079,
     "end_time": "2025-02-24T21:37:47.786905",
     "exception": false,
     "start_time": "2025-02-24T21:37:46.354826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Predicted u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Analytical u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 859.811726,
   "end_time": "2025-02-24T21:37:49.290075",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-24T21:23:29.478349",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
