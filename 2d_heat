{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84f7deb4",
   "metadata": {
    "papermill": {
     "duration": 0.0041,
     "end_time": "2025-03-02T17:35:27.438702",
     "exception": false,
     "start_time": "2025-03-02T17:35:27.434602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06387460",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T17:35:27.447011Z",
     "iopub.status.busy": "2025-03-02T17:35:27.446694Z",
     "iopub.status.idle": "2025-03-02T17:35:30.899418Z",
     "shell.execute_reply": "2025-03-02T17:35:30.898728Z"
    },
    "papermill": {
     "duration": 3.459154,
     "end_time": "2025-03-02T17:35:30.901393",
     "exception": false,
     "start_time": "2025-03-02T17:35:27.442239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e00b1fac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T17:35:30.911706Z",
     "iopub.status.busy": "2025-03-02T17:35:30.911311Z",
     "iopub.status.idle": "2025-03-02T17:35:30.926514Z",
     "shell.execute_reply": "2025-03-02T17:35:30.925744Z"
    },
    "papermill": {
     "duration": 0.021741,
     "end_time": "2025-03-02T17:35:30.928146",
     "exception": false,
     "start_time": "2025-03-02T17:35:30.906405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "98288fde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T17:35:30.936145Z",
     "iopub.status.busy": "2025-03-02T17:35:30.935888Z",
     "iopub.status.idle": "2025-03-02T17:35:30.939407Z",
     "shell.execute_reply": "2025-03-02T17:35:30.938653Z"
    },
    "papermill": {
     "duration": 0.009324,
     "end_time": "2025-03-02T17:35:30.941081",
     "exception": false,
     "start_time": "2025-03-02T17:35:30.931757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "73e7496e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T17:35:30.949019Z",
     "iopub.status.busy": "2025-03-02T17:35:30.948562Z",
     "iopub.status.idle": "2025-03-02T17:35:31.016870Z",
     "shell.execute_reply": "2025-03-02T17:35:31.015916Z"
    },
    "papermill": {
     "duration": 0.073969,
     "end_time": "2025-03-02T17:35:31.018556",
     "exception": false,
     "start_time": "2025-03-02T17:35:30.944587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7477b2e",
   "metadata": {
    "papermill": {
     "duration": 0.003372,
     "end_time": "2025-03-02T17:35:31.025678",
     "exception": false,
     "start_time": "2025-03-02T17:35:31.022306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4c5799a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T17:35:31.034186Z",
     "iopub.status.busy": "2025-03-02T17:35:31.033549Z",
     "iopub.status.idle": "2025-03-02T17:35:31.236436Z",
     "shell.execute_reply": "2025-03-02T17:35:31.235503Z"
    },
    "papermill": {
     "duration": 0.2096,
     "end_time": "2025-03-02T17:35:31.238748",
     "exception": false,
     "start_time": "2025-03-02T17:35:31.029148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9c8526a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T17:35:31.254122Z",
     "iopub.status.busy": "2025-03-02T17:35:31.253639Z",
     "iopub.status.idle": "2025-03-02T17:35:32.581319Z",
     "shell.execute_reply": "2025-03-02T17:35:32.580437Z"
    },
    "papermill": {
     "duration": 1.339015,
     "end_time": "2025-03-02T17:35:32.583512",
     "exception": false,
     "start_time": "2025-03-02T17:35:31.244497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "57672200",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T17:35:32.592918Z",
     "iopub.status.busy": "2025-03-02T17:35:32.592110Z",
     "iopub.status.idle": "2025-03-02T17:35:32.595927Z",
     "shell.execute_reply": "2025-03-02T17:35:32.595293Z"
    },
    "papermill": {
     "duration": 0.010081,
     "end_time": "2025-03-02T17:35:32.597470",
     "exception": false,
     "start_time": "2025-03-02T17:35:32.587389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2e683f8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T17:35:32.606211Z",
     "iopub.status.busy": "2025-03-02T17:35:32.605728Z",
     "iopub.status.idle": "2025-03-02T18:43:14.953013Z",
     "shell.execute_reply": "2025-03-02T18:43:14.951998Z"
    },
    "papermill": {
     "duration": 4062.354381,
     "end_time": "2025-03-02T18:43:14.955680",
     "exception": false,
     "start_time": "2025-03-02T17:35:32.601299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 500/500 [1:07:42<00:00,  8.12s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(500)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_min) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 4* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 20*loss_res + 5*loss_ic + 10*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "43ee9036",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T18:43:15.007532Z",
     "iopub.status.busy": "2025-03-02T18:43:15.007233Z",
     "iopub.status.idle": "2025-03-02T18:43:15.022122Z",
     "shell.execute_reply": "2025-03-02T18:43:15.021406Z"
    },
    "papermill": {
     "duration": 0.042222,
     "end_time": "2025-03-02T18:43:15.023905",
     "exception": false,
     "start_time": "2025-03-02T18:43:14.981683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.003013, Loss_IC: 0.069741, loss_bc: 0.028378\n",
      "Train Loss: 0.101133\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e009adc",
   "metadata": {
    "papermill": {
     "duration": 0.024224,
     "end_time": "2025-03-02T18:43:15.077158",
     "exception": false,
     "start_time": "2025-03-02T18:43:15.052934",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "26e4ddb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T18:43:15.127647Z",
     "iopub.status.busy": "2025-03-02T18:43:15.127351Z",
     "iopub.status.idle": "2025-03-02T18:43:15.130949Z",
     "shell.execute_reply": "2025-03-02T18:43:15.130165Z"
    },
    "papermill": {
     "duration": 0.031335,
     "end_time": "2025-03-02T18:43:15.132799",
     "exception": false,
     "start_time": "2025-03-02T18:43:15.101464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# #optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e0c27c68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T18:43:15.184832Z",
     "iopub.status.busy": "2025-03-02T18:43:15.184562Z",
     "iopub.status.idle": "2025-03-02T18:43:15.190045Z",
     "shell.execute_reply": "2025-03-02T18:43:15.189256Z"
    },
    "papermill": {
     "duration": 0.032073,
     "end_time": "2025-03-02T18:43:15.191548",
     "exception": false,
     "start_time": "2025-03-02T18:43:15.159475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(600)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e72a897a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T18:43:15.241605Z",
     "iopub.status.busy": "2025-03-02T18:43:15.241329Z",
     "iopub.status.idle": "2025-03-02T18:43:15.253761Z",
     "shell.execute_reply": "2025-03-02T18:43:15.253016Z"
    },
    "papermill": {
     "duration": 0.038969,
     "end_time": "2025-03-02T18:43:15.255217",
     "exception": false,
     "start_time": "2025-03-02T18:43:15.216248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 11.570428\n",
      "Train Loss: 12.253163\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d011c051",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T18:43:15.304507Z",
     "iopub.status.busy": "2025-03-02T18:43:15.304180Z",
     "iopub.status.idle": "2025-03-02T18:43:15.316434Z",
     "shell.execute_reply": "2025-03-02T18:43:15.315683Z"
    },
    "papermill": {
     "duration": 0.038561,
     "end_time": "2025-03-02T18:43:15.317860",
     "exception": false,
     "start_time": "2025-03-02T18:43:15.279299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.003013, Loss_IC: 0.069741, loss_bc: 0.028378\n",
      "Train Loss: 0.101133\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5e4c3dc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T18:43:15.367939Z",
     "iopub.status.busy": "2025-03-02T18:43:15.367693Z",
     "iopub.status.idle": "2025-03-02T18:43:15.696021Z",
     "shell.execute_reply": "2025-03-02T18:43:15.695112Z"
    },
    "papermill": {
     "duration": 0.355379,
     "end_time": "2025-03-02T18:43:15.697814",
     "exception": false,
     "start_time": "2025-03-02T18:43:15.342435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5764f463",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T18:43:15.749761Z",
     "iopub.status.busy": "2025-03-02T18:43:15.749472Z",
     "iopub.status.idle": "2025-03-02T18:43:15.753026Z",
     "shell.execute_reply": "2025-03-02T18:43:15.752389Z"
    },
    "papermill": {
     "duration": 0.030707,
     "end_time": "2025-03-02T18:43:15.754446",
     "exception": false,
     "start_time": "2025-03-02T18:43:15.723739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "99619c75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T18:43:15.805676Z",
     "iopub.status.busy": "2025-03-02T18:43:15.805398Z",
     "iopub.status.idle": "2025-03-02T18:43:16.627284Z",
     "shell.execute_reply": "2025-03-02T18:43:16.626415Z"
    },
    "papermill": {
     "duration": 0.849245,
     "end_time": "2025-03-02T18:43:16.628929",
     "exception": false,
     "start_time": "2025-03-02T18:43:15.779684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4073.002779,
   "end_time": "2025-03-02T18:43:17.877262",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-02T17:35:24.874483",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
