{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "060bf4d9",
   "metadata": {
    "papermill": {
     "duration": 0.004498,
     "end_time": "2025-03-10T00:02:11.109783",
     "exception": false,
     "start_time": "2025-03-10T00:02:11.105285",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "649c4c3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T00:02:11.119014Z",
     "iopub.status.busy": "2025-03-10T00:02:11.118232Z",
     "iopub.status.idle": "2025-03-10T00:02:14.539877Z",
     "shell.execute_reply": "2025-03-10T00:02:14.539180Z"
    },
    "papermill": {
     "duration": 3.428374,
     "end_time": "2025-03-10T00:02:14.541848",
     "exception": false,
     "start_time": "2025-03-10T00:02:11.113474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a0198db2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T00:02:14.551835Z",
     "iopub.status.busy": "2025-03-10T00:02:14.551460Z",
     "iopub.status.idle": "2025-03-10T00:02:14.566282Z",
     "shell.execute_reply": "2025-03-10T00:02:14.565749Z"
    },
    "papermill": {
     "duration": 0.021218,
     "end_time": "2025-03-10T00:02:14.567844",
     "exception": false,
     "start_time": "2025-03-10T00:02:14.546626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c0b221c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T00:02:14.576007Z",
     "iopub.status.busy": "2025-03-10T00:02:14.575749Z",
     "iopub.status.idle": "2025-03-10T00:02:14.579381Z",
     "shell.execute_reply": "2025-03-10T00:02:14.578700Z"
    },
    "papermill": {
     "duration": 0.009453,
     "end_time": "2025-03-10T00:02:14.580812",
     "exception": false,
     "start_time": "2025-03-10T00:02:14.571359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b58e5823",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T00:02:14.589942Z",
     "iopub.status.busy": "2025-03-10T00:02:14.589536Z",
     "iopub.status.idle": "2025-03-10T00:02:14.658557Z",
     "shell.execute_reply": "2025-03-10T00:02:14.657622Z"
    },
    "papermill": {
     "duration": 0.075573,
     "end_time": "2025-03-10T00:02:14.660361",
     "exception": false,
     "start_time": "2025-03-10T00:02:14.584788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36b78c54",
   "metadata": {
    "papermill": {
     "duration": 0.003392,
     "end_time": "2025-03-10T00:02:14.667572",
     "exception": false,
     "start_time": "2025-03-10T00:02:14.664180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3c9355cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T00:02:14.676120Z",
     "iopub.status.busy": "2025-03-10T00:02:14.675394Z",
     "iopub.status.idle": "2025-03-10T00:02:14.901835Z",
     "shell.execute_reply": "2025-03-10T00:02:14.901070Z"
    },
    "papermill": {
     "duration": 0.233071,
     "end_time": "2025-03-10T00:02:14.904157",
     "exception": false,
     "start_time": "2025-03-10T00:02:14.671086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0001,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7e106ad5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T00:02:14.916879Z",
     "iopub.status.busy": "2025-03-10T00:02:14.916415Z",
     "iopub.status.idle": "2025-03-10T00:02:16.203776Z",
     "shell.execute_reply": "2025-03-10T00:02:16.202945Z"
    },
    "papermill": {
     "duration": 1.296933,
     "end_time": "2025-03-10T00:02:16.205583",
     "exception": false,
     "start_time": "2025-03-10T00:02:14.908650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): Tanh()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): Tanh()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453589\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2cab6f10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T00:02:16.214531Z",
     "iopub.status.busy": "2025-03-10T00:02:16.213999Z",
     "iopub.status.idle": "2025-03-10T00:02:16.217611Z",
     "shell.execute_reply": "2025-03-10T00:02:16.216851Z"
    },
    "papermill": {
     "duration": 0.009675,
     "end_time": "2025-03-10T00:02:16.219180",
     "exception": false,
     "start_time": "2025-03-10T00:02:16.209505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "346c4818",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T00:02:16.227592Z",
     "iopub.status.busy": "2025-03-10T00:02:16.227345Z",
     "iopub.status.idle": "2025-03-10T01:13:54.201914Z",
     "shell.execute_reply": "2025-03-10T01:13:54.201023Z"
    },
    "papermill": {
     "duration": 4298.036322,
     "end_time": "2025-03-10T01:13:54.259178",
     "exception": false,
     "start_time": "2025-03-10T00:02:16.222856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1200 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1200/1200 [1:11:37<00:00,  3.58s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1200)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)  # PDE residual\n",
    "        loss_ic = torch.mean(pred_ic ** 2)  # Initial condition\n",
    "        loss_bc = (\n",
    "            torch.mean((u_bc_x_max) ** 2) +  # Neumann: du/dx(L, y, t) = 0\n",
    "            torch.mean((u_bc_y_min) ** 2) +  # Neumann: du/dy(x, 0, t) = 0\n",
    "            torch.mean((u_bc_y_max) ** 2) +  # Neumann: du/dy(x, L, t) = 0\n",
    "            10 * torch.mean((bc_x_min - 1) ** 2)  # Dirichlet: u(0, y, t) = 1\n",
    "        )\n",
    "\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 10*loss_res + 6*loss_ic + 1*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "05725470",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T01:13:54.368814Z",
     "iopub.status.busy": "2025-03-10T01:13:54.368050Z",
     "iopub.status.idle": "2025-03-10T01:13:54.387272Z",
     "shell.execute_reply": "2025-03-10T01:13:54.386461Z"
    },
    "papermill": {
     "duration": 0.075814,
     "end_time": "2025-03-10T01:13:54.388944",
     "exception": false,
     "start_time": "2025-03-10T01:13:54.313130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000322, Loss_IC: 0.016286, loss_bc: 0.059987\n",
      "Train Loss: 0.076595\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eca1c6fa",
   "metadata": {
    "papermill": {
     "duration": 0.091911,
     "end_time": "2025-03-10T01:13:54.534124",
     "exception": false,
     "start_time": "2025-03-10T01:13:54.442213",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c76b38f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T01:13:54.647054Z",
     "iopub.status.busy": "2025-03-10T01:13:54.646685Z",
     "iopub.status.idle": "2025-03-10T01:13:54.650573Z",
     "shell.execute_reply": "2025-03-10T01:13:54.649764Z"
    },
    "papermill": {
     "duration": 0.062661,
     "end_time": "2025-03-10T01:13:54.652301",
     "exception": false,
     "start_time": "2025-03-10T01:13:54.589640",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# #optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9f1f4822",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T01:13:54.763238Z",
     "iopub.status.busy": "2025-03-10T01:13:54.762766Z",
     "iopub.status.idle": "2025-03-10T01:13:54.770559Z",
     "shell.execute_reply": "2025-03-10T01:13:54.769596Z"
    },
    "papermill": {
     "duration": 0.065804,
     "end_time": "2025-03-10T01:13:54.772654",
     "exception": false,
     "start_time": "2025-03-10T01:13:54.706850",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(600)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a03e1418",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T01:13:54.902378Z",
     "iopub.status.busy": "2025-03-10T01:13:54.902062Z",
     "iopub.status.idle": "2025-03-10T01:13:54.915214Z",
     "shell.execute_reply": "2025-03-10T01:13:54.914433Z"
    },
    "papermill": {
     "duration": 0.07013,
     "end_time": "2025-03-10T01:13:54.916811",
     "exception": false,
     "start_time": "2025-03-10T01:13:54.846681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.014431, Loss_IC: 0.074143, loss_bc: 11.257880\n",
      "Train Loss: 11.346455\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "295369df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T01:13:55.026170Z",
     "iopub.status.busy": "2025-03-10T01:13:55.025505Z",
     "iopub.status.idle": "2025-03-10T01:13:55.038384Z",
     "shell.execute_reply": "2025-03-10T01:13:55.037645Z"
    },
    "papermill": {
     "duration": 0.068856,
     "end_time": "2025-03-10T01:13:55.039907",
     "exception": false,
     "start_time": "2025-03-10T01:13:54.971051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000322, Loss_IC: 0.016286, loss_bc: 0.059987\n",
      "Train Loss: 0.076595\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "16faff2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T01:13:55.148490Z",
     "iopub.status.busy": "2025-03-10T01:13:55.147793Z",
     "iopub.status.idle": "2025-03-10T01:13:55.475315Z",
     "shell.execute_reply": "2025-03-10T01:13:55.474440Z"
    },
    "papermill": {
     "duration": 0.383782,
     "end_time": "2025-03-10T01:13:55.477134",
     "exception": false,
     "start_time": "2025-03-10T01:13:55.093352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9c4a22d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T01:13:55.587259Z",
     "iopub.status.busy": "2025-03-10T01:13:55.586571Z",
     "iopub.status.idle": "2025-03-10T01:13:55.590154Z",
     "shell.execute_reply": "2025-03-10T01:13:55.589489Z"
    },
    "papermill": {
     "duration": 0.059765,
     "end_time": "2025-03-10T01:13:55.591641",
     "exception": false,
     "start_time": "2025-03-10T01:13:55.531876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "73e6ed3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-10T01:13:55.703318Z",
     "iopub.status.busy": "2025-03-10T01:13:55.702581Z",
     "iopub.status.idle": "2025-03-10T01:13:57.693634Z",
     "shell.execute_reply": "2025-03-10T01:13:57.692899Z"
    },
    "papermill": {
     "duration": 2.049054,
     "end_time": "2025-03-10T01:13:57.695512",
     "exception": false,
     "start_time": "2025-03-10T01:13:55.646458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana_neumann(x, y, t, alpha=0.4, L=1, n=1):\n",
    "    # Steady-state solution for the given boundary conditions\n",
    "    return 1 - x / L\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u_corrected = u_ana_neumann(res_test[:, 0], res_test[:, 1], t=1)\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u_corrected = u_corrected.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u_corrected[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Last time step\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat Analytical Solution t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical_t1.png')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4310.383345,
   "end_time": "2025-03-10T01:13:58.974118",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-10T00:02:08.590773",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
