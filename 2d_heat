{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b46c26a7",
   "metadata": {
    "papermill": {
     "duration": 0.004641,
     "end_time": "2025-04-01T14:58:03.124385",
     "exception": false,
     "start_time": "2025-04-01T14:58:03.119744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ffcf4607",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T14:58:03.133968Z",
     "iopub.status.busy": "2025-04-01T14:58:03.133281Z",
     "iopub.status.idle": "2025-04-01T14:58:06.624728Z",
     "shell.execute_reply": "2025-04-01T14:58:06.623993Z"
    },
    "papermill": {
     "duration": 3.498357,
     "end_time": "2025-04-01T14:58:06.626723",
     "exception": false,
     "start_time": "2025-04-01T14:58:03.128366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "158c10e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T14:58:06.638638Z",
     "iopub.status.busy": "2025-04-01T14:58:06.638259Z",
     "iopub.status.idle": "2025-04-01T14:58:06.653647Z",
     "shell.execute_reply": "2025-04-01T14:58:06.652878Z"
    },
    "papermill": {
     "duration": 0.023023,
     "end_time": "2025-04-01T14:58:06.655234",
     "exception": false,
     "start_time": "2025-04-01T14:58:06.632211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "970fc9bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T14:58:06.664569Z",
     "iopub.status.busy": "2025-04-01T14:58:06.663795Z",
     "iopub.status.idle": "2025-04-01T14:58:06.667644Z",
     "shell.execute_reply": "2025-04-01T14:58:06.666906Z"
    },
    "papermill": {
     "duration": 0.010083,
     "end_time": "2025-04-01T14:58:06.669183",
     "exception": false,
     "start_time": "2025-04-01T14:58:06.659100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f12cb5f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T14:58:06.678554Z",
     "iopub.status.busy": "2025-04-01T14:58:06.677806Z",
     "iopub.status.idle": "2025-04-01T14:58:06.684696Z",
     "shell.execute_reply": "2025-04-01T14:58:06.683854Z"
    },
    "papermill": {
     "duration": 0.01321,
     "end_time": "2025-04-01T14:58:06.686280",
     "exception": false,
     "start_time": "2025-04-01T14:58:06.673070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def get_data_3dV2(x_range, y_range, t_range, x_num, y_num, t_num):\n",
    "    # Input validation\n",
    "    assert x_num > 1 and y_num > 1 and t_num > 1, \"All nums must be â‰¥ 2\"\n",
    "    \n",
    "    # Generate grid using linspace + meshgrid\n",
    "    x = np.linspace(*x_range, x_num)\n",
    "    y = np.linspace(*y_range, y_num)\n",
    "    t = np.linspace(*t_range, t_num)\n",
    "    \n",
    "    # Create full grid with \"ij\" indexing\n",
    "    x_mesh, y_mesh, t_mesh = np.meshgrid(x, y, t, indexing='ij')\n",
    "    data = np.stack((x_mesh, y_mesh, t_mesh), axis=-1)  # (x_num, y_num, t_num, 3)\n",
    "    \n",
    "    # Extract boundaries (match your original code expectations)\n",
    "    b_left = data[0, :, :, :].reshape(-1, 3)    # x=x_min (all y/t)\n",
    "    b_right = data[-1, :, :, :].reshape(-1, 3)   # x=x_max\n",
    "    b_lower = data[:, 0, :, :].reshape(-1, 3)    # y=y_min (all x/t)\n",
    "    b_upper = data[:, -1, :, :].reshape(-1, 3)   # y=y_max\n",
    "    \n",
    "    # Return format matching your original code (no initial/final)\n",
    "    return (\n",
    "        data.reshape(-1, 3),  # All points (N, 3)\n",
    "        b_left, b_right, b_upper, b_lower\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "12cb8e12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T14:58:06.695620Z",
     "iopub.status.busy": "2025-04-01T14:58:06.695005Z",
     "iopub.status.idle": "2025-04-01T14:58:06.761422Z",
     "shell.execute_reply": "2025-04-01T14:58:06.760415Z"
    },
    "papermill": {
     "duration": 0.073096,
     "end_time": "2025-04-01T14:58:06.763328",
     "exception": false,
     "start_time": "2025-04-01T14:58:06.690232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90163aaa",
   "metadata": {
    "papermill": {
     "duration": 0.003829,
     "end_time": "2025-04-01T14:58:06.771602",
     "exception": false,
     "start_time": "2025-04-01T14:58:06.767773",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1b1f3e27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T14:58:06.781031Z",
     "iopub.status.busy": "2025-04-01T14:58:06.780327Z",
     "iopub.status.idle": "2025-04-01T14:58:06.999527Z",
     "shell.execute_reply": "2025-04-01T14:58:06.998586Z"
    },
    "papermill": {
     "duration": 0.226525,
     "end_time": "2025-04-01T14:58:07.001964",
     "exception": false,
     "start_time": "2025-04-01T14:58:06.775439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3dV2([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "64a2690c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T14:58:07.015236Z",
     "iopub.status.busy": "2025-04-01T14:58:07.014328Z",
     "iopub.status.idle": "2025-04-01T14:58:08.389917Z",
     "shell.execute_reply": "2025-04-01T14:58:08.388850Z"
    },
    "papermill": {
     "duration": 1.384195,
     "end_time": "2025-04-01T14:58:08.391992",
     "exception": false,
     "start_time": "2025-04-01T14:58:07.007797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fae531e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T14:58:08.401474Z",
     "iopub.status.busy": "2025-04-01T14:58:08.401078Z",
     "iopub.status.idle": "2025-04-01T14:58:08.404922Z",
     "shell.execute_reply": "2025-04-01T14:58:08.404087Z"
    },
    "papermill": {
     "duration": 0.010435,
     "end_time": "2025-04-01T14:58:08.406656",
     "exception": false,
     "start_time": "2025-04-01T14:58:08.396221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "29048bee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T14:58:08.415691Z",
     "iopub.status.busy": "2025-04-01T14:58:08.415452Z",
     "iopub.status.idle": "2025-04-01T17:19:47.351562Z",
     "shell.execute_reply": "2025-04-01T17:19:47.350485Z"
    },
    "papermill": {
     "duration": 8498.942884,
     "end_time": "2025-04-01T17:19:47.353478",
     "exception": false,
     "start_time": "2025-04-01T14:58:08.410594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1500/1500 [2:21:38<00:00,  5.67s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "\n",
    "for i in tqdm(range(1500)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, \n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True,\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, \n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True,\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)  # PDE residual\n",
    "        u_ic_true = 1 - x_res / L\n",
    "        loss_ic = torch.mean((pred_ic - u_ic_true) ** 2) # Initial condition\n",
    "        loss_bc = (\n",
    "            torch.mean((u_bc_x_max) ** 2) +  # Neumann: du/dx(L, y, t) = 0\n",
    "            torch.mean((u_bc_y_min) ** 2) +  # Neumann: du/dy(x, 0, t) = 0\n",
    "            torch.mean((u_bc_y_max) ** 2) +  # Neumann: du/dy(x, L, t) = 0\n",
    "            10 * torch.mean((bc_x_min - 1) ** 2)  # Dirichlet: u(0, y, t) = 1\n",
    "        )\n",
    "\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 10.0 * loss_res + 100.0 * loss_ic + 1000.0 * loss_bc\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "54dc933d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T17:19:47.493098Z",
     "iopub.status.busy": "2025-04-01T17:19:47.492128Z",
     "iopub.status.idle": "2025-04-01T17:19:47.507604Z",
     "shell.execute_reply": "2025-04-01T17:19:47.506716Z"
    },
    "papermill": {
     "duration": 0.086579,
     "end_time": "2025-04-01T17:19:47.509360",
     "exception": false,
     "start_time": "2025-04-01T17:19:47.422781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000444, Loss_IC: 0.000157, loss_bc: 0.000002\n",
      "Train Loss: 0.000604\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c29536a",
   "metadata": {
    "papermill": {
     "duration": 0.0676,
     "end_time": "2025-04-01T17:19:47.651705",
     "exception": false,
     "start_time": "2025-04-01T17:19:47.584105",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "540418d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T17:19:47.788248Z",
     "iopub.status.busy": "2025-04-01T17:19:47.787915Z",
     "iopub.status.idle": "2025-04-01T17:19:47.791801Z",
     "shell.execute_reply": "2025-04-01T17:19:47.791100Z"
    },
    "papermill": {
     "duration": 0.073581,
     "end_time": "2025-04-01T17:19:47.793309",
     "exception": false,
     "start_time": "2025-04-01T17:19:47.719728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# #optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "95f66c8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T17:19:47.931333Z",
     "iopub.status.busy": "2025-04-01T17:19:47.931028Z",
     "iopub.status.idle": "2025-04-01T17:19:47.936946Z",
     "shell.execute_reply": "2025-04-01T17:19:47.936181Z"
    },
    "papermill": {
     "duration": 0.077287,
     "end_time": "2025-04-01T17:19:47.938554",
     "exception": false,
     "start_time": "2025-04-01T17:19:47.861267",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(600)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4358df61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T17:19:48.074733Z",
     "iopub.status.busy": "2025-04-01T17:19:48.074376Z",
     "iopub.status.idle": "2025-04-01T17:19:48.087757Z",
     "shell.execute_reply": "2025-04-01T17:19:48.086847Z"
    },
    "papermill": {
     "duration": 0.083767,
     "end_time": "2025-04-01T17:19:48.089369",
     "exception": false,
     "start_time": "2025-04-01T17:19:48.005602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 1.772397, loss_bc: 28.643003\n",
      "Train Loss: 30.439373\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "35bf78d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T17:19:48.225674Z",
     "iopub.status.busy": "2025-04-01T17:19:48.224816Z",
     "iopub.status.idle": "2025-04-01T17:19:48.237948Z",
     "shell.execute_reply": "2025-04-01T17:19:48.237052Z"
    },
    "papermill": {
     "duration": 0.082774,
     "end_time": "2025-04-01T17:19:48.239504",
     "exception": false,
     "start_time": "2025-04-01T17:19:48.156730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000444, Loss_IC: 0.000157, loss_bc: 0.000002\n",
      "Train Loss: 0.000604\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f868a77b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T17:19:48.374693Z",
     "iopub.status.busy": "2025-04-01T17:19:48.374305Z",
     "iopub.status.idle": "2025-04-01T17:19:48.730611Z",
     "shell.execute_reply": "2025-04-01T17:19:48.729641Z"
    },
    "papermill": {
     "duration": 0.426047,
     "end_time": "2025-04-01T17:19:48.732422",
     "exception": false,
     "start_time": "2025-04-01T17:19:48.306375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7003737e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T17:19:48.868558Z",
     "iopub.status.busy": "2025-04-01T17:19:48.868194Z",
     "iopub.status.idle": "2025-04-01T17:19:48.872535Z",
     "shell.execute_reply": "2025-04-01T17:19:48.871674Z"
    },
    "papermill": {
     "duration": 0.074122,
     "end_time": "2025-04-01T17:19:48.874105",
     "exception": false,
     "start_time": "2025-04-01T17:19:48.799983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1cc0ad94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-01T17:19:49.010606Z",
     "iopub.status.busy": "2025-04-01T17:19:49.009919Z",
     "iopub.status.idle": "2025-04-01T17:19:50.397652Z",
     "shell.execute_reply": "2025-04-01T17:19:50.396584Z"
    },
    "papermill": {
     "duration": 1.457838,
     "end_time": "2025-04-01T17:19:50.399531",
     "exception": false,
     "start_time": "2025-04-01T17:19:48.941693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana_neumann(x, y, t, alpha=0.4, L=1, n=1):\n",
    "    # Steady-state solution for the given boundary conditions\n",
    "    return 1 - x / L\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u_corrected = u_ana_neumann(res_test[:, 0], res_test[:, 1], t=1)\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u_corrected = u_corrected.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u_corrected[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Last time step\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat Analytical Solution t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical_t1.png')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8511.26217,
   "end_time": "2025-04-01T17:19:51.803922",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-01T14:58:00.541752",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
