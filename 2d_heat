{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d5827db",
   "metadata": {
    "papermill": {
     "duration": 0.003767,
     "end_time": "2025-02-03T16:13:59.334071",
     "exception": false,
     "start_time": "2025-02-03T16:13:59.330304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4c58d9dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T16:13:59.341960Z",
     "iopub.status.busy": "2025-02-03T16:13:59.341599Z",
     "iopub.status.idle": "2025-02-03T16:14:02.446400Z",
     "shell.execute_reply": "2025-02-03T16:14:02.445739Z"
    },
    "papermill": {
     "duration": 3.110909,
     "end_time": "2025-02-03T16:14:02.448366",
     "exception": false,
     "start_time": "2025-02-03T16:13:59.337457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "683da65d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T16:14:02.455720Z",
     "iopub.status.busy": "2025-02-03T16:14:02.455307Z",
     "iopub.status.idle": "2025-02-03T16:14:02.472154Z",
     "shell.execute_reply": "2025-02-03T16:14:02.471324Z"
    },
    "papermill": {
     "duration": 0.022344,
     "end_time": "2025-02-03T16:14:02.473854",
     "exception": false,
     "start_time": "2025-02-03T16:14:02.451510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dfc20862",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T16:14:02.481034Z",
     "iopub.status.busy": "2025-02-03T16:14:02.480515Z",
     "iopub.status.idle": "2025-02-03T16:14:02.484286Z",
     "shell.execute_reply": "2025-02-03T16:14:02.483471Z"
    },
    "papermill": {
     "duration": 0.009045,
     "end_time": "2025-02-03T16:14:02.485924",
     "exception": false,
     "start_time": "2025-02-03T16:14:02.476879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cd3c3816",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T16:14:02.492980Z",
     "iopub.status.busy": "2025-02-03T16:14:02.492275Z",
     "iopub.status.idle": "2025-02-03T16:14:02.560941Z",
     "shell.execute_reply": "2025-02-03T16:14:02.560081Z"
    },
    "papermill": {
     "duration": 0.074184,
     "end_time": "2025-02-03T16:14:02.562975",
     "exception": false,
     "start_time": "2025-02-03T16:14:02.488791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ada67ff4",
   "metadata": {
    "papermill": {
     "duration": 0.002855,
     "end_time": "2025-02-03T16:14:02.569130",
     "exception": false,
     "start_time": "2025-02-03T16:14:02.566275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4eeb35f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T16:14:02.576158Z",
     "iopub.status.busy": "2025-02-03T16:14:02.575873Z",
     "iopub.status.idle": "2025-02-03T16:14:02.777810Z",
     "shell.execute_reply": "2025-02-03T16:14:02.777034Z"
    },
    "papermill": {
     "duration": 0.208101,
     "end_time": "2025-02-03T16:14:02.780154",
     "exception": false,
     "start_time": "2025-02-03T16:14:02.572053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0001,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "790d51c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T16:14:02.788386Z",
     "iopub.status.busy": "2025-02-03T16:14:02.787640Z",
     "iopub.status.idle": "2025-02-03T16:14:04.062025Z",
     "shell.execute_reply": "2025-02-03T16:14:04.060937Z"
    },
    "papermill": {
     "duration": 1.280449,
     "end_time": "2025-02-03T16:14:04.063926",
     "exception": false,
     "start_time": "2025-02-03T16:14:02.783477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9114b234",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T16:14:04.071709Z",
     "iopub.status.busy": "2025-02-03T16:14:04.071313Z",
     "iopub.status.idle": "2025-02-03T16:14:04.075052Z",
     "shell.execute_reply": "2025-02-03T16:14:04.074173Z"
    },
    "papermill": {
     "duration": 0.00945,
     "end_time": "2025-02-03T16:14:04.076689",
     "exception": false,
     "start_time": "2025-02-03T16:14:04.067239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e0d7b643",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T16:14:04.083985Z",
     "iopub.status.busy": "2025-02-03T16:14:04.083711Z",
     "iopub.status.idle": "2025-02-03T17:39:34.023503Z",
     "shell.execute_reply": "2025-02-03T17:39:34.022498Z"
    },
    "papermill": {
     "duration": 5129.946071,
     "end_time": "2025-02-03T17:39:34.025820",
     "exception": false,
     "start_time": "2025-02-03T16:14:04.079749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1200 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1200/1200 [1:25:29<00:00,  4.27s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1200)):\n",
    "    k+=1\n",
    "\n",
    "    \n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "        \n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        \n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((bc_x_min-1) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "        teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 10*loss_res + 100*loss_ic + 8*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "71d3704e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T17:39:34.135866Z",
     "iopub.status.busy": "2025-02-03T17:39:34.135505Z",
     "iopub.status.idle": "2025-02-03T17:39:34.139286Z",
     "shell.execute_reply": "2025-02-03T17:39:34.138509Z"
    },
    "papermill": {
     "duration": 0.060464,
     "end_time": "2025-02-03T17:39:34.140955",
     "exception": false,
     "start_time": "2025-02-03T17:39:34.080491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(f\"Length of loss_track: {(loss_track)}\")\n",
    "#print(loss_track)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9e2724e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T17:39:34.248863Z",
     "iopub.status.busy": "2025-02-03T17:39:34.248337Z",
     "iopub.status.idle": "2025-02-03T17:39:34.264065Z",
     "shell.execute_reply": "2025-02-03T17:39:34.263125Z"
    },
    "papermill": {
     "duration": 0.071276,
     "end_time": "2025-02-03T17:39:34.265655",
     "exception": false,
     "start_time": "2025-02-03T17:39:34.194379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000077, Loss_IC: 0.000244, loss_bc: 0.036907\n",
      "Train Loss: 0.037229\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "28276517",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T17:39:34.374418Z",
     "iopub.status.busy": "2025-02-03T17:39:34.374016Z",
     "iopub.status.idle": "2025-02-03T17:39:34.699809Z",
     "shell.execute_reply": "2025-02-03T17:39:34.698936Z"
    },
    "papermill": {
     "duration": 0.383333,
     "end_time": "2025-02-03T17:39:34.701652",
     "exception": false,
     "start_time": "2025-02-03T17:39:34.318319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0dfd507f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T17:39:34.811852Z",
     "iopub.status.busy": "2025-02-03T17:39:34.811208Z",
     "iopub.status.idle": "2025-02-03T17:39:34.814800Z",
     "shell.execute_reply": "2025-02-03T17:39:34.814009Z"
    },
    "papermill": {
     "duration": 0.059774,
     "end_time": "2025-02-03T17:39:34.816348",
     "exception": false,
     "start_time": "2025-02-03T17:39:34.756574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a52f815e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-03T17:39:34.927074Z",
     "iopub.status.busy": "2025-02-03T17:39:34.926297Z",
     "iopub.status.idle": "2025-02-03T17:39:36.064245Z",
     "shell.execute_reply": "2025-02-03T17:39:36.063441Z"
    },
    "papermill": {
     "duration": 1.196704,
     "end_time": "2025-02-03T17:39:36.066657",
     "exception": false,
     "start_time": "2025-02-03T17:39:34.869953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Predicted u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Analytical u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5141.707365,
   "end_time": "2025-02-03T17:39:38.549519",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-03T16:13:56.842154",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
