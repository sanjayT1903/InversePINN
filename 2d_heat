{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cad3a782",
   "metadata": {
    "papermill": {
     "duration": 0.004202,
     "end_time": "2025-03-02T20:03:26.687907",
     "exception": false,
     "start_time": "2025-03-02T20:03:26.683705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8256ec7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:03:26.696050Z",
     "iopub.status.busy": "2025-03-02T20:03:26.695735Z",
     "iopub.status.idle": "2025-03-02T20:03:30.469870Z",
     "shell.execute_reply": "2025-03-02T20:03:30.468924Z"
    },
    "papermill": {
     "duration": 3.78179,
     "end_time": "2025-03-02T20:03:30.473274",
     "exception": false,
     "start_time": "2025-03-02T20:03:26.691484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5155089a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:03:30.485170Z",
     "iopub.status.busy": "2025-03-02T20:03:30.484776Z",
     "iopub.status.idle": "2025-03-02T20:03:30.503579Z",
     "shell.execute_reply": "2025-03-02T20:03:30.502775Z"
    },
    "papermill": {
     "duration": 0.025936,
     "end_time": "2025-03-02T20:03:30.505230",
     "exception": false,
     "start_time": "2025-03-02T20:03:30.479294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bd9448af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:03:30.513484Z",
     "iopub.status.busy": "2025-03-02T20:03:30.513222Z",
     "iopub.status.idle": "2025-03-02T20:03:30.517171Z",
     "shell.execute_reply": "2025-03-02T20:03:30.516285Z"
    },
    "papermill": {
     "duration": 0.009796,
     "end_time": "2025-03-02T20:03:30.518754",
     "exception": false,
     "start_time": "2025-03-02T20:03:30.508958",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c059c3f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:03:30.526731Z",
     "iopub.status.busy": "2025-03-02T20:03:30.526471Z",
     "iopub.status.idle": "2025-03-02T20:03:30.588736Z",
     "shell.execute_reply": "2025-03-02T20:03:30.587832Z"
    },
    "papermill": {
     "duration": 0.068393,
     "end_time": "2025-03-02T20:03:30.590675",
     "exception": false,
     "start_time": "2025-03-02T20:03:30.522282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "094099ee",
   "metadata": {
    "papermill": {
     "duration": 0.003335,
     "end_time": "2025-03-02T20:03:30.597792",
     "exception": false,
     "start_time": "2025-03-02T20:03:30.594457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b9e5ee0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:03:30.605780Z",
     "iopub.status.busy": "2025-03-02T20:03:30.605508Z",
     "iopub.status.idle": "2025-03-02T20:03:30.837932Z",
     "shell.execute_reply": "2025-03-02T20:03:30.836969Z"
    },
    "papermill": {
     "duration": 0.239085,
     "end_time": "2025-03-02T20:03:30.840350",
     "exception": false,
     "start_time": "2025-03-02T20:03:30.601265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0bd8d1aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:03:30.851569Z",
     "iopub.status.busy": "2025-03-02T20:03:30.851283Z",
     "iopub.status.idle": "2025-03-02T20:03:32.160066Z",
     "shell.execute_reply": "2025-03-02T20:03:32.158994Z"
    },
    "papermill": {
     "duration": 1.316893,
     "end_time": "2025-03-02T20:03:32.162406",
     "exception": false,
     "start_time": "2025-03-02T20:03:30.845513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e53910ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:03:32.171177Z",
     "iopub.status.busy": "2025-03-02T20:03:32.170769Z",
     "iopub.status.idle": "2025-03-02T20:03:32.174279Z",
     "shell.execute_reply": "2025-03-02T20:03:32.173500Z"
    },
    "papermill": {
     "duration": 0.009669,
     "end_time": "2025-03-02T20:03:32.175902",
     "exception": false,
     "start_time": "2025-03-02T20:03:32.166233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9db123b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:03:32.184189Z",
     "iopub.status.busy": "2025-03-02T20:03:32.183875Z",
     "iopub.status.idle": "2025-03-02T20:17:24.410644Z",
     "shell.execute_reply": "2025-03-02T20:17:24.409678Z"
    },
    "papermill": {
     "duration": 832.233356,
     "end_time": "2025-03-02T20:17:24.412797",
     "exception": false,
     "start_time": "2025-03-02T20:03:32.179441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1500/1500 [13:52<00:00,  1.80it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1500)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc =  torch.mean((u_bc_x_min) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 4* torch.mean((bc_y_max-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 40*loss_res + 5*loss_ic + 10*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "34712931",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:17:24.555112Z",
     "iopub.status.busy": "2025-03-02T20:17:24.554783Z",
     "iopub.status.idle": "2025-03-02T20:17:24.569964Z",
     "shell.execute_reply": "2025-03-02T20:17:24.568948Z"
    },
    "papermill": {
     "duration": 0.08428,
     "end_time": "2025-03-02T20:17:24.571725",
     "exception": false,
     "start_time": "2025-03-02T20:17:24.487445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000679, Loss_IC: 0.067212, loss_bc: 0.010168\n",
      "Train Loss: 0.078059\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f23b609",
   "metadata": {
    "papermill": {
     "duration": 0.064424,
     "end_time": "2025-03-02T20:17:24.705104",
     "exception": false,
     "start_time": "2025-03-02T20:17:24.640680",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b72d1020",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:17:24.835955Z",
     "iopub.status.busy": "2025-03-02T20:17:24.835650Z",
     "iopub.status.idle": "2025-03-02T20:17:24.839167Z",
     "shell.execute_reply": "2025-03-02T20:17:24.838458Z"
    },
    "papermill": {
     "duration": 0.070803,
     "end_time": "2025-03-02T20:17:24.840710",
     "exception": false,
     "start_time": "2025-03-02T20:17:24.769907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# #optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "01414d81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:17:24.972306Z",
     "iopub.status.busy": "2025-03-02T20:17:24.972000Z",
     "iopub.status.idle": "2025-03-02T20:17:24.977617Z",
     "shell.execute_reply": "2025-03-02T20:17:24.976887Z"
    },
    "papermill": {
     "duration": 0.073344,
     "end_time": "2025-03-02T20:17:24.979046",
     "exception": false,
     "start_time": "2025-03-02T20:17:24.905702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(600)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b637f715",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:17:25.111191Z",
     "iopub.status.busy": "2025-03-02T20:17:25.110868Z",
     "iopub.status.idle": "2025-03-02T20:17:25.124354Z",
     "shell.execute_reply": "2025-03-02T20:17:25.123500Z"
    },
    "papermill": {
     "duration": 0.081829,
     "end_time": "2025-03-02T20:17:25.125876",
     "exception": false,
     "start_time": "2025-03-02T20:17:25.044047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 14.882813\n",
      "Train Loss: 15.565549\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "26e3bd08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:17:25.259163Z",
     "iopub.status.busy": "2025-03-02T20:17:25.258855Z",
     "iopub.status.idle": "2025-03-02T20:17:25.271793Z",
     "shell.execute_reply": "2025-03-02T20:17:25.270888Z"
    },
    "papermill": {
     "duration": 0.081193,
     "end_time": "2025-03-02T20:17:25.273398",
     "exception": false,
     "start_time": "2025-03-02T20:17:25.192205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000679, Loss_IC: 0.067212, loss_bc: 0.010168\n",
      "Train Loss: 0.078059\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b24ba354",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:17:25.416373Z",
     "iopub.status.busy": "2025-03-02T20:17:25.416021Z",
     "iopub.status.idle": "2025-03-02T20:17:25.740021Z",
     "shell.execute_reply": "2025-03-02T20:17:25.739266Z"
    },
    "papermill": {
     "duration": 0.39312,
     "end_time": "2025-03-02T20:17:25.742127",
     "exception": false,
     "start_time": "2025-03-02T20:17:25.349007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "890ffbff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:17:25.876623Z",
     "iopub.status.busy": "2025-03-02T20:17:25.876336Z",
     "iopub.status.idle": "2025-03-02T20:17:25.879816Z",
     "shell.execute_reply": "2025-03-02T20:17:25.879112Z"
    },
    "papermill": {
     "duration": 0.072497,
     "end_time": "2025-03-02T20:17:25.881423",
     "exception": false,
     "start_time": "2025-03-02T20:17:25.808926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b3476742",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:17:26.014183Z",
     "iopub.status.busy": "2025-03-02T20:17:26.013868Z",
     "iopub.status.idle": "2025-03-02T20:17:27.044923Z",
     "shell.execute_reply": "2025-03-02T20:17:27.044087Z"
    },
    "papermill": {
     "duration": 1.098919,
     "end_time": "2025-03-02T20:17:27.046636",
     "exception": false,
     "start_time": "2025-03-02T20:17:25.947717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 844.230959,
   "end_time": "2025-03-02T20:17:28.436855",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-02T20:03:24.205896",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
