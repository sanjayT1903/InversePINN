{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a033ac80",
   "metadata": {
    "papermill": {
     "duration": 0.004309,
     "end_time": "2025-04-03T03:09:18.484001",
     "exception": false,
     "start_time": "2025-04-03T03:09:18.479692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "009928e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T03:09:18.493185Z",
     "iopub.status.busy": "2025-04-03T03:09:18.492541Z",
     "iopub.status.idle": "2025-04-03T03:09:22.076987Z",
     "shell.execute_reply": "2025-04-03T03:09:22.076017Z"
    },
    "papermill": {
     "duration": 3.591332,
     "end_time": "2025-04-03T03:09:22.079094",
     "exception": false,
     "start_time": "2025-04-03T03:09:18.487762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2a7aa8e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T03:09:22.088165Z",
     "iopub.status.busy": "2025-04-03T03:09:22.087693Z",
     "iopub.status.idle": "2025-04-03T03:09:22.102592Z",
     "shell.execute_reply": "2025-04-03T03:09:22.101967Z"
    },
    "papermill": {
     "duration": 0.021054,
     "end_time": "2025-04-03T03:09:22.104118",
     "exception": false,
     "start_time": "2025-04-03T03:09:22.083064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bc15864a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T03:09:22.112918Z",
     "iopub.status.busy": "2025-04-03T03:09:22.112404Z",
     "iopub.status.idle": "2025-04-03T03:09:22.116261Z",
     "shell.execute_reply": "2025-04-03T03:09:22.115455Z"
    },
    "papermill": {
     "duration": 0.009932,
     "end_time": "2025-04-03T03:09:22.117753",
     "exception": false,
     "start_time": "2025-04-03T03:09:22.107821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a3223479",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T03:09:22.125846Z",
     "iopub.status.busy": "2025-04-03T03:09:22.125568Z",
     "iopub.status.idle": "2025-04-03T03:09:22.131338Z",
     "shell.execute_reply": "2025-04-03T03:09:22.130676Z"
    },
    "papermill": {
     "duration": 0.011406,
     "end_time": "2025-04-03T03:09:22.132756",
     "exception": false,
     "start_time": "2025-04-03T03:09:22.121350",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def get_data_3dV2(x_range, y_range, t_range, x_num, y_num, t_num):\n",
    "    # Input validation\n",
    "    assert x_num > 1 and y_num > 1 and t_num > 1, \"All nums must be â‰¥ 2\"\n",
    "    \n",
    "    # Generate grid using linspace + meshgrid\n",
    "    x = np.linspace(*x_range, x_num)\n",
    "    y = np.linspace(*y_range, y_num)\n",
    "    t = np.linspace(*t_range, t_num)\n",
    "    \n",
    "    # Create full grid with \"ij\" indexing\n",
    "    x_mesh, y_mesh, t_mesh = np.meshgrid(x, y, t, indexing='ij')\n",
    "    data = np.stack((x_mesh, y_mesh, t_mesh), axis=-1)  # (x_num, y_num, t_num, 3)\n",
    "    \n",
    "    # Extract boundaries (match your original code expectations)\n",
    "    b_left = data[0, :, :, :].reshape(-1, 3)    # x=x_min (all y/t)\n",
    "    b_right = data[-1, :, :, :].reshape(-1, 3)   # x=x_max\n",
    "    b_lower = data[:, 0, :, :].reshape(-1, 3)    # y=y_min (all x/t)\n",
    "    b_upper = data[:, -1, :, :].reshape(-1, 3)   # y=y_max\n",
    "    \n",
    "    # Return format matching your original code (no initial/final)\n",
    "    return (\n",
    "        data.reshape(-1, 3),  # All points (N, 3)\n",
    "        b_left, b_right, b_upper, b_lower\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1643abc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T03:09:22.140695Z",
     "iopub.status.busy": "2025-04-03T03:09:22.140427Z",
     "iopub.status.idle": "2025-04-03T03:09:22.222253Z",
     "shell.execute_reply": "2025-04-03T03:09:22.221353Z"
    },
    "papermill": {
     "duration": 0.087725,
     "end_time": "2025-04-03T03:09:22.224006",
     "exception": false,
     "start_time": "2025-04-03T03:09:22.136281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56cca056",
   "metadata": {
    "papermill": {
     "duration": 0.00351,
     "end_time": "2025-04-03T03:09:22.231425",
     "exception": false,
     "start_time": "2025-04-03T03:09:22.227915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8e895b9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T03:09:22.240288Z",
     "iopub.status.busy": "2025-04-03T03:09:22.239598Z",
     "iopub.status.idle": "2025-04-03T03:09:22.463809Z",
     "shell.execute_reply": "2025-04-03T03:09:22.462399Z"
    },
    "papermill": {
     "duration": 0.231742,
     "end_time": "2025-04-03T03:09:22.466870",
     "exception": false,
     "start_time": "2025-04-03T03:09:22.235128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3dV2([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "32c18a08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T03:09:22.482458Z",
     "iopub.status.busy": "2025-04-03T03:09:22.481683Z",
     "iopub.status.idle": "2025-04-03T03:09:23.746877Z",
     "shell.execute_reply": "2025-04-03T03:09:23.745916Z"
    },
    "papermill": {
     "duration": 1.273664,
     "end_time": "2025-04-03T03:09:23.748777",
     "exception": false,
     "start_time": "2025-04-03T03:09:22.475113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "22b931ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T03:09:23.758262Z",
     "iopub.status.busy": "2025-04-03T03:09:23.757624Z",
     "iopub.status.idle": "2025-04-03T03:09:23.761419Z",
     "shell.execute_reply": "2025-04-03T03:09:23.760666Z"
    },
    "papermill": {
     "duration": 0.009946,
     "end_time": "2025-04-03T03:09:23.762909",
     "exception": false,
     "start_time": "2025-04-03T03:09:23.752963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c4549cb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T03:09:23.771470Z",
     "iopub.status.busy": "2025-04-03T03:09:23.771214Z",
     "iopub.status.idle": "2025-04-03T04:29:03.655681Z",
     "shell.execute_reply": "2025-04-03T04:29:03.654859Z"
    },
    "papermill": {
     "duration": 4779.890877,
     "end_time": "2025-04-03T04:29:03.657497",
     "exception": false,
     "start_time": "2025-04-03T03:09:23.766620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1000 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1000/1000 [1:19:39<00:00,  4.78s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "\n",
    "for i in tqdm(range(1000)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, \n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True,\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, \n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True,\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)  # PDE residual\n",
    "        u_ic_true = 0\n",
    "        loss_ic = torch.mean((pred_ic - u_ic_true) ** 2) # Initial condition\n",
    "        mask_t_positive = (t_left > 0).squeeze()  # True for t > 0\n",
    "\n",
    "        # Compute loss only for t > 0\n",
    "        if mask_t_positive.any():\n",
    "            loss_dirichlet = 10 * torch.mean((bc_x_min[mask_t_positive] - 1) ** 2)\n",
    "        else:\n",
    "            loss_dirichlet = 0.0  # No loss if no t > 0 in this batch\n",
    "        \n",
    "        loss_bc = (\n",
    "            torch.mean((u_bc_x_max) ** 2) +  # Neumann: x=L\n",
    "            torch.mean((u_bc_y_min) ** 2) +  # Neumann: y=0\n",
    "            torch.mean((u_bc_y_max) ** 2) +  # Neumann: y=L\n",
    "            loss_dirichlet  # Dirichlet: x=0 (t > 0 only)\n",
    "        )\n",
    "\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 10.0 * loss_res + 100.0 * loss_ic + 1000.0 * loss_bc\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d55b4356",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T04:29:03.757422Z",
     "iopub.status.busy": "2025-04-03T04:29:03.756745Z",
     "iopub.status.idle": "2025-04-03T04:29:03.772140Z",
     "shell.execute_reply": "2025-04-03T04:29:03.771331Z"
    },
    "papermill": {
     "duration": 0.063608,
     "end_time": "2025-04-03T04:29:03.773723",
     "exception": false,
     "start_time": "2025-04-03T04:29:03.710115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.004179, Loss_IC: 0.041743, loss_bc: 0.000122\n",
      "Train Loss: 0.046044\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66a5ce67",
   "metadata": {
    "papermill": {
     "duration": 0.045205,
     "end_time": "2025-04-03T04:29:03.864377",
     "exception": false,
     "start_time": "2025-04-03T04:29:03.819172",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "162aeef8",
   "metadata": {
    "papermill": {
     "duration": 0.044756,
     "end_time": "2025-04-03T04:29:03.954999",
     "exception": false,
     "start_time": "2025-04-03T04:29:03.910243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95984331",
   "metadata": {
    "papermill": {
     "duration": 0.044793,
     "end_time": "2025-04-03T04:29:04.044368",
     "exception": false,
     "start_time": "2025-04-03T04:29:03.999575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2af3429e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T04:29:04.135858Z",
     "iopub.status.busy": "2025-04-03T04:29:04.135195Z",
     "iopub.status.idle": "2025-04-03T04:29:04.148415Z",
     "shell.execute_reply": "2025-04-03T04:29:04.147659Z"
    },
    "papermill": {
     "duration": 0.060944,
     "end_time": "2025-04-03T04:29:04.150007",
     "exception": false,
     "start_time": "2025-04-03T04:29:04.089063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 28.620987\n",
      "Train Loss: 29.303722\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b20ae6e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T04:29:04.241470Z",
     "iopub.status.busy": "2025-04-03T04:29:04.241177Z",
     "iopub.status.idle": "2025-04-03T04:29:04.254008Z",
     "shell.execute_reply": "2025-04-03T04:29:04.253134Z"
    },
    "papermill": {
     "duration": 0.06005,
     "end_time": "2025-04-03T04:29:04.255456",
     "exception": false,
     "start_time": "2025-04-03T04:29:04.195406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.004179, Loss_IC: 0.041743, loss_bc: 0.000122\n",
      "Train Loss: 0.046044\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9bf61ca3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T04:29:04.346019Z",
     "iopub.status.busy": "2025-04-03T04:29:04.345715Z",
     "iopub.status.idle": "2025-04-03T04:29:04.608798Z",
     "shell.execute_reply": "2025-04-03T04:29:04.607947Z"
    },
    "papermill": {
     "duration": 0.31018,
     "end_time": "2025-04-03T04:29:04.610465",
     "exception": false,
     "start_time": "2025-04-03T04:29:04.300285",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "13ef90e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T04:29:04.703495Z",
     "iopub.status.busy": "2025-04-03T04:29:04.703191Z",
     "iopub.status.idle": "2025-04-03T04:29:04.706682Z",
     "shell.execute_reply": "2025-04-03T04:29:04.705951Z"
    },
    "papermill": {
     "duration": 0.051266,
     "end_time": "2025-04-03T04:29:04.708162",
     "exception": false,
     "start_time": "2025-04-03T04:29:04.656896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8cce5e4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-03T04:29:04.801564Z",
     "iopub.status.busy": "2025-04-03T04:29:04.801299Z",
     "iopub.status.idle": "2025-04-03T04:29:06.366763Z",
     "shell.execute_reply": "2025-04-03T04:29:06.365930Z"
    },
    "papermill": {
     "duration": 1.613874,
     "end_time": "2025-04-03T04:29:06.368381",
     "exception": false,
     "start_time": "2025-04-03T04:29:04.754507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana_neumann(x, y, t, alpha=0.4, L=1, n=1):\n",
    "    # Steady-state solution for the given boundary conditions\n",
    "    return 1 - x / L\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u_corrected = u_ana_neumann(res_test[:, 0], res_test[:, 1], t=1)\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u_corrected = u_corrected.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u_corrected[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Last time step\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat Analytical Solution t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical_t1.png')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4792.667289,
   "end_time": "2025-04-03T04:29:08.657975",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-03T03:09:15.990686",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
