{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d11c617c",
   "metadata": {
    "_cell_guid": "12a40a52-ec70-471a-9fcf-0b454e269f9d",
    "_uuid": "a17e74a7-87b0-46ac-84ab-59d7cfd92dc5",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.005169,
     "end_time": "2025-04-05T05:08:55.383945",
     "exception": false,
     "start_time": "2025-04-05T05:08:55.378776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "02e239bf",
   "metadata": {
    "_cell_guid": "a795b49b-c84a-4204-be59-076ff2b849e4",
    "_uuid": "e1f4b098-0e6a-4060-95a3-2e7ee8ad2213",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T05:08:55.394328Z",
     "iopub.status.busy": "2025-04-05T05:08:55.393946Z",
     "iopub.status.idle": "2025-04-05T05:08:59.009016Z",
     "shell.execute_reply": "2025-04-05T05:08:59.007108Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 3.623318,
     "end_time": "2025-04-05T05:08:59.011846",
     "exception": false,
     "start_time": "2025-04-05T05:08:55.388528",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d4cfdf64",
   "metadata": {
    "_cell_guid": "8dca3706-fb4e-41fa-939e-830bb170e9e1",
    "_uuid": "295f95a3-b718-44bb-9d53-9ca5feb0ed09",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T05:08:59.026535Z",
     "iopub.status.busy": "2025-04-05T05:08:59.025666Z",
     "iopub.status.idle": "2025-04-05T05:08:59.042768Z",
     "shell.execute_reply": "2025-04-05T05:08:59.041920Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.025442,
     "end_time": "2025-04-05T05:08:59.044803",
     "exception": false,
     "start_time": "2025-04-05T05:08:59.019361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c8b89ed9",
   "metadata": {
    "_cell_guid": "22869a00-394e-4368-8f94-e385ebbcb509",
    "_uuid": "8171cf34-52c5-49ba-b926-b406a965be7d",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T05:08:59.057315Z",
     "iopub.status.busy": "2025-04-05T05:08:59.056658Z",
     "iopub.status.idle": "2025-04-05T05:08:59.060579Z",
     "shell.execute_reply": "2025-04-05T05:08:59.059891Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.012551,
     "end_time": "2025-04-05T05:08:59.062141",
     "exception": false,
     "start_time": "2025-04-05T05:08:59.049590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3b330c7c",
   "metadata": {
    "_cell_guid": "8cd92b7a-1b37-4c5b-b0f8-e97cfd7f870c",
    "_uuid": "20f5cf48-74b7-41c1-ace5-d23b4e513a60",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T05:08:59.072206Z",
     "iopub.status.busy": "2025-04-05T05:08:59.071539Z",
     "iopub.status.idle": "2025-04-05T05:08:59.077913Z",
     "shell.execute_reply": "2025-04-05T05:08:59.077186Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.013088,
     "end_time": "2025-04-05T05:08:59.079576",
     "exception": false,
     "start_time": "2025-04-05T05:08:59.066488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def get_data_3dV2(x_range, y_range, t_range, x_num, y_num, t_num):\n",
    "    # Input validation\n",
    "    assert x_num > 1 and y_num > 1 and t_num > 1, \"All nums must be ≥ 2\"\n",
    "    \n",
    "    # Generate grid using linspace + meshgrid\n",
    "    x = np.linspace(*x_range, x_num)\n",
    "    y = np.linspace(*y_range, y_num)\n",
    "    t = np.linspace(*t_range, t_num)\n",
    "    \n",
    "    # Create full grid with \"ij\" indexing\n",
    "    x_mesh, y_mesh, t_mesh = np.meshgrid(x, y, t, indexing='ij')\n",
    "    data = np.stack((x_mesh, y_mesh, t_mesh), axis=-1)  # (x_num, y_num, t_num, 3)\n",
    "    \n",
    "    # Extract boundaries (match your original code expectations)\n",
    "    b_left = data[0, :, :, :].reshape(-1, 3)    # x=x_min (all y/t)\n",
    "    b_right = data[-1, :, :, :].reshape(-1, 3)   # x=x_max\n",
    "    b_lower = data[:, 0, :, :].reshape(-1, 3)    # y=y_min (all x/t)\n",
    "    b_upper = data[:, -1, :, :].reshape(-1, 3)   # y=y_max\n",
    "    \n",
    "    # Return format matching your original code (no initial/final)\n",
    "    return (\n",
    "        data.reshape(-1, 3),  # All points (N, 3)\n",
    "        b_left, b_right, b_upper, b_lower\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a115902b",
   "metadata": {
    "_cell_guid": "dab6aa21-c28f-4ea2-8288-6fceab7766a5",
    "_uuid": "dcd65402-6f5f-46bc-8e3b-fdd33e51be42",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T05:08:59.089666Z",
     "iopub.status.busy": "2025-04-05T05:08:59.089058Z",
     "iopub.status.idle": "2025-04-05T05:08:59.168302Z",
     "shell.execute_reply": "2025-04-05T05:08:59.167247Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.087505,
     "end_time": "2025-04-05T05:08:59.171405",
     "exception": false,
     "start_time": "2025-04-05T05:08:59.083900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7fb62a64",
   "metadata": {
    "_cell_guid": "e5c68518-7f64-4130-bebd-cf399165e1ef",
    "_uuid": "972f9704-ccc2-4cd9-b898-a96a63839dfc",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.00499,
     "end_time": "2025-04-05T05:08:59.185014",
     "exception": false,
     "start_time": "2025-04-05T05:08:59.180024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3ae03243",
   "metadata": {
    "_cell_guid": "0a6f6a7e-59ae-4187-b2f4-f67162313603",
    "_uuid": "1a02e333-9bec-4c34-861f-66244dfe3c90",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T05:08:59.197737Z",
     "iopub.status.busy": "2025-04-05T05:08:59.197239Z",
     "iopub.status.idle": "2025-04-05T05:08:59.434725Z",
     "shell.execute_reply": "2025-04-05T05:08:59.433734Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.24766,
     "end_time": "2025-04-05T05:08:59.437424",
     "exception": false,
     "start_time": "2025-04-05T05:08:59.189764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3dV2([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e736c1e1",
   "metadata": {
    "_cell_guid": "220e7730-d232-40b2-b482-dc8eadb5cc2c",
    "_uuid": "98d3beb0-f9b6-485c-b699-49b38da081bd",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T05:08:59.449210Z",
     "iopub.status.busy": "2025-04-05T05:08:59.448913Z",
     "iopub.status.idle": "2025-04-05T05:09:00.752642Z",
     "shell.execute_reply": "2025-04-05T05:09:00.751745Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.311158,
     "end_time": "2025-04-05T05:09:00.754717",
     "exception": false,
     "start_time": "2025-04-05T05:08:59.443559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "36b2fab8",
   "metadata": {
    "_cell_guid": "8b6d4148-1f6b-4c8d-9760-b0854d13e940",
    "_uuid": "6b2a831d-f943-4c61-b861-65115fab4987",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T05:09:00.765376Z",
     "iopub.status.busy": "2025-04-05T05:09:00.764980Z",
     "iopub.status.idle": "2025-04-05T05:09:00.768849Z",
     "shell.execute_reply": "2025-04-05T05:09:00.767987Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.010861,
     "end_time": "2025-04-05T05:09:00.770438",
     "exception": false,
     "start_time": "2025-04-05T05:09:00.759577",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6dd40519",
   "metadata": {
    "_cell_guid": "51d3cd2d-5263-48f1-a02e-efd27de78cb7",
    "_uuid": "8fdbc6b6-f540-490d-b03c-ef0e4b5f9fec",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T05:09:00.780858Z",
     "iopub.status.busy": "2025-04-05T05:09:00.780182Z",
     "iopub.status.idle": "2025-04-05T08:11:59.071054Z",
     "shell.execute_reply": "2025-04-05T08:11:59.070118Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 10978.297854,
     "end_time": "2025-04-05T08:11:59.072900",
     "exception": false,
     "start_time": "2025-04-05T05:09:00.775046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/3000 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 3000/3000 [3:02:58<00:00,  3.66s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "\n",
    "for i in tqdm(range(3000)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, \n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True,\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, \n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True,\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)  # PDE residual\n",
    "        u_ic_true = 0.01\n",
    "        loss_ic = torch.mean((pred_ic - bc_zero) ** 2) # Initial condition\n",
    "        mask_t_positive = (t_left > 0).squeeze()  # True for t > 0\n",
    "\n",
    "        # Compute loss only for t > 0\n",
    "        if mask_t_positive.any():\n",
    "            loss_dirichlet = 10 * torch.mean((bc_x_min[mask_t_positive] - 1) ** 2)\n",
    "        else:\n",
    "            loss_dirichlet = 0.0  # No loss if no t > 0 in this batch\n",
    "        \n",
    "        loss_bc = (\n",
    "            torch.mean((u_bc_x_max) ** 2) +  # Neumann: x=L\n",
    "            torch.mean((u_bc_y_min) ** 2) +  # Neumann: y=0\n",
    "            torch.mean((u_bc_y_max) ** 2) +  # Neumann: y=L\n",
    "            loss_dirichlet  # Dirichlet: x=0 (t > 0 only)\n",
    "        )\n",
    "\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "        if (loss_ic>0.05):\n",
    "            c=100\n",
    "            d=10\n",
    "        else:\n",
    "            d=100\n",
    "            c=10\n",
    "\n",
    "        loss = d * loss_res + c * loss_ic + 1000.0 * loss_bc\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c3749a09",
   "metadata": {
    "_cell_guid": "ed1ec62e-3dff-4c65-b0d3-98ce78a57789",
    "_uuid": "f7a8b545-5ca0-4bd1-8849-b1d6fbaac0ab",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T08:11:59.373391Z",
     "iopub.status.busy": "2025-04-05T08:11:59.373061Z",
     "iopub.status.idle": "2025-04-05T08:11:59.387929Z",
     "shell.execute_reply": "2025-04-05T08:11:59.387049Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.148268,
     "end_time": "2025-04-05T08:11:59.389462",
     "exception": false,
     "start_time": "2025-04-05T08:11:59.241194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.029672, Loss_IC: 0.049991, loss_bc: 0.000508\n",
      "Train Loss: 0.080171\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de919c4d",
   "metadata": {
    "_cell_guid": "6886d226-44b4-4842-ac53-865fa690fdc6",
    "_uuid": "3f18c882-4b2f-4eb8-b85c-2e7f02ce0862",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.128983,
     "end_time": "2025-04-05T08:11:59.650059",
     "exception": false,
     "start_time": "2025-04-05T08:11:59.521076",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04694036",
   "metadata": {
    "_cell_guid": "83894590-3d44-4f89-a3bd-382fccd09a71",
    "_uuid": "e9861593-ee48-413a-bfb2-cede94e92547",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.12944,
     "end_time": "2025-04-05T08:11:59.908609",
     "exception": false,
     "start_time": "2025-04-05T08:11:59.779169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d13eb36b",
   "metadata": {
    "_cell_guid": "3de9a64d-99c2-4436-9be3-560e9685a72c",
    "_uuid": "eca3c03d-9e0a-4276-871e-95dca060bffd",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.128981,
     "end_time": "2025-04-05T08:12:00.167651",
     "exception": false,
     "start_time": "2025-04-05T08:12:00.038670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5caeb805",
   "metadata": {
    "_cell_guid": "e84acde1-d1f9-4d88-b64b-0baceb782187",
    "_uuid": "77353409-bc2b-48d0-9732-aa2df5528542",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T08:12:00.468082Z",
     "iopub.status.busy": "2025-04-05T08:12:00.467751Z",
     "iopub.status.idle": "2025-04-05T08:12:00.480688Z",
     "shell.execute_reply": "2025-04-05T08:12:00.479788Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.146019,
     "end_time": "2025-04-05T08:12:00.482251",
     "exception": false,
     "start_time": "2025-04-05T08:12:00.336232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 28.620987\n",
      "Train Loss: 29.303722\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f07ba3ff",
   "metadata": {
    "_cell_guid": "411e2791-3c29-4aa6-95b3-d673fac38e2b",
    "_uuid": "314f01b7-ede4-487c-b18c-fbe5e7e3a13f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T08:12:00.742247Z",
     "iopub.status.busy": "2025-04-05T08:12:00.741923Z",
     "iopub.status.idle": "2025-04-05T08:12:00.755162Z",
     "shell.execute_reply": "2025-04-05T08:12:00.754279Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.14441,
     "end_time": "2025-04-05T08:12:00.756884",
     "exception": false,
     "start_time": "2025-04-05T08:12:00.612474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.029672, Loss_IC: 0.049991, loss_bc: 0.000508\n",
      "Train Loss: 0.080171\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "27cf81b9",
   "metadata": {
    "_cell_guid": "8d095e2b-0ae4-45a4-960a-b5a2e2abe280",
    "_uuid": "4402d15d-5d4b-441b-b20d-163d56ba9dab",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T08:12:01.018306Z",
     "iopub.status.busy": "2025-04-05T08:12:01.017894Z",
     "iopub.status.idle": "2025-04-05T08:12:01.412246Z",
     "shell.execute_reply": "2025-04-05T08:12:01.411414Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.529031,
     "end_time": "2025-04-05T08:12:01.413897",
     "exception": false,
     "start_time": "2025-04-05T08:12:00.884866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b68ba00a",
   "metadata": {
    "_cell_guid": "18fd8af2-1ec7-44d2-bd1d-221ed40fece1",
    "_uuid": "05a41581-c0e7-4bbf-9462-ccb046f4f10f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T08:12:01.675946Z",
     "iopub.status.busy": "2025-04-05T08:12:01.675613Z",
     "iopub.status.idle": "2025-04-05T08:12:01.679387Z",
     "shell.execute_reply": "2025-04-05T08:12:01.678614Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.135904,
     "end_time": "2025-04-05T08:12:01.681110",
     "exception": false,
     "start_time": "2025-04-05T08:12:01.545206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c44ea403",
   "metadata": {
    "_cell_guid": "d0fa43bc-e228-4ce2-b441-546805f37a05",
    "_uuid": "c5906942-88d1-4f92-a6c6-bd6b47d093a3",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-04-05T08:12:01.982395Z",
     "iopub.status.busy": "2025-04-05T08:12:01.981811Z",
     "iopub.status.idle": "2025-04-05T08:12:03.484957Z",
     "shell.execute_reply": "2025-04-05T08:12:03.484259Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.674712,
     "end_time": "2025-04-05T08:12:03.486744",
     "exception": false,
     "start_time": "2025-04-05T08:12:01.812032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana_neumann(x, y, t, alpha=0.4, L=1, n=1):\n",
    "    # Steady-state solution for the given boundary conditions\n",
    "    return 1 - x / L\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u_corrected = u_ana_neumann(res_test[:, 0], res_test[:, 1], t=1)\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u_corrected = u_corrected.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u_corrected[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Last time step\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat Analytical Solution t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical_t1.png')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10992.07892,
   "end_time": "2025-04-05T08:12:04.842167",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-05T05:08:52.763247",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
