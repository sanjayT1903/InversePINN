{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8e45948",
   "metadata": {
    "papermill": {
     "duration": 0.004693,
     "end_time": "2025-03-31T05:12:35.070176",
     "exception": false,
     "start_time": "2025-03-31T05:12:35.065483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "227700af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T05:12:35.079852Z",
     "iopub.status.busy": "2025-03-31T05:12:35.079073Z",
     "iopub.status.idle": "2025-03-31T05:12:38.610305Z",
     "shell.execute_reply": "2025-03-31T05:12:38.609564Z"
    },
    "papermill": {
     "duration": 3.538318,
     "end_time": "2025-03-31T05:12:38.612369",
     "exception": false,
     "start_time": "2025-03-31T05:12:35.074051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a316a515",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T05:12:38.622439Z",
     "iopub.status.busy": "2025-03-31T05:12:38.622049Z",
     "iopub.status.idle": "2025-03-31T05:12:38.637801Z",
     "shell.execute_reply": "2025-03-31T05:12:38.637013Z"
    },
    "papermill": {
     "duration": 0.022828,
     "end_time": "2025-03-31T05:12:38.639560",
     "exception": false,
     "start_time": "2025-03-31T05:12:38.616732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a1319bd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T05:12:38.648772Z",
     "iopub.status.busy": "2025-03-31T05:12:38.648481Z",
     "iopub.status.idle": "2025-03-31T05:12:38.652228Z",
     "shell.execute_reply": "2025-03-31T05:12:38.651464Z"
    },
    "papermill": {
     "duration": 0.010206,
     "end_time": "2025-03-31T05:12:38.653791",
     "exception": false,
     "start_time": "2025-03-31T05:12:38.643585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "556769db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T05:12:38.662789Z",
     "iopub.status.busy": "2025-03-31T05:12:38.662526Z",
     "iopub.status.idle": "2025-03-31T05:12:38.668583Z",
     "shell.execute_reply": "2025-03-31T05:12:38.667878Z"
    },
    "papermill": {
     "duration": 0.012222,
     "end_time": "2025-03-31T05:12:38.670031",
     "exception": false,
     "start_time": "2025-03-31T05:12:38.657809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def get_data_3dV2(x_range, y_range, t_range, x_num, y_num, t_num):\n",
    "    # Input validation\n",
    "    assert x_num > 1 and y_num > 1 and t_num > 1, \"All nums must be â‰¥ 2\"\n",
    "    \n",
    "    # Generate grid using linspace + meshgrid\n",
    "    x = np.linspace(*x_range, x_num)\n",
    "    y = np.linspace(*y_range, y_num)\n",
    "    t = np.linspace(*t_range, t_num)\n",
    "    \n",
    "    # Create full grid with \"ij\" indexing\n",
    "    x_mesh, y_mesh, t_mesh = np.meshgrid(x, y, t, indexing='ij')\n",
    "    data = np.stack((x_mesh, y_mesh, t_mesh), axis=-1)  # (x_num, y_num, t_num, 3)\n",
    "    \n",
    "    # Extract boundaries (match your original code expectations)\n",
    "    b_left = data[0, :, :, :].reshape(-1, 3)    # x=x_min (all y/t)\n",
    "    b_right = data[-1, :, :, :].reshape(-1, 3)   # x=x_max\n",
    "    b_lower = data[:, 0, :, :].reshape(-1, 3)    # y=y_min (all x/t)\n",
    "    b_upper = data[:, -1, :, :].reshape(-1, 3)   # y=y_max\n",
    "    \n",
    "    # Return format matching your original code (no initial/final)\n",
    "    return (\n",
    "        data.reshape(-1, 3),  # All points (N, 3)\n",
    "        b_left, b_right, b_upper, b_lower\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "080a0a32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T05:12:38.678474Z",
     "iopub.status.busy": "2025-03-31T05:12:38.678212Z",
     "iopub.status.idle": "2025-03-31T05:12:38.740717Z",
     "shell.execute_reply": "2025-03-31T05:12:38.739798Z"
    },
    "papermill": {
     "duration": 0.068871,
     "end_time": "2025-03-31T05:12:38.742581",
     "exception": false,
     "start_time": "2025-03-31T05:12:38.673710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd23f17c",
   "metadata": {
    "papermill": {
     "duration": 0.003746,
     "end_time": "2025-03-31T05:12:38.750544",
     "exception": false,
     "start_time": "2025-03-31T05:12:38.746798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "78fefbed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T05:12:38.760914Z",
     "iopub.status.busy": "2025-03-31T05:12:38.760334Z",
     "iopub.status.idle": "2025-03-31T05:12:38.974955Z",
     "shell.execute_reply": "2025-03-31T05:12:38.974166Z"
    },
    "papermill": {
     "duration": 0.222686,
     "end_time": "2025-03-31T05:12:38.977004",
     "exception": false,
     "start_time": "2025-03-31T05:12:38.754318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3dV2([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0541971a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T05:12:38.986881Z",
     "iopub.status.busy": "2025-03-31T05:12:38.986243Z",
     "iopub.status.idle": "2025-03-31T05:12:40.338306Z",
     "shell.execute_reply": "2025-03-31T05:12:40.337446Z"
    },
    "papermill": {
     "duration": 1.358909,
     "end_time": "2025-03-31T05:12:40.340230",
     "exception": false,
     "start_time": "2025-03-31T05:12:38.981321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2a2b9484",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T05:12:40.350200Z",
     "iopub.status.busy": "2025-03-31T05:12:40.349776Z",
     "iopub.status.idle": "2025-03-31T05:12:40.353692Z",
     "shell.execute_reply": "2025-03-31T05:12:40.352758Z"
    },
    "papermill": {
     "duration": 0.010737,
     "end_time": "2025-03-31T05:12:40.355450",
     "exception": false,
     "start_time": "2025-03-31T05:12:40.344713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "91c75c53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T05:12:40.366653Z",
     "iopub.status.busy": "2025-03-31T05:12:40.366355Z",
     "iopub.status.idle": "2025-03-31T06:25:42.855068Z",
     "shell.execute_reply": "2025-03-31T06:25:42.854363Z"
    },
    "papermill": {
     "duration": 4382.496797,
     "end_time": "2025-03-31T06:25:42.857045",
     "exception": false,
     "start_time": "2025-03-31T05:12:40.360248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 500/500 [1:13:02<00:00,  8.76s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "\n",
    "for i in tqdm(range(500)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)  # PDE residual\n",
    "        u_ic_true = torch.sin(np.pi * x_res) * torch.sin(np.pi * y_res)\n",
    "        loss_ic = torch.mean((pred_ic - u_ic_true) ** 2) # Initial condition\n",
    "        loss_bc = (\n",
    "            torch.mean((u_bc_x_max) ** 2) +  # Neumann: du/dx(L, y, t) = 0\n",
    "            torch.mean((u_bc_y_min) ** 2) +  # Neumann: du/dy(x, 0, t) = 0\n",
    "            torch.mean((u_bc_y_max) ** 2) +  # Neumann: du/dy(x, L, t) = 0\n",
    "            10 * torch.mean((bc_x_min - 1) ** 2)  # Dirichlet: u(0, y, t) = 1\n",
    "        )\n",
    "\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 1.0 * loss_res + 100.0 * loss_ic + 1000.0 * loss_bc\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ab671344",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T06:25:42.910226Z",
     "iopub.status.busy": "2025-03-31T06:25:42.909816Z",
     "iopub.status.idle": "2025-03-31T06:25:42.925844Z",
     "shell.execute_reply": "2025-03-31T06:25:42.924859Z"
    },
    "papermill": {
     "duration": 0.044534,
     "end_time": "2025-03-31T06:25:42.927702",
     "exception": false,
     "start_time": "2025-03-31T06:25:42.883168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.060228, Loss_IC: 0.094664, loss_bc: 0.000129\n",
      "Train Loss: 0.155021\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be2cc683",
   "metadata": {
    "papermill": {
     "duration": 0.024881,
     "end_time": "2025-03-31T06:25:42.983587",
     "exception": false,
     "start_time": "2025-03-31T06:25:42.958706",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "da3bdd6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T06:25:43.034921Z",
     "iopub.status.busy": "2025-03-31T06:25:43.034552Z",
     "iopub.status.idle": "2025-03-31T06:25:43.038458Z",
     "shell.execute_reply": "2025-03-31T06:25:43.037649Z"
    },
    "papermill": {
     "duration": 0.031516,
     "end_time": "2025-03-31T06:25:43.040132",
     "exception": false,
     "start_time": "2025-03-31T06:25:43.008616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# #optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1dc2e2e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T06:25:43.092345Z",
     "iopub.status.busy": "2025-03-31T06:25:43.092028Z",
     "iopub.status.idle": "2025-03-31T06:25:43.097740Z",
     "shell.execute_reply": "2025-03-31T06:25:43.096905Z"
    },
    "papermill": {
     "duration": 0.033739,
     "end_time": "2025-03-31T06:25:43.099464",
     "exception": false,
     "start_time": "2025-03-31T06:25:43.065725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(600)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1c3ab63e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T06:25:43.151556Z",
     "iopub.status.busy": "2025-03-31T06:25:43.150721Z",
     "iopub.status.idle": "2025-03-31T06:25:43.164152Z",
     "shell.execute_reply": "2025-03-31T06:25:43.163270Z"
    },
    "papermill": {
     "duration": 0.040948,
     "end_time": "2025-03-31T06:25:43.165810",
     "exception": false,
     "start_time": "2025-03-31T06:25:43.124862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 1.483508, loss_bc: 28.643003\n",
      "Train Loss: 30.150484\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8d89e702",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T06:25:43.217288Z",
     "iopub.status.busy": "2025-03-31T06:25:43.216912Z",
     "iopub.status.idle": "2025-03-31T06:25:43.230551Z",
     "shell.execute_reply": "2025-03-31T06:25:43.229516Z"
    },
    "papermill": {
     "duration": 0.04108,
     "end_time": "2025-03-31T06:25:43.232237",
     "exception": false,
     "start_time": "2025-03-31T06:25:43.191157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.060228, Loss_IC: 0.094664, loss_bc: 0.000129\n",
      "Train Loss: 0.155021\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "05adb6db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T06:25:43.287140Z",
     "iopub.status.busy": "2025-03-31T06:25:43.286094Z",
     "iopub.status.idle": "2025-03-31T06:25:43.619006Z",
     "shell.execute_reply": "2025-03-31T06:25:43.618092Z"
    },
    "papermill": {
     "duration": 0.363225,
     "end_time": "2025-03-31T06:25:43.620837",
     "exception": false,
     "start_time": "2025-03-31T06:25:43.257612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6a079d86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T06:25:43.674144Z",
     "iopub.status.busy": "2025-03-31T06:25:43.673498Z",
     "iopub.status.idle": "2025-03-31T06:25:43.677326Z",
     "shell.execute_reply": "2025-03-31T06:25:43.676514Z"
    },
    "papermill": {
     "duration": 0.031853,
     "end_time": "2025-03-31T06:25:43.678880",
     "exception": false,
     "start_time": "2025-03-31T06:25:43.647027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "427645e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T06:25:43.731750Z",
     "iopub.status.busy": "2025-03-31T06:25:43.731194Z",
     "iopub.status.idle": "2025-03-31T06:25:45.387765Z",
     "shell.execute_reply": "2025-03-31T06:25:45.386840Z"
    },
    "papermill": {
     "duration": 1.68479,
     "end_time": "2025-03-31T06:25:45.389429",
     "exception": false,
     "start_time": "2025-03-31T06:25:43.704639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana_neumann(x, y, t, alpha=0.4, L=1, n=1):\n",
    "    # Steady-state solution for the given boundary conditions\n",
    "    return 1 - x / L\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u_corrected = u_ana_neumann(res_test[:, 0], res_test[:, 1], t=1)\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u_corrected = u_corrected.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u_corrected[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Last time step\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat Analytical Solution t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical_t1.png')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4394.219601,
   "end_time": "2025-03-31T06:25:46.738116",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-31T05:12:32.518515",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
