{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9491a276",
   "metadata": {
    "papermill": {
     "duration": 0.004835,
     "end_time": "2025-02-24T05:08:46.803319",
     "exception": false,
     "start_time": "2025-02-24T05:08:46.798484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "69e7b0e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:08:46.813287Z",
     "iopub.status.busy": "2025-02-24T05:08:46.812464Z",
     "iopub.status.idle": "2025-02-24T05:08:50.525400Z",
     "shell.execute_reply": "2025-02-24T05:08:50.524557Z"
    },
    "papermill": {
     "duration": 3.720092,
     "end_time": "2025-02-24T05:08:50.527592",
     "exception": false,
     "start_time": "2025-02-24T05:08:46.807500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "68a9062b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:08:50.540501Z",
     "iopub.status.busy": "2025-02-24T05:08:50.539617Z",
     "iopub.status.idle": "2025-02-24T05:08:50.568950Z",
     "shell.execute_reply": "2025-02-24T05:08:50.567517Z"
    },
    "papermill": {
     "duration": 0.039427,
     "end_time": "2025-02-24T05:08:50.573084",
     "exception": false,
     "start_time": "2025-02-24T05:08:50.533657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c4e835d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:08:50.589025Z",
     "iopub.status.busy": "2025-02-24T05:08:50.588569Z",
     "iopub.status.idle": "2025-02-24T05:08:50.594256Z",
     "shell.execute_reply": "2025-02-24T05:08:50.593115Z"
    },
    "papermill": {
     "duration": 0.018135,
     "end_time": "2025-02-24T05:08:50.597021",
     "exception": false,
     "start_time": "2025-02-24T05:08:50.578886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8ebf40d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:08:50.613856Z",
     "iopub.status.busy": "2025-02-24T05:08:50.613468Z",
     "iopub.status.idle": "2025-02-24T05:08:50.683830Z",
     "shell.execute_reply": "2025-02-24T05:08:50.682802Z"
    },
    "papermill": {
     "duration": 0.083166,
     "end_time": "2025-02-24T05:08:50.685850",
     "exception": false,
     "start_time": "2025-02-24T05:08:50.602684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "878bd585",
   "metadata": {
    "papermill": {
     "duration": 0.004261,
     "end_time": "2025-02-24T05:08:50.694752",
     "exception": false,
     "start_time": "2025-02-24T05:08:50.690491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "207841b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:08:50.706871Z",
     "iopub.status.busy": "2025-02-24T05:08:50.706024Z",
     "iopub.status.idle": "2025-02-24T05:08:50.945244Z",
     "shell.execute_reply": "2025-02-24T05:08:50.944143Z"
    },
    "papermill": {
     "duration": 0.247138,
     "end_time": "2025-02-24T05:08:50.947926",
     "exception": false,
     "start_time": "2025-02-24T05:08:50.700788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "384bb2e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:08:50.964509Z",
     "iopub.status.busy": "2025-02-24T05:08:50.963858Z",
     "iopub.status.idle": "2025-02-24T05:08:52.310733Z",
     "shell.execute_reply": "2025-02-24T05:08:52.309712Z"
    },
    "papermill": {
     "duration": 1.357403,
     "end_time": "2025-02-24T05:08:52.312849",
     "exception": false,
     "start_time": "2025-02-24T05:08:50.955446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b3cac0ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:08:52.322762Z",
     "iopub.status.busy": "2025-02-24T05:08:52.322059Z",
     "iopub.status.idle": "2025-02-24T05:08:52.326233Z",
     "shell.execute_reply": "2025-02-24T05:08:52.325234Z"
    },
    "papermill": {
     "duration": 0.010581,
     "end_time": "2025-02-24T05:08:52.327847",
     "exception": false,
     "start_time": "2025-02-24T05:08:52.317266",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a95e2b88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:08:52.337238Z",
     "iopub.status.busy": "2025-02-24T05:08:52.336948Z",
     "iopub.status.idle": "2025-02-24T05:22:56.625240Z",
     "shell.execute_reply": "2025-02-24T05:22:56.624225Z"
    },
    "papermill": {
     "duration": 844.296018,
     "end_time": "2025-02-24T05:22:56.627763",
     "exception": false,
     "start_time": "2025-02-24T05:08:52.331745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1500/1500 [14:04<00:00,  1.78it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1500)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 2*loss_res + 3*loss_ic + 2*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "48940c72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:22:56.778560Z",
     "iopub.status.busy": "2025-02-24T05:22:56.777705Z",
     "iopub.status.idle": "2025-02-24T05:22:56.796580Z",
     "shell.execute_reply": "2025-02-24T05:22:56.795486Z"
    },
    "papermill": {
     "duration": 0.098635,
     "end_time": "2025-02-24T05:22:56.799099",
     "exception": false,
     "start_time": "2025-02-24T05:22:56.700464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.012238, Loss_IC: 0.134631, loss_bc: 0.076054\n",
      "Train Loss: 0.222923\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1a946f2",
   "metadata": {
    "papermill": {
     "duration": 0.069961,
     "end_time": "2025-02-24T05:22:56.939565",
     "exception": false,
     "start_time": "2025-02-24T05:22:56.869604",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7d9e25f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:22:57.081402Z",
     "iopub.status.busy": "2025-02-24T05:22:57.081039Z",
     "iopub.status.idle": "2025-02-24T05:22:57.111298Z",
     "shell.execute_reply": "2025-02-24T05:22:57.110412Z"
    },
    "papermill": {
     "duration": 0.103482,
     "end_time": "2025-02-24T05:22:57.113128",
     "exception": false,
     "start_time": "2025-02-24T05:22:57.009646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/4090693566.py:4: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n"
     ]
    }
   ],
   "source": [
    "\n",
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# Load saved parameters\n",
    "model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# Move model to the correct device\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "878cb3f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:22:57.255323Z",
     "iopub.status.busy": "2025-02-24T05:22:57.254499Z",
     "iopub.status.idle": "2025-02-24T05:43:48.312728Z",
     "shell.execute_reply": "2025-02-24T05:43:48.311565Z"
    },
    "papermill": {
     "duration": 1251.131502,
     "end_time": "2025-02-24T05:43:48.314937",
     "exception": false,
     "start_time": "2025-02-24T05:22:57.183435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [20:51<00:00, 12.51s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(100)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 10* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 10*loss_res + 1*loss_ic + 3*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5a6f009e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:43:48.479651Z",
     "iopub.status.busy": "2025-02-24T05:43:48.479286Z",
     "iopub.status.idle": "2025-02-24T05:43:48.495997Z",
     "shell.execute_reply": "2025-02-24T05:43:48.494943Z"
    },
    "papermill": {
     "duration": 0.101719,
     "end_time": "2025-02-24T05:43:48.497989",
     "exception": false,
     "start_time": "2025-02-24T05:43:48.396270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.011805, Loss_IC: 0.154677, loss_bc: 0.010256\n",
      "Train Loss: 0.176738\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "324a7621",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:43:48.663245Z",
     "iopub.status.busy": "2025-02-24T05:43:48.662474Z",
     "iopub.status.idle": "2025-02-24T05:43:48.677280Z",
     "shell.execute_reply": "2025-02-24T05:43:48.676477Z"
    },
    "papermill": {
     "duration": 0.099746,
     "end_time": "2025-02-24T05:43:48.679100",
     "exception": false,
     "start_time": "2025-02-24T05:43:48.579354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000127, Loss_IC: 0.042712, loss_bc: 0.000761\n",
      "Train Loss: 0.043600\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9f6406b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:43:48.847067Z",
     "iopub.status.busy": "2025-02-24T05:43:48.846709Z",
     "iopub.status.idle": "2025-02-24T05:43:49.221647Z",
     "shell.execute_reply": "2025-02-24T05:43:49.220682Z"
    },
    "papermill": {
     "duration": 0.460447,
     "end_time": "2025-02-24T05:43:49.223497",
     "exception": false,
     "start_time": "2025-02-24T05:43:48.763050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6a0f82ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:43:49.394491Z",
     "iopub.status.busy": "2025-02-24T05:43:49.393749Z",
     "iopub.status.idle": "2025-02-24T05:43:49.398167Z",
     "shell.execute_reply": "2025-02-24T05:43:49.397245Z"
    },
    "papermill": {
     "duration": 0.090906,
     "end_time": "2025-02-24T05:43:49.399979",
     "exception": false,
     "start_time": "2025-02-24T05:43:49.309073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8a192cf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T05:43:49.619375Z",
     "iopub.status.busy": "2025-02-24T05:43:49.618724Z",
     "iopub.status.idle": "2025-02-24T05:43:50.953540Z",
     "shell.execute_reply": "2025-02-24T05:43:50.952566Z"
    },
    "papermill": {
     "duration": 1.471152,
     "end_time": "2025-02-24T05:43:50.955523",
     "exception": false,
     "start_time": "2025-02-24T05:43:49.484371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Predicted u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Analytical u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2108.255057,
   "end_time": "2025-02-24T05:43:52.362382",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-24T05:08:44.107325",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
