{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20019e52",
   "metadata": {
    "papermill": {
     "duration": 0.003612,
     "end_time": "2025-02-09T06:01:03.667993",
     "exception": false,
     "start_time": "2025-02-09T06:01:03.664381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "93b60976",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:01:03.676412Z",
     "iopub.status.busy": "2025-02-09T06:01:03.675400Z",
     "iopub.status.idle": "2025-02-09T06:01:06.926053Z",
     "shell.execute_reply": "2025-02-09T06:01:06.925343Z"
    },
    "papermill": {
     "duration": 3.25688,
     "end_time": "2025-02-09T06:01:06.928051",
     "exception": false,
     "start_time": "2025-02-09T06:01:03.671171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d759759c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:01:06.935826Z",
     "iopub.status.busy": "2025-02-09T06:01:06.935253Z",
     "iopub.status.idle": "2025-02-09T06:01:06.950696Z",
     "shell.execute_reply": "2025-02-09T06:01:06.949936Z"
    },
    "papermill": {
     "duration": 0.02088,
     "end_time": "2025-02-09T06:01:06.952261",
     "exception": false,
     "start_time": "2025-02-09T06:01:06.931381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "13883fa1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:01:06.959241Z",
     "iopub.status.busy": "2025-02-09T06:01:06.958994Z",
     "iopub.status.idle": "2025-02-09T06:01:06.962871Z",
     "shell.execute_reply": "2025-02-09T06:01:06.961926Z"
    },
    "papermill": {
     "duration": 0.009018,
     "end_time": "2025-02-09T06:01:06.964368",
     "exception": false,
     "start_time": "2025-02-09T06:01:06.955350",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6b6d322e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:01:06.971320Z",
     "iopub.status.busy": "2025-02-09T06:01:06.970858Z",
     "iopub.status.idle": "2025-02-09T06:01:07.034620Z",
     "shell.execute_reply": "2025-02-09T06:01:07.033829Z"
    },
    "papermill": {
     "duration": 0.069121,
     "end_time": "2025-02-09T06:01:07.036410",
     "exception": false,
     "start_time": "2025-02-09T06:01:06.967289",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "052915f1",
   "metadata": {
    "papermill": {
     "duration": 0.002845,
     "end_time": "2025-02-09T06:01:07.042606",
     "exception": false,
     "start_time": "2025-02-09T06:01:07.039761",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f96d9412",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:01:07.049609Z",
     "iopub.status.busy": "2025-02-09T06:01:07.049317Z",
     "iopub.status.idle": "2025-02-09T06:01:07.261889Z",
     "shell.execute_reply": "2025-02-09T06:01:07.261116Z"
    },
    "papermill": {
     "duration": 0.218361,
     "end_time": "2025-02-09T06:01:07.263958",
     "exception": false,
     "start_time": "2025-02-09T06:01:07.045597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "09a56580",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:01:07.271686Z",
     "iopub.status.busy": "2025-02-09T06:01:07.271378Z",
     "iopub.status.idle": "2025-02-09T06:01:08.524491Z",
     "shell.execute_reply": "2025-02-09T06:01:08.523726Z"
    },
    "papermill": {
     "duration": 1.259225,
     "end_time": "2025-02-09T06:01:08.526566",
     "exception": false,
     "start_time": "2025-02-09T06:01:07.267341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "52dc50b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:01:08.534243Z",
     "iopub.status.busy": "2025-02-09T06:01:08.533895Z",
     "iopub.status.idle": "2025-02-09T06:01:08.537385Z",
     "shell.execute_reply": "2025-02-09T06:01:08.536628Z"
    },
    "papermill": {
     "duration": 0.008992,
     "end_time": "2025-02-09T06:01:08.538910",
     "exception": false,
     "start_time": "2025-02-09T06:01:08.529918",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "152c8630",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:01:08.546111Z",
     "iopub.status.busy": "2025-02-09T06:01:08.545868Z",
     "iopub.status.idle": "2025-02-09T06:12:25.495085Z",
     "shell.execute_reply": "2025-02-09T06:12:25.494017Z"
    },
    "papermill": {
     "duration": 676.956039,
     "end_time": "2025-02-09T06:12:25.497973",
     "exception": false,
     "start_time": "2025-02-09T06:01:08.541934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1200 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1200/1200 [11:16<00:00,  1.77it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1200)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((bc_x_min-1) ** 2) + torch.mean((u_bc_x_min)**2) + torch.mean((u_bc_y_min)**2) \n",
    "        teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 10*loss_res + 10*loss_ic + 10*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8e6cab8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:12:25.605990Z",
     "iopub.status.busy": "2025-02-09T06:12:25.605660Z",
     "iopub.status.idle": "2025-02-09T06:12:25.609307Z",
     "shell.execute_reply": "2025-02-09T06:12:25.608504Z"
    },
    "papermill": {
     "duration": 0.059299,
     "end_time": "2025-02-09T06:12:25.610993",
     "exception": false,
     "start_time": "2025-02-09T06:12:25.551694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(f\"Length of loss_track: {(loss_track)}\")\n",
    "#print(loss_track)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7ce0412e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:12:25.716517Z",
     "iopub.status.busy": "2025-02-09T06:12:25.715959Z",
     "iopub.status.idle": "2025-02-09T06:12:25.731084Z",
     "shell.execute_reply": "2025-02-09T06:12:25.730187Z"
    },
    "papermill": {
     "duration": 0.069781,
     "end_time": "2025-02-09T06:12:25.732782",
     "exception": false,
     "start_time": "2025-02-09T06:12:25.663001",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.043138, Loss_IC: 0.138185, loss_bc: 0.163090\n",
      "Train Loss: 0.344413\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "69e92934",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:12:25.840219Z",
     "iopub.status.busy": "2025-02-09T06:12:25.839560Z",
     "iopub.status.idle": "2025-02-09T06:12:26.156263Z",
     "shell.execute_reply": "2025-02-09T06:12:26.155465Z"
    },
    "papermill": {
     "duration": 0.372512,
     "end_time": "2025-02-09T06:12:26.158310",
     "exception": false,
     "start_time": "2025-02-09T06:12:25.785798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAIjCAYAAAB/OVoZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACjyElEQVR4nOzdd5gT1f7H8c8k2yudXTpI7wiogApKExAvKupVrwIqNrBhubZ7BRs/URQVRWxg49rBhsqKFAWko4CAoDTpfdmeTeb3x2yyG3YXNrBLZjfv1/Pk2WTmzMzJ5GySb77nnDFM0zQFAAAAAACCzhHsCgAAAAAAAAtBOgAAAAAANkGQDgAAAACATRCkAwAAAABgEwTpAAAAAADYBEE6AAAAAAA2QZAOAAAAAIBNEKQDAAAAAGATBOkAAAAAANgEQToAALAVwzA0evToYFfjtNmyZYsMw9DUqVNLbZ9z586VYRiaO3duqe3TzscFgIqEIB0AyqmpU6fKMAwtW7Ys2FUpkVWrVulf//qX6tatq8jISFWpUkW9evXSlClT5Ha7g129cu/VV18tkyDPe4uMjFTNmjXVo0cPPf3009q3b1+pHctuDhw4oPvvv1/NmjVTVFSUqlSpor59++rrr78+pf1OmzZNEyZMKJ1KBllptzcAQD7DNE0z2JUAAARu6tSpGjZsmJYuXapOnToFuzrH9eabb+rWW29VzZo1dd1116lJkyY6evSoZs+erW+++UZPPvmkHn744WBXs1xr3bq1qlWrVmoZzLlz5+qCCy7QnXfeqc6dO8vtdmvfvn1auHChvvrqKyUmJurjjz/WhRdeWCrHKygrK0thYWEKCwsr9X2fyIYNG9SzZ0/t27dPw4YNU6dOnXT48GF98MEHWrVqle677z49++yzJ7Xviy++WGvWrNGWLVv8lpumqezsbIWHh8vpdJbCs5A8Ho9ycnIUEREhh6P0czLFtbeyPi4AhILT/+kHAAgpv/zyi2699VZ16dJFM2fOVHx8vG/d3XffrWXLlmnNmjVBrCGO57zzztPgwYP9lv3666/q06ePLr/8cv3+++9KTk4+5eN4g7uoqChFRUWd8v5Ohsvl0uDBg3Xo0CHNnz9fZ599tm/dPffco2uvvVbPPfecOnXqpKuuuqrUjmsYRqk/Z4fDEZTzGKzjAkBFwk+cAFDBrVy5Uv369VNCQoLi4uLUs2dP/fLLL35lXC6XxowZoyZNmigqKkpVq1bVueeeq5SUFF+Z3bt3a9iwYapTp44iIyOVnJysf/zjH4WygscaM2aMDMPQBx984Bege3Xq1ElDhw71PU5PT9e9997r6xbfrFkzPffcczq245dhGBo5cqQ++eQTtWzZUtHR0erSpYtWr14tSZo8ebIaN26sqKgo9ejRo1A9e/ToodatW2v58uXq2rWroqOj1bBhQ7322muF6rh3717deOONqlmzpqKiotSuXTu98847fmW844qfe+45vf766zrjjDMUGRmpzp07a+nSpYX2uX79eg0ePFhVqlRRVFSUOnXqpC+//NKvjHdIw4IFCzRq1ChVr15dsbGxuvTSS/26mzdo0EBr167VvHnzfN3Te/ToIalkr22g2rVrpwkTJujw4cOaOHGib/nQoUPVoEGDQuVHjx4twzD8lnlfvw8++ECtWrVSZGSkvvvuO9+6gmPSvdtv2rRJQ4cOVaVKlZSYmKhhw4YpIyPDb7+ZmZm68847Va1aNcXHx+uSSy7Rjh07SjTO/bPPPtOaNWv04IMP+gXokuR0OjV58mRVqlTJbz/eYQEfffSRHn74YSUlJSk2NlaXXHKJtm/f7ivXo0cPffPNN9q6davvNfKeq6LGpA8dOlRxcXHatm2bLr74YsXFxal27dp65ZVXJEmrV6/WhRdeqNjYWNWvX1/Tpk3zq++xY8O9bamom7etSNKUKVN04YUXqkaNGoqMjFTLli01adIkv30fr70VNyb9k08+UceOHRUdHa1q1arpX//6l3bs2OFXxvucd+zYoUGDBikuLk7Vq1fXfffdx5AYACGFTDoAVGBr167Veeedp4SEBD3wwAMKDw/X5MmT1aNHD82bN88XiIwePVpjx47VTTfdpLPOOkupqalatmyZVqxYod69e0uSLr/8cq1du1Z33HGHGjRooL179yolJUXbtm0rMjCTpIyMDM2ePVvnn3++6tWrd8L6mqapSy65RHPmzNGNN96o9u3b6/vvv9f999+vHTt26IUXXvAr/9NPP+nLL7/UiBEjJEljx47VxRdfrAceeECvvvqqbr/9dh06dEjjxo3TDTfcoB9//NFv+0OHDql///668sordfXVV+vjjz/WbbfdpoiICN1www2SrKCvR48e2rRpk0aOHKmGDRvqk08+0dChQ3X4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TZkypVDZ4trbsTp16qQaNWrotdde82tz3377rdatW1fimfcBIJRwCTYAKOfefvtt34RZBd1111168sknlZKSonPPPVe33367wsLCNHnyZGVnZ2vcuHG+si1btlSPHj3UsWNHValSRcuWLdOnn36qkSNHSrKyyz179tSVV16pli1bKiwsTNOnT9eePXv0z3/+87j169q1q1555RXdfvvtat68ua677jo1adJER48e1dy5c/Xll1/qySeflCQNHDhQF1xwgR555BFt2bJF7dq106xZs/TFF1/o7rvv1hlnnFGKZ84ak/7MM89oy5Ytatq0qT766COtWrVKr7/+uu9yaTfffLMmT56soUOHavny5WrQoIE+/fRTLViwQBMmTDiprPcrr7yic889V23atNHw4cPVqFEj7dmzR4sWLdLff/+tX3/9NeB9duzYUZMmTdKTTz6pxo0bq0aNGrrwwgtP+NqeyE8//aSsrCy53W4dOHBACxYs0JdffqnExERNnz7db9Kxf/7zn/r3v/+tSy+9VHfeeacyMjI0adIkNW3aVCtWrAj4OQWqY8eOuvzyyzVhwgQdOHDAdwk2b++IE2V/IyIi9Omnn6pnz54699xzNWzYMHXq1EmHDx/WtGnTtGLFCt17771FtvkqVar4ttmzZ48mTJigxo0ba/jw4X71++ijjzRq1Ch17txZcXFxGjhwYOmehGK89tpr+vHHH3Xrrbdqzpw5futq1qyp3r17q0+fPoqIiNDAgQN1yy23KC0tTW+88YZq1KhR6Ael4trbscLDw/XMM89o2LBh6t69u66++mrfJdgaNGjg60oPACggWNPKAwBOjffyXMXdtm/fbpqmaa5YscLs27evGRcXZ8bExJgXXHCBuXDhQr99Pfnkk+ZZZ51lVqpUyYyOjjabN29uPvXUU77LkO3fv98cMWKE2bx5czM2NtZMTEw0zz77bPPjjz8ucX2XL19uXnPNNWatWrXM8PBws3LlymbPnj3Nd955x3S73b5yR48eNe+55x5fuSZNmpjPPvus3yXITNO6TNeIESP8lnkvZXXspeKKupxY9+7dzVatWpnLli0zu3TpYkZFRZn169c3J06cWKjue/bsMYcNG2ZWq1bNjIiIMNu0aeN3uazjHdtb12Mv//Xnn3+a119/vZmUlGSGh4ebtWvXNi+++GLz008/9ZUp7jJ7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XRUAAACUdzExVkY7WMcOQI8ePTRu3DgZhqEXX3xRYWFhuvzyyyVJmzZtUkZGhnr37u23TU5Ojjp06CBJuu2223T55ZdrxYoV6tOnjwYNGqSuXbsWeax169bp7LPP9lvmDf4DsWfPHj366KOaO3eu9u7dK7fbrYyMDG3bti3gfRVXzy5duvhlv7t166a0tDT9/fffateunXr27Kk2bdqob9++6tOnjwYPHqzKlSurSpUqGjp0qPr27avevXurV69euvLKK5WcnFwqdUPpY0y6TX3y+ye66vOrNOvArGBXBQAAAOWdYVhdzoNxC7BbdWxsrBo1aqR27drp7bff1uLFi/XWW29JktLyfmj45ptvtGrVKt/t999/941L79evn7Zu3ap77rlHO3fuVM+ePXXfffed9KlzOBwyjxlX73K5/B4PGTJEq1at0osvvqiFCxdq1apVqlq1qnJyck76uIFwOp1KSUnRt99+q5YtW+rll19Ws2bNtHnzZknSlClTtGjRInXt2lUfffSRmjZtql9++eW01A2BI0i3OVOBTbQBAAAAVBQOh0MPP/ywHn30UWVmZqply5aKjIzUtm3b1LhxY79b3bp1fdtVr15dQ4YM0fvvv68JEybo9ddfL3L/LVq00JIlS/yWHRu8Vq9eXbt37/YL1I+9zvqCBQt05513qn///mrVqpUiIyO1f//+U3z2/vVctGiRXx0WLFig+Ph41alTR5J1HfZu3bppzJgxWrlypSIiIjR9+nRf+Q4dOuihhx7SwoUL1bp1a02bNq3U6ofSRZBuU4aYyAEAAAC44oor5HQ69corryg+Pl733Xef7rnnHr3zzjv6888/tWLFCr388st65513JEn//e9/9cUXX2jTpk1au3atvv7662LHYN96663auHGj7r//fm3YsEHTpk3T1KlT/cr06NFD+/bt07hx4/Tnn3/qlVde0bfffutXpkmTJnrvvfe0bt06LV68WNdee62io6MDfq5Hjhzx6yGwatUqbd++Xbfffru2b9+uO+64Q+vXr9cXX3yhxx57TKNGjZLD4dDixYv19NNPa9myZdq2bZs+//xz7du3Ty1atNDmzZv10EMPadGiRdq6datmzZqljRs3Mi7dxoIapE+aNElt27ZVQkKCEhIS1KVLl0IN/liffPKJmjdvrqioKLVp00YzZ848TbUNDjLpAAAA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W1+wu/vUqVM1ZswY/frrrzIMQ4ZhaOrUqb5jFezufqLXznu+nnvuOSUnJ6tq1aoaMWKEXC5XkeelJLZt26Z//OMfiouLU0JCgq688krt2bPHt/7XX3/VBRdcoPj4eCUkJKhjx45atmyZJGnr1q0aOHCgKleurNjYWLVq1UozZ8486bqURFAnjgMAAABQ9jJcGYobGxeUY6c9lKbYiNiT2zYtTe+//74aN26sqlWrSpLS09PVt29fdenSRUuXLtXevXt10003aeTIkb7AsKTGjx+vJ554Qg8//LA+/fRT3XbbberevbuaNWumtLQ0XXzxxerdu7fef/99bd68WXfddZff9h6PR3Xq1NEnn3yiqlWrauHChbr55puVnJysK6+80ldu9uzZSkhIUEpKiiQpMTFRY8aM0dKlS9W5c2dJ0sqVK/Xbb7/p888/L7KuH3zwgeLi4nT77bcXud4bME+fPl133XWXJkyYoF69eunrr7/WsGHDVKdOHV1wwQW+8mPGjNG4ceP07LPP6uWXX9a1116rrVu3qkqVKtq+fbsuu+wyjRgxQjfffLOWLVume++9t9jzeNVVV2nNmjX67rvv9MMPP/ie47FK+trNmTNHycnJmjNnjjZt2qSrrrpK7du31/Dhw4utQ3E8Ho8vQJ83b55yc3M1YsQIXXXVVb6Jyq+99lp16NBBkyZNktPp1KpVqxQeHi5JGjFihHJycjR//nzFxsbq999/V1xc2f4vEaTbXKC/PAIAAADl2TfffKM6depIsoK65ORkff31175LM0+bNk1ZWVl69913FRtrBf8TJ07UwIED9cwzz6hmzZolPlb//v19Qe+///1vvfDCC5ozZ46aNWumadOmyePx6K233lJUVJRatWqlv//+W7fddptv+/DwcI0ZM8b3uGHDhlq0aJE+/vhjvyA9NjZWb775piIiInzL+vbtqylTpviC9ClTpqh79+5q1KhRkXXduHGjGjVq5Asei/Pcc89p6NChvuc1atQo/fLLL3ruuef8gvShQ4fq6quvliQ9/fTTeumll7RkyRJddNFFvkz8+PHjJUnNmjXT6tWr9cwzzxR5zOjoaMXFxSksLExJSUnF1q2kr13lypU1ceJEOZ1ONW/eXAMGDNDs2bNPKkifPXu2Vq9erc2bN6tu3bqSpHfffVetWrXy/Uiybds23X///WrevLkkqUmTJr7tt23bpssvv1xt2rSRpGJfn9JEkG5TTBwHAACA0hITHqO0h9JOXLCMjh2IHj16aNy4cYqLi9ORI0f06quvql+/flqyZInq16+vdevWqV27dr4gT5K6desmj8ejDRs2BBSkt23b1nffMAwlJSVp7969kqR169apbdu2ioqK8pXp0qVLoX288sorevvtt7Vt2zZlZmYqJyen0ARqbdq08QvQJWn48OG64YYb9Pzzz8vhcGjatGl64YUXiq1rSZN369at08033+y3rFu3boW64Rd87rGxsUpISPB77meffbZf+aKee6BK+tq1atVKTqfTVyY5OVmrV68+6WPWrVvXF6BLUsuWLVWpUiWtW7dOnTt31qhRo3TTTTfpvffeU69evXTFFVfojDPOkCTdeeeduu222zRr1iz16tVLl19+ud+5KwuMSQcAAAAqOMMwFBsRG5RboHMtxcbGqlGjRmrcuLE6d+6sN998U+np6XrjjTdKvA+Hw1EoqC1qTPOxWWnDMOTxeEp8nA8//FD33XefbrzxRs2aNUurVq3SsGHDCk0OVzAo9Ro4cKAiIyM1ffp0ffXVV3K5XBo8eHCxx2ratKn++uuvUxqbXdCpPveydLrrNnr0aK1du1YDBgzQjz/+qJYtW2r69OmSpJtuukl//fWXrrvuOq1evVqdOnXSyy+/XGZ1kQjSbYuJ4wAAAADre7HD4VBmZqYkqUWLFvr111+Vnp7uK7NgwQI5HA41a9ZMklS9enXt2rXLt97tdmvNmjUBHbdFixb67bfflJWV5Vv2yy+/+JVZsGCBunbtqttvv10dOnRQ48aN9eeff5Zo/2FhYRoyZIimTJmiKVOm6J///Keio6OLLX/NNdcoLS1Nr776apHrvdcvb9GihRYsWFConi1btixRvbz7WLJkid+yY5/7sSIiIuR2u0+43xO9dqWtRYsW2r59u7Zv3+5b9vvvv+vw4cN+56Rp06a65557NGvWLF122WWaMmWKb13dunV166236vPPP9e9994b0A9GJ4Mg3ea4BBsAAABCSXZ2tvbs2aPdu3dr3bp1uuOOO5SWlqaBAwdKsib5ioqK0pAhQ7RmzRrNmTNHd9xxh6677jpfd+kLL7xQ33zzjb755hutX79et912my+ILalrrrlGhmFo+PDh+v333zVz5kw999xzfmWaNGmiZcuW6fvvv9cff/yh//znP1q6dGmJj3HTTTfpxx9/1HfffacbbrjhuGXPPvtsPfDAA7r33nv1wAMPaNGiRdq6datmz56tK664Qu+8844k6f7779fUqVM1adIkbdy4Uc8//7w+//xz3XfffSWu16233qqNGzfq/vvv14YNGzRt2rQTTsrXoEEDbd68WatWrdL+/fuVnZ1dqExJXruT5fF4tGrVKr/bunXr1KtXL7Vp00bXXnutVqxYoSVLluj6669X9+7d1alTJ2VmZmrkyJGaO3eutm7dqgULFmjp0qVq0aKFJOnuu+/W999/r82bN2vFihWaM2eOb11ZIUi3KcakAwAAIBR9//33at68uWrXrq2zzz5bS5cu1SeffKIePXpIkmJiYvT999/r4MGD6ty5swYPHqyePXtq4sSJvn3ccMMNGjJkiC8Ya9Sokd+kaSURFxenr776SqtXr1aHDh30yCOPFJo47ZZbbtFll12mq666SmeffbYOHDhQ7OzrRWnSpIm6du2q5s2bFxoDXpRnnnlG06ZN0+LFi9W3b1+1atVKo0aNUtu2bX2XYBs0aJBefPFFPffcc2rVqpUmT56sKVOm+M5fSdSrV0+fffaZZsyYoXbt2um1117T008/fdxtLr/8cl100UW64IILVL16df3vf/8rVKYkr93JSktLU8eOHdWhQwffbeDAgTIMQ1988YUqV66s888/X7169VKjRo300UcfSZKcTqcOHDig66+/Xk2bNtWVV16pfv36+SYEdLvdGjFihFq0aKGLLrpITZs2LbY3Q2kxzBCbPjw1NVWJiYk6cuSIEhISgl2dYo1fOF73pdyn7pW7K+W2lBPO4ghI1lirmTNnqn///rQZlAhtBoGizSBQtJngyMrK0ubNm9WwYUO/ic/KA4/Ho9TUVCUkJPhmdK+oTNNUkyZNdPvtt2vUqFHBrk65ZZc2c7z/u0DiUGZ3tynGpAMAAAAV1759+/Thhx9q9+7dGjZsWLCrAxshSAcAAACA06xGjRqqVq2aXn/9dVWuXDnY1YGNEKTbFGPSAQAAgIorxEYdIwAVe5BHBcDs7gAAAAAQOgjSbYox6QAAAAAQegjSbY5uMAAAAAAQOgjSbYox6QAAAAAQegjSAQAAAACwCYJ0AAAAAABsgiDdppg4DgAAADgxwzA0Y8aM45YZOnSoBg0aVOJ9btmyRYZhaNWqVadUt7LUoEEDTZgwwfe4LM4DgoMg3ea4BBsAAABCxdChQ3XppZcGtM2uXbvUr18/ScUH1y+++KKmTp1aSrXMt2nTJg0bNkx16tRRZGSkGjZsqKuvvlrLli0r9WOdSDDPw7FK8oMBikeQblNMHAcAAACcWFJSkiIjI49bJjExUZUqVSrV4y5btkwdO3bUH3/8ocmTJ+v333/X9OnT1bx5c917772leqySCNZ5QOkjSLc5MukAAAA4VaYppacH53YqVxTu0aOH7rzzTj3wwAOqUqWKkpKSNHr0aL8yBbO2DRs2lCR16NBBhmGoR48ekgp38/7uu+907rnnqlKlSqpataouvvhi/fnnnwGcT1NDhw5VkyZN9NNPP2nAgAE644wz1L59ez322GP64osvfGVXr16tCy+8UNHR0apatapuvvlmpaWl+dZ76/bcc88pOTlZVatW1YgRI+RyuXxl9u7dq4EDByo6OloNGzbUBx98UKhOJ3MesrOzdeedd6pGjRqKiorSueeeq6VLl/rWz507V4ZhaPbs2erUqZNiYmLUtWtXbdiwocTn6lgej0ePP/64r/dB+/bt9d133/nW5+TkaOTIkUpOTlZUVJTq16+vsWPH+s776NGjVa9ePUVGRqpWrVq68847T7oudkWQblOMSQcAAEBpyciQ4uKCc8vIOLW6v/POO4qNjdXixYs1btw4Pf7440pJSSmy7JIlSyRJP/zwg3bt2qXPP/+8yHLp6ekaNWqUli1bptmzZ8vhcOjSSy+Vx+MpUZ1WrVqltWvX6t5775XDUTik8mar09PT1bdvX1WuXFlLly7VJ598oh9++EEjR470Kz9nzhz9+eefmjNnjt555x1NnTrVr1v60KFDtX37ds2ZM0effvqpXn31Ve3du7fY+pX0PDzwwAP67LPP9M4772jFihVq3Lix+vbtq4MHD/qVe+SRRzR+/HgtW7ZMYWFhuuGGG0pymor04osvavz48Xruuef022+/qW/fvrrkkku0ceNGSdJLL72kL7/8Uh9//LE2bNigDz74QA0aNJAkffbZZ3rhhRc0efJkbdy4UTNmzFCbNm1Oui52FRbsCuD4yKQDAAAglLVt21aPPfaYJKlJkyaaOHGiZs+erd69excqW716dUlS1apVlZSUVOw+L7/8cr/Hb7/9tqpXr67ff/9drVu3PmGdvAFl8+bNj1tu2rRpysrK0rvvvqvY2FhJ0sSJEzVw4EA988wzqlmzpiSpcuXKmjhxopxOp5o3b64BAwZo9uzZGj58uP744w99++23WrJkiTp37ixJeuutt9SiRYtij1uS85Cenq5JkyZp6tSpvrHsb7zxhlJSUvTWW2/p/vvv95V96qmn1L17d0nSgw8+qAEDBigrK0tRUVEnPFfHeu655/Tvf/9b//znPyVJzzzzjObMmaMJEybolVde0bZt29SkSROde+65MgxD9evX9227bds2JSUlqVevXgoPD1e9evV01llnlfjHlfKCTLpNMSYdAAAApSUmRkpLC84tJubU6t62bVu/x8nJycfNIpfExo0bdfXVV6tRo0ZKSEjwZWq3bdtWou3NEvbhX7dundq1a+cL0CWpW7du8ng8fl3GW7VqJafT6Xtc8DmuW7dOYWFh6tixo2998+bNT3ls+Z9//imXy6Vu3br5loWHh+uss87SunXr/MoWfA2Sk5Ml6aReg9TUVO3cudPvmJJ1TrzHHDp0qFatWqVmzZrpzjvv1KxZs3zlrrjiCmVmZqpRo0YaPny4pk+frtzc3IDrYXcE6XZHIh0AAACnyDCk2Njg3E51FGd4ePgxz8U45czpwIEDdfDgQb3xxhtavHixFi9eLMkaD10STZs2lSStX7/+lOrhVRbPsTQVrJ93WG5Z1e/MM8/U5s2b9cQTTygzM1NXXnmlBg8eLEmqW7euNmzYoFdffVXR0dG6/fbbdf755/uN368ICNJtijHpAAAAQGAiIiIkSW63u9gyBw4c0IYNG/Too4+qZ8+eatGihQ4dOhTQcdq3b6+WLVtq/PjxRQarhw8fliS1aNFCv/76q9LT033rFixYIIfDoWbNmpXoWM2bN1dubq6WL1/uW7ZhwwbfMYpSkvNwxhlnKCIiQgsWLPAtc7lcWrp0qVq2bFmiugUqISFBtWrV8jumZJ2TgsdMSEjQVVddpTfeeEMfffSRPvvsM984+ejoaA0cOFAvvfSS5s6dq0WLFmn16tVlUt9gYUy6zTEmHQAAACiZGjVqKDo6Wt99953q1KmjqKgoJSYm+pWpXLmyqlatqtdff13Jycnatm2bHnzwwYCOYxiGpkyZol69eum8887TI488oubNmystLU1fffWVZs2apXnz5unaa6/VY489piFDhmj06NHat2+f7rjjDl13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",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0866e464",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:12:26.269001Z",
     "iopub.status.busy": "2025-02-09T06:12:26.268667Z",
     "iopub.status.idle": "2025-02-09T06:12:26.272294Z",
     "shell.execute_reply": "2025-02-09T06:12:26.271572Z"
    },
    "papermill": {
     "duration": 0.060417,
     "end_time": "2025-02-09T06:12:26.273878",
     "exception": false,
     "start_time": "2025-02-09T06:12:26.213461",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f7a61503",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-09T06:12:26.386349Z",
     "iopub.status.busy": "2025-02-09T06:12:26.386028Z",
     "iopub.status.idle": "2025-02-09T06:12:27.534727Z",
     "shell.execute_reply": "2025-02-09T06:12:27.533822Z"
    },
    "papermill": {
     "duration": 1.20612,
     "end_time": "2025-02-09T06:12:27.536613",
     "exception": false,
     "start_time": "2025-02-09T06:12:26.330493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Predicted u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Analytical u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 687.818647,
   "end_time": "2025-02-09T06:12:29.017784",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-09T06:01:01.199137",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
