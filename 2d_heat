{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85b90652",
   "metadata": {
    "papermill": {
     "duration": 0.004324,
     "end_time": "2025-02-25T21:35:17.216812",
     "exception": false,
     "start_time": "2025-02-25T21:35:17.212488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "942b340a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:35:17.225947Z",
     "iopub.status.busy": "2025-02-25T21:35:17.225279Z",
     "iopub.status.idle": "2025-02-25T21:35:20.823898Z",
     "shell.execute_reply": "2025-02-25T21:35:20.823188Z"
    },
    "papermill": {
     "duration": 3.605434,
     "end_time": "2025-02-25T21:35:20.825847",
     "exception": false,
     "start_time": "2025-02-25T21:35:17.220413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fb09dae1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:35:20.836379Z",
     "iopub.status.busy": "2025-02-25T21:35:20.835993Z",
     "iopub.status.idle": "2025-02-25T21:35:20.851309Z",
     "shell.execute_reply": "2025-02-25T21:35:20.850549Z"
    },
    "papermill": {
     "duration": 0.021951,
     "end_time": "2025-02-25T21:35:20.852869",
     "exception": false,
     "start_time": "2025-02-25T21:35:20.830918",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d45ef837",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:35:20.861203Z",
     "iopub.status.busy": "2025-02-25T21:35:20.860657Z",
     "iopub.status.idle": "2025-02-25T21:35:20.864289Z",
     "shell.execute_reply": "2025-02-25T21:35:20.863657Z"
    },
    "papermill": {
     "duration": 0.00941,
     "end_time": "2025-02-25T21:35:20.865892",
     "exception": false,
     "start_time": "2025-02-25T21:35:20.856482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "75929732",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:35:20.874105Z",
     "iopub.status.busy": "2025-02-25T21:35:20.873592Z",
     "iopub.status.idle": "2025-02-25T21:35:20.933744Z",
     "shell.execute_reply": "2025-02-25T21:35:20.932914Z"
    },
    "papermill": {
     "duration": 0.066434,
     "end_time": "2025-02-25T21:35:20.935764",
     "exception": false,
     "start_time": "2025-02-25T21:35:20.869330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b2117f9",
   "metadata": {
    "papermill": {
     "duration": 0.003405,
     "end_time": "2025-02-25T21:35:20.942875",
     "exception": false,
     "start_time": "2025-02-25T21:35:20.939470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fb11bc01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:35:20.950984Z",
     "iopub.status.busy": "2025-02-25T21:35:20.950676Z",
     "iopub.status.idle": "2025-02-25T21:35:21.159283Z",
     "shell.execute_reply": "2025-02-25T21:35:21.158379Z"
    },
    "papermill": {
     "duration": 0.215346,
     "end_time": "2025-02-25T21:35:21.161665",
     "exception": false,
     "start_time": "2025-02-25T21:35:20.946319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a80623d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:35:21.173274Z",
     "iopub.status.busy": "2025-02-25T21:35:21.172708Z",
     "iopub.status.idle": "2025-02-25T21:35:22.452448Z",
     "shell.execute_reply": "2025-02-25T21:35:22.451595Z"
    },
    "papermill": {
     "duration": 1.287603,
     "end_time": "2025-02-25T21:35:22.454549",
     "exception": false,
     "start_time": "2025-02-25T21:35:21.166946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0932e368",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:35:22.463949Z",
     "iopub.status.busy": "2025-02-25T21:35:22.463306Z",
     "iopub.status.idle": "2025-02-25T21:35:22.467048Z",
     "shell.execute_reply": "2025-02-25T21:35:22.466350Z"
    },
    "papermill": {
     "duration": 0.010064,
     "end_time": "2025-02-25T21:35:22.468627",
     "exception": false,
     "start_time": "2025-02-25T21:35:22.458563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "883c0f9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:35:22.477588Z",
     "iopub.status.busy": "2025-02-25T21:35:22.477156Z",
     "iopub.status.idle": "2025-02-25T21:46:31.140108Z",
     "shell.execute_reply": "2025-02-25T21:46:31.139125Z"
    },
    "papermill": {
     "duration": 668.670081,
     "end_time": "2025-02-25T21:46:31.142451",
     "exception": false,
     "start_time": "2025-02-25T21:35:22.472370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1200 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1200/1200 [11:08<00:00,  1.79it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1200)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 20*loss_res + 5*loss_ic + 2*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d96d0a40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:46:31.252032Z",
     "iopub.status.busy": "2025-02-25T21:46:31.251684Z",
     "iopub.status.idle": "2025-02-25T21:46:31.266632Z",
     "shell.execute_reply": "2025-02-25T21:46:31.265680Z"
    },
    "papermill": {
     "duration": 0.071268,
     "end_time": "2025-02-25T21:46:31.268320",
     "exception": false,
     "start_time": "2025-02-25T21:46:31.197052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.001056, Loss_IC: 0.137502, loss_bc: 0.046704\n",
      "Train Loss: 0.185262\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba40922f",
   "metadata": {
    "papermill": {
     "duration": 0.052832,
     "end_time": "2025-02-25T21:46:31.375181",
     "exception": false,
     "start_time": "2025-02-25T21:46:31.322349",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "118d805e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:46:31.484053Z",
     "iopub.status.busy": "2025-02-25T21:46:31.483254Z",
     "iopub.status.idle": "2025-02-25T21:46:31.487097Z",
     "shell.execute_reply": "2025-02-25T21:46:31.486227Z"
    },
    "papermill": {
     "duration": 0.059421,
     "end_time": "2025-02-25T21:46:31.488728",
     "exception": false,
     "start_time": "2025-02-25T21:46:31.429307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "097d752c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:46:31.597221Z",
     "iopub.status.busy": "2025-02-25T21:46:31.596573Z",
     "iopub.status.idle": "2025-02-25T21:46:31.603044Z",
     "shell.execute_reply": "2025-02-25T21:46:31.602422Z"
    },
    "papermill": {
     "duration": 0.062614,
     "end_time": "2025-02-25T21:46:31.604574",
     "exception": false,
     "start_time": "2025-02-25T21:46:31.541960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(250)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "60c8894d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:46:31.714048Z",
     "iopub.status.busy": "2025-02-25T21:46:31.713718Z",
     "iopub.status.idle": "2025-02-25T21:46:31.728008Z",
     "shell.execute_reply": "2025-02-25T21:46:31.727231Z"
    },
    "papermill": {
     "duration": 0.071313,
     "end_time": "2025-02-25T21:46:31.729608",
     "exception": false,
     "start_time": "2025-02-25T21:46:31.658295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 284.411804\n",
      "Train Loss: 285.094540\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "87b1afa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:46:31.837990Z",
     "iopub.status.busy": "2025-02-25T21:46:31.837614Z",
     "iopub.status.idle": "2025-02-25T21:46:31.851432Z",
     "shell.execute_reply": "2025-02-25T21:46:31.850638Z"
    },
    "papermill": {
     "duration": 0.069988,
     "end_time": "2025-02-25T21:46:31.853049",
     "exception": false,
     "start_time": "2025-02-25T21:46:31.783061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.001056, Loss_IC: 0.137502, loss_bc: 0.046704\n",
      "Train Loss: 0.185262\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b9a5852b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:46:31.965928Z",
     "iopub.status.busy": "2025-02-25T21:46:31.965578Z",
     "iopub.status.idle": "2025-02-25T21:46:32.269891Z",
     "shell.execute_reply": "2025-02-25T21:46:32.269011Z"
    },
    "papermill": {
     "duration": 0.360302,
     "end_time": "2025-02-25T21:46:32.271716",
     "exception": false,
     "start_time": "2025-02-25T21:46:31.911414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+0AAAIjCAYAAAB20vpjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB74ElEQVR4nO3dd3wU1cLG8Wc3vQcCIUFC750LiFEElAACogheGy8CckEEVESxF1AR4YqigogNLHDtFREJXRGpBmkiIE0h9BBCINlk5/0jZs2mQBYSdmf39/18VrMzZ2fO7J4kPDllLIZhGAIAAAAAAB7H6u4KAAAAAACA4hHaAQAAAADwUIR2AAAAAAA8FKEdAAAAAAAPRWgHAAAAAMBDEdoBAAAAAPBQhHYAAAAAADwUoR0AAAAAAA9FaAcAAAAAwEMR2gEAgEezWCwaO3asu6tx0ezevVsWi0WzZs0qs2MuXbpUFotFS5cuLbNjevJ5AcCbENoBwEvMmjVLFotFa9eudXdVSiUlJUX/93//p4SEBAUFBalixYpKSkrSzJkzlZub6+7qmd5rr71WLqEv/xEUFKQqVaqoU6dOeu6553T48OEyO5enOXr0qMaMGaMGDRooODhYFStWVLdu3TR37twLOu6cOXM0ZcqUsqmkm5V1ewMA/MNiGIbh7koAAC7crFmzNGjQIK1Zs0Zt2rRxd3XO6q233tKwYcNUpUoV9e/fX/Xq1dPJkye1aNEiffvtt3r22Wf16KOPuruapta0aVNVqlSpzHo4ly5dqquuukr33HOP2rZtq9zcXB0+fFg//fSTvvnmG0VFRenjjz/W1VdfXSbnK+jMmTPy9/eXv79/mR/7XLZt26bOnTvr8OHDGjRokNq0aaO0tDTNnj1bKSkpeuCBB/Tf//73vI597bXXatOmTdq9e7fTdsMwlJWVpYCAAPn5+ZXBVUh2u13Z2dkKDAyU1Vr2fTYltbfyPi8A+IKL/9sPAODTfv75Zw0bNkyJiYmaN2+eIiIiHPtGjRqltWvXatOmTW6sIc7myiuv1I033ui0bcOGDeratav69u2rLVu2KD4+/oLPkx/2goODFRwcfMHHOx82m0033nijjh8/ruXLl6tdu3aOfffdd5/69eunF154QW3atNHNN99cZue1WCxlfs1Wq9Ut76O7zgsA3oQ/eQKAj/nll1/UvXt3RUZGKjw8XJ07d9bPP//sVMZms2ncuHGqV6+egoODFRMTo/bt2ys5OdlRJjU1VYMGDVK1atUUFBSk+Ph4XX/99UV6DQsbN26cLBaLZs+e7RTY87Vp00YDBw50PD916pTuv/9+xzD6Bg0a6IUXXlDhgWIWi0UjR47UJ598osaNGyskJESJiYnauHGjJGnGjBmqW7eugoOD1alTpyL17NSpk5o2bap169bp8ssvV0hIiGrVqqXXX3+9SB0PHTqkwYMHq0qVKgoODlaLFi307rvvOpXJn5f8wgsv6I033lCdOnUUFBSktm3bas2aNUWO+dtvv+nGG29UxYoVFRwcrDZt2ujrr792KpM/BWLFihUaPXq0KleurLCwMN1www1Ow9Nr1qypzZs3a9myZY7h7J06dZJUus/WVS1atNCUKVOUlpamqVOnOrYPHDhQNWvWLFJ+7NixslgsTtvyP7/Zs2erSZMmCgoK0vz58x37Cs5pz3/9jh07NHDgQEVHRysqKkqDBg1SZmam03FPnz6te+65R5UqVVJERISuu+46/fXXX6WaJ//ZZ59p06ZNevjhh50CuyT5+flpxowZio6OdjpO/jSCjz76SI8++qji4uIUFham6667Tvv27XOU69Spk7799lvt2bPH8Rnlv1fFzWkfOHCgwsPDtXfvXl177bUKDw/XJZdcomnTpkmSNm7cqKuvvlphYWGqUaOG5syZ41TfwnPL89tScY/8tiJJM2fO1NVXX63Y2FgFBQWpcePGmj59utOxz9beSprT/sknn6h169YKCQlRpUqV9H//93/666+/nMrkX/Nff/2l3r17Kzw8XJUrV9YDDzzAFBoAPoWedgDwIZs3b9aVV16pyMhIPfjggwoICNCMGTPUqVMnLVu2zBFMxo4dqwkTJug///mPLr30UqWnp2vt2rVav369unTpIknq27evNm/erLvvvls1a9bUoUOHlJycrL179xYb1CQpMzNTixYtUocOHVS9evVz1tcwDF133XVasmSJBg8erJYtW+r777/XmDFj9Ndff+mll15yKv/DDz/o66+/1ogRIyRJEyZM0LXXXqsHH3xQr732moYPH67jx49r0qRJuuOOO7R48WKn1x8/flw9evTQTTfdpFtvvVUff/yx7rrrLgUGBuqOO+6QlBcCO3XqpB07dmjkyJGqVauWPvnkEw0cOFBpaWm69957nY45Z84cnTx5UnfeeacsFosmTZqkPn366I8//lBAQIDjc7niiit0ySWX6OGHH1ZYWJg+/vhj9e7dW5999pluuOEGp2PefffdqlChgp566int3r1bU6ZM0ciRI/XRRx9JkqZMmaK7775b4eHheuyxxyRJVapUKfVnez5uvPFGDR48WAsWLND48ePP6xiLFy/Wxx9/rJEjR6pSpUoltqN8N910k2rVqqUJEyZo/fr1euuttxQbG6uJEyc6ygwcOFAff/yx+vfvr8suu0zLli1Tz549S1Wfb775RpJ0++23F7s/KipK119/vd59913t2LFDdevWdewbP368LBaLHnroIR06dEhTpkxRUlKSUlJSFBISoscee0wnTpzQn3/+6WjH4eHhZ61Pbm6uunfvrg4dOmjSpEmaPXu2Ro4cqbCwMD322GPq16+f+vTpo9dff1233367EhMTVatWrWKP1aFDB73//vtO2/bs2aPHH39csbGxjm3Tp09XkyZNdN1118nf31/ffPONhg8fLrvd7vg+O1t7K07+VJ62bdtqwoQJOnjwoF5++WWtWLFCv/zyi6Kjo52uuVu3bmrXrp1eeOEFLVy4UJMnT1adOnV01113nfX9AgCvYQAAvMLMmTMNScaaNWtKLNO7d28jMDDQ2Llzp2Pb/v37jYiICKNDhw6ObS1atDB69uxZ4nGOHz9uSDL++9//ulTHDRs2GJKMe++9t1Tlv/zyS0OS8eyzzzptv/HGGw2LxWLs2LHDsU2SERQUZOzatcuxbcaMGYYkIy4uzkhPT3dsf+SRRwxJTmU7duxoSDImT57s2JaVlWW0bNnSiI2NNbKzsw3DMIwpU6YYkowPPvjAUS47O9tITEw0wsPDHefZtWuXIcmIiYkxjh075ij71VdfGZKMb775xrGtc+fORrNmzYwzZ844ttntduPyyy836tWr59iW/xknJSUZdrvdsf2+++4z/Pz8jLS0NMe2Jk2aGB07dizynp7rsy3JkiVLDEnGJ598UmKZFi1aGBUqVHA8HzBggFGjRo0i5Z566imj8D9BJBlWq9XYvHlzkfKSjKeeeqrI6++44w6ncjfccIMRExPjeL5u3TpDkjFq1CincgMHDixyzOK0bNnSiIqKOmuZF1980ZBkfP3114Zh/PM+XXLJJU5t7uOPPzYkGS+//LJjW8+ePYt9f/LbzsyZMx3bBgwYYEgynnvuOce248ePGyEhIYbFYjE+/PBDx/bffvutyPXl12vJkiXFXsfp06eN1q1bG1WrVjUOHDjg2J6ZmVmkbLdu3YzatWs7bSupvRU+b3Z2thEbG2s0bdrUOH36tKPc3LlzDUnGk08+WeSan376aadjtmrVymjdunWx1wEA3ojh8QDgI3Jzc7VgwQL17t1btWvXdmyPj4/Xbbfdph9//FHp6emSpOjoaG3evFnbt28v9lghISEKDAzU0qVLdfz48VLXIf/4xQ2LL868efPk5+ene+65x2n7/fffL8Mw9N133zlt79y5s1PvbP7Igb59+zqdM3/7H3/84fR6f39/3XnnnY7ngYGBuvPOO3Xo0CGtW7fOUae4uDjdeuutjnIBAQG65557lJGRoWXLljkd8+abb1aFChUcz6+88kqncx87dkyLFy/WTTfdpJMnT+rIkSM6cuSIjh49qm7dumn79u1Fhg0PHTrUaXj5lVdeqdzcXO3Zs6fIe1jYuT7bCxEeHq6TJ0+e9+s7duyoxo0bl7r8sGHDnJ5feeWVOnr0qKOd5Q+vHz58uFO5u+++u1THP3ny5Dnbav7+/HPmu/32251ee+ONNyo+Pl7z5s0r1blL8p///MfxdXR0tBo0aKCwsDDddNNNju0NGjRQdHR0kfZ9NsOHD9fGjRv12WefKS4uzrE9JCTE8fWJEyd05MgRdezYUX/88YdOnDjhcv3Xrl2rQ4cOafjw4U5z3Xv27KmGDRvq22+/LfKa4j5nV64NAMyO0A4APuLw4cPKzMxUgwYNiuxr1KiR7Ha7Y87t008/rbS0NNWvX1/NmjXTmDFj9OuvvzrKBwUFaeLEifruu+9UpUoVx3Dd1NTUs9YhMjJSkkod7Pbs2aOqVasWCU6NGjVy7C+o8JD7qKgoSVJCQkKx2wv/waFq1aoKCwtz2la/fn1JcsyB37Nnj+rVq1dkJezS1ik/wOefe8eOHTIMQ0888YQqV67s9Hjqqack5c2hd+WYZ3Ouz/ZCZGRklPoPMsUpaSh3Sc71PuzZs0dWq7XIcQsOYz+biIiIc7bV/P2Fr7tevXpOzy0Wi+rWrXvONR/OJjg4WJUrV3baFhUVpWrVqhVZIyAqKqrUf1CbMWOGZs6cqVdffVWXXXaZ074VK1YoKSlJYWFhio6OVuXKlR13djif0J7//VHcz6GGDRsW+f4p7porVKjg0h8LAcDsCO0AgCI6dOignTt36p133lHTpk311ltv6V//+pfeeustR5lRo0bp999/14QJExQcHKwnnnhCjRo10i+//FLicevWrSt/f3/H4nBlraTbY5W03bgIdz0917ntdrsk6YEHHlBycnKxj8Ih80KupzSf7fmw2Wz6/fffnepaOEjmK2kRsYK9uqVR3p9ro0aNdOLECe3du7fEMvl/8HBlhMD5Ko/2vXr1at177736z3/+o6FDhzrt27lzpzp37qwjR47oxRdf1Lfffqvk5GTdd999kv5pu+WprG55BwBmRmgHAB9RuXJlhYaGatu2bUX2/fbbb7JarU490hUrVtSgQYP0v//9T/v27VPz5s2LrLZdp04d3X///VqwYIE2bdqk7OxsTZ48ucQ6hIaG6uqrr9by5cudVtIuSY0aNbR///4ivZ2//fabY39Z2r9/v06dOuW07ffff5ckx7D7GjVqaPv27UUCy/nWKX+qQkBAgJKSkop9nE/vdUmBWSrdZ+uqTz/9VKdPn1a3bt0c2ypUqKC0tLQiZUszjL8s1KhRQ3a7Xbt27XLavmPHjlK9/tprr5Ukvffee8XuT09P11dffaWGDRsW+cNK4ekHhmFox44dTtM3zvYZXQyHDx/WjTfeqJYtWzpWoS/om2++UVZWlr7++mvdeeed6tGjh5KSkor940ppryX/+6O4n0Pbtm0r8+9pAPAGhHYA8BF+fn7q2rWrvvrqK6chugcPHtScOXPUvn17x/D1o0ePOr02PDxcdevWVVZWlqS8VeDPnDnjVKZOnTqKiIhwlCnJU089JcMw1L9/f2VkZBTZv27dOsft03r06KHc3Fyn24hJ0ksvvSSLxaLu3buX7uJLKScnRzNmzHA8z87O1owZM1S5cmW1bt3aUafU1FTHSu35r3v11VcVHh6ujh07unTO2NhYderUSTNmzNCBAweK7C94KzdXhIWFFRuYz/XZno8NGzZo1KhRqlChgmNFcSmvTZw4ccJp+P2BAwf0xRdfnPe5XJH/B4TXXnvNafurr75aqtffeOONaty4sZ5//nmtXbvWaZ/dbtddd92l48ePO6YxFPTee+85/bHp008/1YEDB5zabFhY2HkNMS8Lubm5uuWWW5Sdna3PPvtMgYGBRcrk93IX7LE/ceKEZs6cWaRsSe2tsDZt2ig2Nlavv/66U5v77rvvtHXr1lKv7A8AvoRbvgGAl3nnnXccC3AVdO+99+rZZ59VcnKy2rdvr+HDh8vf318zZsxQVlaWJk2a5CjbuHFjderUSa1bt1bFihW1du1affrppxo5cqSkvN7nzp0766abblLjxo3l7++vL774QgcPHtQtt9xy1vpdfvnlmjZtmoYPH66GDRuqf//+qlevnk6ePKmlS5fq66+/1rPPPitJ6tWrl6666io99thj2r17t1q0aKEFCxboq6++0qhRo1SnTp0yfOfy5rRPnDhRu3fvVv369fXRRx8pJSVFb7zxhuP2bEOHDtWMGTM0cOBArVu3TjVr1tSnn36qFStWaMqUKefVKz5t2jS1b99ezZo105AhQ1S7dm0dPHhQK1eu1J9//qkNGza4fMzWrVtr+vTpevbZZ1W3bl3Fxsbq6quvPudney4//PCDzpw5o9zcXB09elQrVqzQ119/raioKH3xxRdOi5jdcssteuihh3TDDTfonnvuUWZmpqZPn6769etr/fr1Ll+Tq1q3bq2+fftqypQpOnr0qOOWb/mjJ87VOxwYGKhPP/1UnTt3Vvv27TVo0CC1adNGaWlpmjNnjtavX6/777+/2DZfsWJFx2sOHjyoKVOmqG7duhoyZIhT/T766CONHj1abdu2VXh4uHr16lW2b0IJXn/9dS1evFjDhg3TkiVLnPZVqVJFXbp0UdeuXRUYGKhevXrpzjvvVEZGht58803FxsYW+QNTSe2tsICAAE2cOFGDBg1Sx44ddeuttzpu+VazZk3H0HsAQAHuWrYeAFC28m8HVtJj3759hmEYxvr1641u3boZ4eHhRmhoqHHVVVcZP/30k9Oxnn32WePSSy81oqOjjZCQEKNhw4bG+PHjHbc9O3LkiDFixAijYcOGRlhYmBEVFWW0a9fO+Pjjj0td33Xr1hm33XabUbVqVSMgIMCoUKGC0blzZ+Pdd981cnNzHeVOnjxp3HfffY5y9erVM/773/863fLMMPJuCzZixAinbfm3zip8a7ribl/WsWNHo0mTJsbatWuNxMREIzg42KhRo4YxderUInU/ePCgMWjQIKNSpUpGYGCg0axZM6fbc53t3Pl1LXy7sZ07dxq33367ERcXZwQEBBiXXHKJce211xqffvqpo0xJt/Ur7nZeqampRs+ePY2IiAhDkuN2XOf6bEuSf478R0BAgFG5cmWjQ4cOxvjx441Dhw4V+7oFCxYYTZs2NQIDA40GDRoYH3zwQYm3fCv8+ZX0fuW//vDhw07l8t+fgrfyO3XqlDFixAijYsWKRnh4uNG7d29j27ZthiTj+eefP+s15zt06JAxevRoo27dukZQUJARHR1tJCUlOW7zVtz79L///c945JFHjNjYWCMkJMTo2bOnsWfPHqeyGRkZxm233WZER0cbkhy3fyvplm9hYWFFzpffbgurUaOG0639CreR/PewuEfBW7d9/fXXRvPmzY3g4GCjZs2axsSJE4133nmnyPtcUnsr6VZzH330kdGqVSsjKCjIqFixotGvXz/jzz//dCpT0jUX134AwJtZDOMirMIDAICH69Spk44cOaJNmza5uyooZykpKWrVqpU++OAD9evXr0yPvXTpUl111VX65JNPdOONN5bpsQEAvok57QAAwGudPn26yLYpU6bIarWqQ4cObqgRAACuYU47AADwWpMmTdK6det01VVXyd/fX999952+++47DR061OluCQAAeCpCOwAA8FqXX365kpOT9cwzzygjI0PVq1fX2LFj9dhjj7m7agAAlApz2gEAAAAA8FDMaQcAAAAAwEMR2gEAAAAA8FDMaZdkt9u1f/9+RUREyGKxuLs6AAAAAAAvZxiGTp48qapVq8pqLbk/ndAuaf/+/awgCwAAAAC46Pbt26dq1aqVuJ/QLikiIkJS3psVGRnp5tqUzGazacGCBeratasCAgLcXR2YAG0GrqLNwFW0GbiKNgNX0WbgKrO0mfT0dCUkJDjyaEkI7ZJjSHxkZKTHh/bQ0FBFRkZ6dOOD56DNwFW0GbiKNgNX0WbgKtoMXGW2NnOuKdosRAcAAAAAgIcitAMAAAAA4KEI7QAAAAAAeCjmtAMAAAA+wjAM5eTkKDc3191VKTWbzSZ/f3+dOXPGVPWG+3hKm/Hz85O/v/8F31ac0A4AAAD4gOzsbB04cECZmZnuropLDMNQXFyc9u3bd8HhB77Bk9pMaGio4uPjFRgYeN7HILQDAAAAXs5ut2vXrl3y8/NT1apVFRgY6PYwU1p2u10ZGRkKDw+X1crsXpybJ7QZwzCUnZ2tw4cPa9euXapXr95514XQDgAAAHi57Oxs2e12JSQkKDQ01N3VcYndbld2draCg4MJ7SgVT2kzISEhCggI0J49exz1OR+0egAAAMBHEHqBi6ssvuf4rgUAAAAAwEMR2gEAAAAA8FCEdgAAAAA+a/fu3bJYLEpJSSmxzNKlS2WxWJSWllam57ZYLPryyy/L9JjwPoR2AAAAAB5r0KBBqlChgvz8/BQQEKBatWrpwQcf1JkzZ8rk+AkJCTpw4ICaNm1aJscrSwMHDlTv3r3dXQ24GavHAwAAAPBonTt31nvvvafc3FytW7dOAwYMkMVi0cSJEy/42H5+foqLiyuDWgLlg552AAAAwBcZhnTqlHsehuFSVYOCghQXF6eEhAT17t1bSUlJSk5Oduy32+2aMGGCatWqpZCQELVo0UKffvqpY//x48fVr18/Va5cWSEhIapXr55mzpwpqfjh8fPmzVP9+vUVEhKiq666Srt373aqz9ixY9WyZUunbVOmTFHNmjUdz9esWaMuXbqoUqVKioqKUseOHbV+/XqXrvtcli1bpksvvVRBQUGKj4/Xww8/rJycHMf+Tz/9VM2aNVNISIhiYmKUlJSkU6dOScob8n/ppZcqLCxM0dHRuuKKK7Rnz54yrR/KBj3tAAAAgC/KzJTCw91z7owMKSzsvF66adMm/fTTT6pRo4Zj24QJE/TBBx/o9ddfV7169bR8+XL93//9nypXrqyOHTvqiSee0JYtW/Tdd9+pUqVK2rFjh06fPl3s8fft26c+ffpoxIgRGjp0qNauXav777/f5XqePHlSAwYM0KuvvirDMDR58mT16NFD27dvV0RExHlde0F//fWXevTooYEDB+q9997Tb7/9piFDhig4OFhjx47VgQMHdOutt2rSpEm64YYbdPLkSf3www8yDEM5OTnq3bu3hgwZov/973/Kzs7W6tWrZbFYLrheKHuEdgAAAAAe7fvvv1dkZKRycnKUlZUlq9WqqVOnSpKysrL03HPPaeHChUpMTJQk1a5dWz/++KNmzJihjh07au/evWrVqpXatGkjSU494oVNnz5dderU0eTJkyVJDRo00MaNG10ein/11Vc7PX/jjTcUHR2tZcuW6dprr3XpWMV57bXXlJCQoKlTp8pisahhw4bav3+/HnroIT355JM6cOCAcnJy1KdPH8cfOJo1ayZJOnbsmE6cOKFrr71WderUkSQ1atToguuE8kFoN4lMW6bm/jZXv6T9oh7q4e7qAAAAwOxCQ/N6vN11bhdceeWVmjFjhk6fPq2XXnpJ/v7+6tu3ryRpx44dyszMVJcuXZxek52drVatWkmS7rrrLvXt21fr169X165d1bt3b11++eXFnmvr1q1q166d07b8Pwa44uDBg3r88ce1dOlSHTp0SLm5ucrMzNTevXtdPlZJ9UxMTHTqHb/iiiuUkZGhP//8Uy1atFDnzp3VrFkzdevWTV27dtWNN96oChUqqGLFiho4cKC6deumLl26KCkpSTfddJPi4+PLpG4oW8xpN4kjmUd08+c368U9L7q7KgAAAPAGFkveEHV3PFwchh0aGqq6deuqRYsWeuedd7Rq1Sq9/fbbkqSMv//w8O233yolJcXx2LJli2Nee/fu3bVnzx7dd9992r9/vzp37qwHHnjgvN86q9Uqo9C8fJvN5vR8wIABSklJ0csvv6yffvpJKSkpiomJUXZ29nmf1xV+fn5KTk7Wd999p8aNG+vVV19VgwYNtGvXLknSzJkztXLlSl1++eX66KOPVL9+ff38888XpW5wDaHdZAy5tmgHAAAA4E2sVqseffRRPf744zp9+rQaN26soKAg7d27V3Xr1nV6JCQkOF5XuXJlDRgwQB988IGmTJmiN954o9jjN2rUSKtXr3baVjjMVq5cWampqU7BvfB93lesWKF77rlHPXr0UJMmTRQUFKQjR45c4NU713PlypVOdVixYoUiIiJUrVo1SXn3gb/iiis0btw4/fLLLwoMDNQXX3zhKN+qVSs98sgj+umnn9S0aVPNmTOnzOqHskNoBwAAAGAq//73v+Xn56dp06YpIiJCDzzwgO677z69++672rlzp9avX69XX31V7777riTpySef1FdffaUdO3Zo8+bNmjt3bolzuIcNG6bt27drzJgx2rZtm+bMmaNZs2Y5lenUqZMOHz6sSZMmaefOnZo2bZq+++47pzL16tXT+++/r61bt2rVqlXq16+fQkJCXL7WEydOOI0gSElJ0b59+zR8+HDt27dPd999t3777Td99dVXeuqppzR69GhZrVatWrVKzz33nNauXau9e/fq888/1+HDh9WoUSPt2rVLjzzyiFauXKk9e/ZowYIF2r59O/PaPRSh3SQsYiVHAAAAQJL8/f01cuRITZo0SadOndIzzzyjJ554QhMmTFCjRo10zTXX6Ntvv1WtWrUkSYGBgXrkkUfUvHlzdejQQX5+fvrwww+LPXb16tX12Wef6csvv1SLFi30+uuv67nnnnMq06hRI7322muaNm2aWrRoodWrVxcZbv/222/r+PHj+te//qX+/fvrnnvuUWxsrMvXunTpUrVq1crpMW7cOF1yySWaN2+eVq9erRYtWmjYsGEaPHiwHn/8cUlSZGSkli9frh49eqh+/fp6/PHHNXnyZHXv3l2hoaH67bff1LdvX9WvX19Dhw7ViBEjdOedd7pcP5Q/i1F4MoYPSk9PV1RUlE6cOKHIyEh3V6dY+07sU/Up1eVv8VfmI5kKCAhwd5VgAjabTfPmzVOPHj1oMygV2gxcRZuBq2gz7nHmzBnt2rVLtWrVUnBwsLur4xK73a709HRFRkbKaqXPEefmSW3mbN97pc2htHqT4J6JAAAAAOB7CO0AAAAAAHgoQrtJMKcdAAAAAHwPod1kWIIAAAAAAHwHod0kmNMOAAAAAL6H0A4AAAAAgIcitJuMIYbHAwAAAICvILSbBAvRAQAAAIDvIbQDAAAAAOChCO0mwUJ0AAAAgOfZvXu3LBaLUlJS3F2Vi27p0qWyWCxKS0uTJM2aNUvR0dHnfJ3FYtGXX35ZrnXzJoR2k2FOOwAAAHzJoEGDVKFCBfn5+clisSgmJkbXXHONfv31V3dXzWN89tln6tSpk6KiohQeHq7mzZvr6aef1rFjxy5qPW6++Wb9/vvvjudjx45Vy5Yti5Q7cOCAunfvXq51mTNnjipWrFiu57hYCO0mwZx2AAAA+KrOnTvrr7/+0oEDB7Ro0SL5+/vr2muvdXe1ykx2dvZ5v/axxx7TzTffrLZt2+q7777Tpk2bNHnyZG3YsEHvv/9+Gdby3EJCQhQbG3vOcnFxcQoKCroINfIOhHYAAADABxmGoVPZp9zyMAzXRo8GBQUpLi5OcXFxatmypR5++GHt27dPhw8fdpTZuHGjrr76aoWEhCgmJkZDhw5VRkaGY3+nTp00atQop+P27t1bAwcOdDyvWbOmnnvuOd1xxx2KiIhQ9erV9cYbbzi9ZvXq1WrVqpWCg4PVpk0b/fLLL077c3NzNXjwYNWqVUshISFq0KCBXn75ZacyAwcOVO/evTV+/HhVrVpVDRo00NNPP62mTZsWufaWLVvqiSeeKPZ9Wb16tZ577jlNnjxZ//3vf3X55ZerZs2a6tKliz777DMNGDDAUXb69OmqU6eOAgMD1aBBgyKB3mKx6K233tINN9yg0NBQ1atXT19//bVTmXnz5ql+/foKCQnRVVddpd27dzvtLzg8ftasWRo3bpw2bNggi8Uii8WiWbNmOc5VcHj8uT67/PfrhRdeUHx8vGJiYjRixAjZbLZi35fS2Lt3r66//nqFh4crMjJSN910kw4ePOjYv2HDBl111VWKiIhQZGSkWrdurbVr10qS9uzZo169eqlChQoKCwtTkyZNNG/evPOuy7n4l9uRUS4YHg8AAICykGnLVPiEcLecO+ORDIUFhp3fazMy9MEHH6hu3bqKiYmRJJ06dUrdunVTYmKi1qxZo0OHDuk///mPRo4c6QiKpTV58mQ988wzevTRR/Xpp5/qrrvuUseOHdWgQQNlZGTo2muvVZcuXfTBBx9o165duvfee51eb7fbVa1aNX3yySeKiYnRTz/9pKFDhyo+Pl433XSTo9yiRYsUGRmp5ORkSVJUVJTGjRunNWvWqG3btpKkX375Rb/++qs+//zzYus6e/ZshYeHa/jw4cXuzw/QX3zxhe69915NmTJFSUlJmjt3rgYNGqRq1arpqquucpQfN26cJk2apP/+97969dVX1a9fP+3Zs0cVK1bUvn371KdPH40YMUJDhw7V2rVrdf/995f4Pt58883atGmT5s+fr4ULFzqusbDSfnZLlixRfHy8lixZoh07dujmm29Wy5YtNWTIkBLrUBK73e4I7MuWLVNOTo5GjBihm2++WUuXLpUk9evXT61atdL06dPl5+enlJQUBQQESJJGjBih7OxsLV++XGFhYdqyZYvCw8vve4nQbhIsRAcAAABf9f333ysyMlJSXsiLj4/X3LlzZbXmDRyeM2eOzpw5o/fee09hYXl/DJg6dap69eqliRMnqkqVKqU+V48ePRwh+KGHHtJLL72kJUuWqEGDBpozZ47sdrvefvttBQcHq0mTJvrzzz911113OV4fEBCgcePGOZ7XqlVLK1eu1Mcff+wU2sPCwvTWW28pMDDQsa1bt26aOXOmI7TPnDlTHTt2VO3atYut6/bt21W7dm1HmCzJCy+8oIEDBzqua/To0fr555/1wgsvOIX2gQMH6tZbb5UkPffcc3rllVe0evVqXXPNNY6e+smTJ0uSGjRooI0bN2rixInFnjMkJETh4eHy9/dXXFxciXUr7WdXoUIFTZ06VX5+fmrYsKF69uypRYsWnVdoX7RokTZu3Khdu3YpISFBkvTee++pSZMmjj+a7N27V2PGjFHDhg0lSfXq1XO8fu/everbt6+aNWsmSSV+PmWF0A4AAAD4oNCAUGU8knHuguV0bldceeWVmjFjhqxWq44fP67XXntN3bt31+rVq1WjRg1t3bpVLVq0cIQ+Sbriiitkt9u1bds2l0J78+bNHV9bLBbFxcXp0KFDkqStW7eqefPmCg4OdpRJTEwscoxp06bpnXfe0d69e3X69GllZ2cXWZCtWbNmToFdkoYMGaI77rhDL774oqxWq+bMmaOXXnqpxLqWdprB1q1bNXToUKdtV1xxRZFh+wWvPSwsTJGRkU7X3q5dO6fyxV27q0r72TVp0kR+fn6OMvHx8dq4ceN5nzMhIcER2CWpcePGio6O1tatW9W2bVuNHj1a//nPf/T+++8rKSlJ//73v1WnTh1J0j333KO77rpLCxYsUFJSkvr27ev03pU15rSbBAvRAQAAoCxZLBaFBYa55eHqKNLQ0FDVrVtXdevWVdu2bfXWW2/p1KlTevPNN0t9DKvVWiTkFjcnunCvtcVikd1uL/V5PvzwQz3wwAMaPHiwFixYoJSUFA0aNKjIYnMFQ2q+Xr16KSgoSF988YW++eYb2Ww23XjjjSWeq379+vrjjz8uaG53QRd67eXpYtdt7Nix2rx5s3r27KnFixercePG+uKLLyRJ//nPf/THH3+of//+2rhxo9q0aaNXX3213OpCaDchVxfuAAAAALyJxWKR1WrV6dOnJUmNGjXShg0bdOrUKUeZFStWyGq1qkGDBpKkypUr68CBA479ubm52rRpk0vnbdSokX799VedOXPGse3nn392KrNixQpdfvnlGj58uFq1aqW6detq586dpTq+v7+/BgwYoJkzZ2rmzJm65ZZbFBISUmL52267TRkZGXrttdeK3Z9///RGjRppxYoVRerZuHHjUtUr/xirV6922lb42gsLDAxUbm7uOY97rs+urDVq1Ej79u3Tvn37HNu2bNmitLQ0p/ekfv36uu+++7RgwQL16dNHM2fOdOxLSEjQsGHD9Pnnn+v+++936Q9IriK0mwRz2gEAAOCrsrKylJqaqtTUVG3dulV33323MjIy1KtXL0l5i4YFBwdrwIAB2rRpk5YsWaK7775b/fv3dwyvvvrqq/Xtt9/q22+/1W+//aa77rrLEWpL67bbbpPFYtGQIUO0ZcsWzZs3Ty+88IJTmXr16mnt2rX6/vvv9fvvv+uJJ57QmjVrSn2O//znP1q8eLHmz5+vO+6446xl27VrpwcffFD333+/HnzwQa1cuVJ79uzRokWL9O9//1vvvvuuJGnMmDGaNWuWpk+fru3bt+vFF1/U559/rgceeKDU9Ro2bJi2b9+uMWPGaNu2bZozZ845F/mrWbOmdu3apZSUFB05ckRZWVlFypTmsztfubm5SklJcXps3bpVSUlJatasmfr166f169dr9erVuv3229WxY0e1adNGp0+f1siRI7V06VLt2bNHK1as0Jo1a9SoUSNJ0qhRo/T9999r165dWr9+vZYsWeLYVx4I7QAAAAA82qJFi3TJJZcoPj5e7dq105o1a/TJJ5+oU6dOkvKGz3///fc6duyY2rZtqxtvvFGdO3fW1KlTHce44447NGDAAEc4q127ttMibKURHh6ub775Rhs3blSrVq302GOPFVmI7c4771SfPn108803q127djp69GiJq7sXp169err88svVsGHDInPIizNx4kTNmTNHq1atUrdu3dSkSRONHj1azZs3d9zyrXfv3nr55Zf1wgsvqEmTJpoxY4ZmzpzpeP9Ko3r16vrss8/05ZdfqkWLFnr99df13HPPnfU1ffv21TXXXKOrrrpKlStX1v/+978iZUrz2Z2vjIwMtWrVyunRq1cvWSwWffXVV6pQoYI6dOigpKQk1a5dWx999JEkyc/PT0ePHtXtt9+u+vXr66abblL37t0dCwzm5uZqxIgRatSoka655hrVr1+/xNEOZcFiMNZa6enpioqK0okTJxyrUnqaI5lHVPm/lSVJZx45o6DAIDfXCGZgs9k0b9489ejR45yrigISbQauo83AVbQZ9zhz5ox27dqlWrVqOS2iZgZ2u13p6emKjIx0rBbvzQzDUL169TR8+HCNHj3a3dUxJU9qM2f73ittDmX1eJNgIToAAADAux0+fFgffvihUlNTNWjQIHdXBx6C0G5CDI4AAAAAvE9sbKwqVaqkN954QxUqVHB3deAhCO0mwUJ0AAAAgHejcw7F8f5JIV7IEN/MAAAAAOALCO0mwZx2AAAAAPA9hHYAAAAAADwUod2EmOsCAAAAAL6B0G4SLEQHAAAAAL6H0G5CLEQHAAAAAL6B0G4SLEQHAAAAlI7FYtGXX3551jIDBw5U7969S33M3bt3y2KxKCUl5YLqVp5q1qypKVOmOJ6Xx/uAi4/QbkLMaQcAAICvGDRokPr16+fSaw4cOKDu3btLKjlsv/zyy5o1a1YZ1fIfO3bs0KBBg1StWjUFBQWpVq1auvXWW7V27doyP9e5uPN9KKw0f0BA8QjtJsGcdgAAAKB04uLiFBQUdNYyUVFRio6OLtPzrl27Vq1bt9bvv/+uGTNmaMuWLfriiy/UsGFD3X///WV6rtJw1/uAskVoBwAAAHyQYUinTrnncSEDRzt16qR77rlHDz74oCpWrKi4uDiNHTvWqUzBXt1atWpJklq1aiWLxaJOnTpJKjosfP78+Wrfvr2io6MVExOja6+9Vjt37nTh/TQ0cOBA1atXTz/88IN69uypOnXqqGXLlnrqqaf01VdfOcpu3LhRV199tUJCQhQTE6OhQ4cqIyPDsT+/bi+88ILi4+MVExOjESNGyGazOcocOnRIvXr1UkhIiGrVqqXZs2cXqdP5vA9ZWVm65557FBsbq+DgYLVv315r1qxx7F+6dKksFosWLVqkNm3aKDQ0VJdffrm2bdtW6veqMLvdrqefftoxOqFly5aaP3++Y392drZGjhyp+Ph4BQcHq0aNGpowYYLjfR87dqyqV6+uoKAgVa1aVffee+9518UTEdpNiIXoAAAAcKEyM6XwcPc8MjMvrO7vvvuuwsLCtGrVKk2aNElPP/20kpOTiy27evVqSdLChQt14MABff7558WWO3XqlEaPHq21a9dq0aJFslqtuuGGG2S320tVp5SUFG3evFn333+/rNaiMSu/N/vUqVPq1q2bKlSooDVr1uiTTz7RwoULNXLkSKfyS5Ys0c6dO7VkyRK9++67mjVrltMw9oEDB2rfvn1asmSJPv30U7322ms6dOhQifUr7fvw4IMP6rPPPtO7776r9evXq27duurWrZuOHTvmVO6xxx7T5MmTtXbtWvn7++uOO+4ozdtUrJdfflmTJ0/WCy+8oF9//VXdunXTddddp+3bt0uSXnnlFX399df6+OOPtW3bNs2ePVs1a9aUJH322Wd66aWXNGPGDG3fvl1ffvmlmjZtet518UT+7q4ASoeF6AAAAIA8zZs311NPPSVJqlevnqZOnapFixapS5cuRcpWrlxZkhQTE6O4uLgSj9m3b1+n5++8844qV66sLVu2lCoE5gfMhg0bnrXcnDlzdObMGb333nsKCwuTJE2dOlW9evXSxIkTVaVKFUlShQoVNHXqVPn5+alhw4bq2bOnFi1apCFDhuj333/Xd999p9WrV6tt27aSpLfffluNGjUq8byleR9OnTql6dOna9asWY658G+++aaSk5P19ttva8yYMY6y48ePV8eOHSVJDz/8sHr27KkzZ84oODj4nO9VYS+88IIeeugh3XLLLZKkiRMnasmSJZoyZYqmTZumvXv3ql69emrfvr0sFotq1KjheO3evXsVFxenpKQkBQQEqHr16mrTpo3S09NdroenoqfdhFiIDgAAABcqNFTKyHDPIzT0wurevHlzp+fx8fFn7WUuje3bt+vWW29V7dq1FRkZ6ejJ3bt3b6leX9p/o2/dulUtWrRwBHZJuuKKK2S3252GmDdp0kR+fn6O5wWvcevWrfL391fr1q0d+xs2bHjBc9N37twpm82mK664wrEtICBAl156qbZu3epUtuBnEB8fL0nn9Rmkp6dr//79TueU8t6T/HMOHDhQKSkpatCgge655x4tWLDAUe7f//63Tp8+rdq1a2vIkCH64osvlJOT43I9PBk97SbBQnQAAAAoSxaLVCA3mkpAQIDTc4vFUuph7CXp1auXatSooTfffFNVq1aV3W5X06ZNlZ2dXarX169fX5L022+/qVWrVhdUF6l8rrEsFaxfflYpr/r961//0q5du/Tdd99p4cKFuummm5SUlKRPP/1UCQkJ2rZtmxYuXKjk5GQNHz5ctWrVclpDwOzoaTch5rQDAAAApRMYGChJys3NLbHM0aNHtW3bNj3++OPq3LmzGjVqpOPHj7t0npYtW6px48aaPHlyseE1LS1NktSoUSNt2LBBp06dcuxbsWKFrFarGjRoUKpzNWzYUDk5OVq3bp1j27Zt2xznKE5p3oc6deooMDBQK1ascGyz2Wxas2aNGjduXKq6uSoyMlJVq1Z1OqeU954UPGdkZKRuvvlmvfnmm/roo4/02WefOebZh4SEqFevXnrllVe0dOlSrVy5Ulu2bCmX+roDPe0mwZx2AAAAwHWxsbEKCQnR/PnzVa1aNQUHBysqKsqpTIUKFRQTE6M33nhD8fHx2rt3rx5++GGXzmOxWDRz5kwlJSXpyiuv1GOPPaaGDRsqIyND33zzjRYsWKBly5apX79+euqppzRgwACNHTtWhw8f1t13363+/fs75rOfS4MGDXTNNdfozjvv1PTp0+Xv769Ro0YpJCTkgt6HsLAw3XXXXRozZowqVqyo6tWra9KkScrMzNTgwYNdej+Ks2vXriL3ia9Xr57GjBmjp556yrHa/syZM5WSkuJYEf/FF19UfHy8WrVqJavVqk8++URxcXGKjo7WrFmzlJubq3bt2ik0NFQffPCBQkJClJCQcMH19RT0tAMAAADwWv7+/nrllVc0Y8YMVa1aVddff32RMlarVR9++KHWrVunpk2b6r777tN///tfl8916aWXau3atapbt66GDBmiRo0a6brrrtPmzZs1ZcoUSVJoaKi+//57HTt2TG3bttWNN96ozp07a+rUqS6da+bMmapatao6duyoPn36aOjQoYqNjS2xfGneB0l6/vnn1bdvX/Xv31//+te/tGPHDn3//feqUKGCS/UrzujRo9WqVSunxy+//KJ77rlHo0eP1v33369mzZpp/vz5+vrrr1WvXj1JUkREhCZNmqQ2bdqobdu22r17t+bNmyer1aro6Gi9+eabuuKKK9S8eXMtXLhQX331lSpWrHjB9fUUFoNVzZSenq6oqCidOHFCkZGR7q5OsU5ln1L4hHBJ0vEHjis6LNq9FYIp2Gw2zZs3Tz169CgyLwooDm0GrqLNwFW0Gfc4c+aMdu3apVq1ap3X6t7uZLfblZ6ersjIyGJvpQYU5klt5mzfe6XNobR6k2AhOgAAAADwPW4N7RMmTFDbtm0VERGh2NhY9e7d2+k2B5LUqVMnWSwWp8ewYcOcyuzdu1c9e/ZUaGioYmNjNWbMGK9b5r8gFqIDAAAAAN/g1oXoli1bphEjRqht27bKycnRo48+qq5du2rLli1O9y0cMmSInn76acfz0AI3dszNzVXPnj0VFxenn376SQcOHNDtt9+ugIAAPffccxf1esoTC9EBAAAAgO9xa2ifP3++0/NZs2YpNjZW69atU4cOHRzbQ0NDFRcXV+wxFixYoC1btmjhwoWqUqWKWrZsqWeeeUYPPfSQxo4d67i1gTdhGQIAAAAA8A0edcu3EydOSFKRlf5mz56tDz74QHFxcerVq5eeeOIJR2/7ypUr1axZM6fbI3Tr1k133XWXNm/erFatWhU5T1ZWlrKy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",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "59f93b9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:46:32.383763Z",
     "iopub.status.busy": "2025-02-25T21:46:32.382941Z",
     "iopub.status.idle": "2025-02-25T21:46:32.386831Z",
     "shell.execute_reply": "2025-02-25T21:46:32.386005Z"
    },
    "papermill": {
     "duration": 0.061418,
     "end_time": "2025-02-25T21:46:32.388333",
     "exception": false,
     "start_time": "2025-02-25T21:46:32.326915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "47f9a51f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T21:46:32.500791Z",
     "iopub.status.busy": "2025-02-25T21:46:32.500096Z",
     "iopub.status.idle": "2025-02-25T21:46:33.571012Z",
     "shell.execute_reply": "2025-02-25T21:46:33.570175Z"
    },
    "papermill": {
     "duration": 1.128632,
     "end_time": "2025-02-25T21:46:33.572681",
     "exception": false,
     "start_time": "2025-02-25T21:46:32.444049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 680.173566,
   "end_time": "2025-02-25T21:46:34.849518",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-25T21:35:14.675952",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
