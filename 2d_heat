{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f003eacd",
   "metadata": {
    "papermill": {
     "duration": 0.004788,
     "end_time": "2025-03-31T02:36:46.201937",
     "exception": false,
     "start_time": "2025-03-31T02:36:46.197149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f70c6731",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:36:46.211105Z",
     "iopub.status.busy": "2025-03-31T02:36:46.210756Z",
     "iopub.status.idle": "2025-03-31T02:36:50.117717Z",
     "shell.execute_reply": "2025-03-31T02:36:50.116768Z"
    },
    "papermill": {
     "duration": 3.914098,
     "end_time": "2025-03-31T02:36:50.119938",
     "exception": false,
     "start_time": "2025-03-31T02:36:46.205840",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "29b90a30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:36:50.130944Z",
     "iopub.status.busy": "2025-03-31T02:36:50.130483Z",
     "iopub.status.idle": "2025-03-31T02:36:50.147951Z",
     "shell.execute_reply": "2025-03-31T02:36:50.147080Z"
    },
    "papermill": {
     "duration": 0.024673,
     "end_time": "2025-03-31T02:36:50.149598",
     "exception": false,
     "start_time": "2025-03-31T02:36:50.124925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "23ceaaa3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:36:50.158816Z",
     "iopub.status.busy": "2025-03-31T02:36:50.158496Z",
     "iopub.status.idle": "2025-03-31T02:36:50.162551Z",
     "shell.execute_reply": "2025-03-31T02:36:50.161742Z"
    },
    "papermill": {
     "duration": 0.010483,
     "end_time": "2025-03-31T02:36:50.164251",
     "exception": false,
     "start_time": "2025-03-31T02:36:50.153768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "97a097a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:36:50.173935Z",
     "iopub.status.busy": "2025-03-31T02:36:50.173108Z",
     "iopub.status.idle": "2025-03-31T02:36:50.179409Z",
     "shell.execute_reply": "2025-03-31T02:36:50.178780Z"
    },
    "papermill": {
     "duration": 0.012728,
     "end_time": "2025-03-31T02:36:50.181038",
     "exception": false,
     "start_time": "2025-03-31T02:36:50.168310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def get_data_3dV2(x_range, y_range, t_range, x_num, y_num, t_num):\n",
    "    # Input validation\n",
    "    assert x_num > 1 and y_num > 1 and t_num > 1, \"All nums must be â‰¥ 2\"\n",
    "    \n",
    "    # Generate grid using linspace + meshgrid\n",
    "    x = np.linspace(*x_range, x_num)\n",
    "    y = np.linspace(*y_range, y_num)\n",
    "    t = np.linspace(*t_range, t_num)\n",
    "    \n",
    "    # Create full grid with \"ij\" indexing\n",
    "    x_mesh, y_mesh, t_mesh = np.meshgrid(x, y, t, indexing='ij')\n",
    "    data = np.stack((x_mesh, y_mesh, t_mesh), axis=-1)  # (x_num, y_num, t_num, 3)\n",
    "    \n",
    "    # Extract boundaries (match your original code expectations)\n",
    "    b_left = data[0, :, :, :].reshape(-1, 3)    # x=x_min (all y/t)\n",
    "    b_right = data[-1, :, :, :].reshape(-1, 3)   # x=x_max\n",
    "    b_lower = data[:, 0, :, :].reshape(-1, 3)    # y=y_min (all x/t)\n",
    "    b_upper = data[:, -1, :, :].reshape(-1, 3)   # y=y_max\n",
    "    \n",
    "    # Return format matching your original code (no initial/final)\n",
    "    return (\n",
    "        data.reshape(-1, 3),  # All points (N, 3)\n",
    "        b_left, b_right, b_upper, b_lower\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b2722113",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:36:50.189594Z",
     "iopub.status.busy": "2025-03-31T02:36:50.189326Z",
     "iopub.status.idle": "2025-03-31T02:36:50.255515Z",
     "shell.execute_reply": "2025-03-31T02:36:50.254664Z"
    },
    "papermill": {
     "duration": 0.072838,
     "end_time": "2025-03-31T02:36:50.257596",
     "exception": false,
     "start_time": "2025-03-31T02:36:50.184758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c25c63f",
   "metadata": {
    "papermill": {
     "duration": 0.003814,
     "end_time": "2025-03-31T02:36:50.265938",
     "exception": false,
     "start_time": "2025-03-31T02:36:50.262124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "83dc3fc2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:36:50.275353Z",
     "iopub.status.busy": "2025-03-31T02:36:50.275093Z",
     "iopub.status.idle": "2025-03-31T02:36:50.492728Z",
     "shell.execute_reply": "2025-03-31T02:36:50.491885Z"
    },
    "papermill": {
     "duration": 0.224825,
     "end_time": "2025-03-31T02:36:50.494833",
     "exception": false,
     "start_time": "2025-03-31T02:36:50.270008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3dV2([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7f121ba9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:36:50.505074Z",
     "iopub.status.busy": "2025-03-31T02:36:50.504723Z",
     "iopub.status.idle": "2025-03-31T02:36:51.843511Z",
     "shell.execute_reply": "2025-03-31T02:36:51.842356Z"
    },
    "papermill": {
     "duration": 1.34602,
     "end_time": "2025-03-31T02:36:51.845433",
     "exception": false,
     "start_time": "2025-03-31T02:36:50.499413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8ac29a66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:36:51.855912Z",
     "iopub.status.busy": "2025-03-31T02:36:51.855062Z",
     "iopub.status.idle": "2025-03-31T02:36:51.858832Z",
     "shell.execute_reply": "2025-03-31T02:36:51.858087Z"
    },
    "papermill": {
     "duration": 0.010813,
     "end_time": "2025-03-31T02:36:51.860734",
     "exception": false,
     "start_time": "2025-03-31T02:36:51.849921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b494600f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:36:51.871297Z",
     "iopub.status.busy": "2025-03-31T02:36:51.870697Z",
     "iopub.status.idle": "2025-03-31T02:55:34.053079Z",
     "shell.execute_reply": "2025-03-31T02:55:34.052097Z"
    },
    "papermill": {
     "duration": 1122.189551,
     "end_time": "2025-03-31T02:55:34.055079",
     "exception": false,
     "start_time": "2025-03-31T02:36:51.865528",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/2000 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2000/2000 [18:42<00:00,  1.78it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "\n",
    "for i in tqdm(range(2000)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)  # PDE residual\n",
    "        loss_ic = torch.mean(pred_ic ** 2)  # Initial condition\n",
    "        loss_bc = (\n",
    "            torch.mean((u_bc_x_max) ** 2) +  # Neumann: du/dx(L, y, t) = 0\n",
    "            torch.mean((u_bc_y_min) ** 2) +  # Neumann: du/dy(x, 0, t) = 0\n",
    "            torch.mean((u_bc_y_max) ** 2) +  # Neumann: du/dy(x, L, t) = 0\n",
    "            10 * torch.mean((bc_x_min - 1) ** 2)  # Dirichlet: u(0, y, t) = 1\n",
    "        )\n",
    "\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 50*loss_res + 6*loss_ic + 10*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2d37ff32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:55:34.251419Z",
     "iopub.status.busy": "2025-03-31T02:55:34.250914Z",
     "iopub.status.idle": "2025-03-31T02:55:34.267002Z",
     "shell.execute_reply": "2025-03-31T02:55:34.266030Z"
    },
    "papermill": {
     "duration": 0.115474,
     "end_time": "2025-03-31T02:55:34.268633",
     "exception": false,
     "start_time": "2025-03-31T02:55:34.153159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000460, Loss_IC: 0.071261, loss_bc: 0.011990\n",
      "Train Loss: 0.083710\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cec9e576",
   "metadata": {
    "papermill": {
     "duration": 0.097096,
     "end_time": "2025-03-31T02:55:34.464493",
     "exception": false,
     "start_time": "2025-03-31T02:55:34.367397",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5ee2c8a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:55:34.661166Z",
     "iopub.status.busy": "2025-03-31T02:55:34.660460Z",
     "iopub.status.idle": "2025-03-31T02:55:34.664475Z",
     "shell.execute_reply": "2025-03-31T02:55:34.663651Z"
    },
    "papermill": {
     "duration": 0.104901,
     "end_time": "2025-03-31T02:55:34.666246",
     "exception": false,
     "start_time": "2025-03-31T02:55:34.561345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# #optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c8b427c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:55:34.863550Z",
     "iopub.status.busy": "2025-03-31T02:55:34.862872Z",
     "iopub.status.idle": "2025-03-31T02:55:34.869591Z",
     "shell.execute_reply": "2025-03-31T02:55:34.868758Z"
    },
    "papermill": {
     "duration": 0.107083,
     "end_time": "2025-03-31T02:55:34.871352",
     "exception": false,
     "start_time": "2025-03-31T02:55:34.764269",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(600)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4551a045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:55:35.112744Z",
     "iopub.status.busy": "2025-03-31T02:55:35.111824Z",
     "iopub.status.idle": "2025-03-31T02:55:35.127369Z",
     "shell.execute_reply": "2025-03-31T02:55:35.126278Z"
    },
    "papermill": {
     "duration": 0.113209,
     "end_time": "2025-03-31T02:55:35.129162",
     "exception": false,
     "start_time": "2025-03-31T02:55:35.015953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 28.643003\n",
      "Train Loss: 29.325739\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eb7c4ed4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:55:35.319443Z",
     "iopub.status.busy": "2025-03-31T02:55:35.318581Z",
     "iopub.status.idle": "2025-03-31T02:55:35.333915Z",
     "shell.execute_reply": "2025-03-31T02:55:35.332787Z"
    },
    "papermill": {
     "duration": 0.112678,
     "end_time": "2025-03-31T02:55:35.335662",
     "exception": false,
     "start_time": "2025-03-31T02:55:35.222984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000460, Loss_IC: 0.071261, loss_bc: 0.011990\n",
      "Train Loss: 0.083710\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f4b87455",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:55:35.535289Z",
     "iopub.status.busy": "2025-03-31T02:55:35.534941Z",
     "iopub.status.idle": "2025-03-31T02:55:35.818268Z",
     "shell.execute_reply": "2025-03-31T02:55:35.817329Z"
    },
    "papermill": {
     "duration": 0.385405,
     "end_time": "2025-03-31T02:55:35.820114",
     "exception": false,
     "start_time": "2025-03-31T02:55:35.434709",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1855fb9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:55:36.014115Z",
     "iopub.status.busy": "2025-03-31T02:55:36.013763Z",
     "iopub.status.idle": "2025-03-31T02:55:36.017927Z",
     "shell.execute_reply": "2025-03-31T02:55:36.017090Z"
    },
    "papermill": {
     "duration": 0.103814,
     "end_time": "2025-03-31T02:55:36.019681",
     "exception": false,
     "start_time": "2025-03-31T02:55:35.915867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "14c79cae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-31T02:55:36.213000Z",
     "iopub.status.busy": "2025-03-31T02:55:36.212153Z",
     "iopub.status.idle": "2025-03-31T02:55:38.015602Z",
     "shell.execute_reply": "2025-03-31T02:55:38.014772Z"
    },
    "papermill": {
     "duration": 1.904891,
     "end_time": "2025-03-31T02:55:38.017521",
     "exception": false,
     "start_time": "2025-03-31T02:55:36.112630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAEiCAYAAADwEwVaAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA1nElEQVR4nO3de1xUZf4H8M/M6AwKghRyUwQvmxfEKAhSM7XYyAyXdkvUAjTTUrR0divJFMkSrX6GmwqtedkU0zJzTXlpSlKplKVRloqpmGaCsCnjjRlmzvP7w5h1nPtwmDMzz/f9ej2vl5zLnOfMeJ7veS7nOTLGGAMhhBDuyKXOACGEEGlQACCEEE5RACCEEE5RACCEEE5RACCEEE5RACCEEE5RACCEEE5RACCEEE5RACCEEE5RACAeRSaTYe7cuR7/mc1OnToFmUyG1atXt8rn2zJu3DjExMSI/rmt+X0Rz8JNAPjmm28wdepUxMbGwt/fH127dsWoUaNw7Ngxs22HDh0KmUwGmUwGuVyOwMBA9OrVC5mZmdi5c6fDxxw3bhwCAgKsrpfJZJg6dapL5+OoZcuWuVQ4Xbx4EX5+fpDJZDhy5Ij4GRNZaWmpxxdap06dwvjx49GjRw/4+fkhPDwc9957L/Ly8tyeF0/8vlojT0VFRXjsscfQtWtXyGQyjBs3TtTP93bcBICFCxfio48+wv3334/Fixdj0qRJ+OKLL3DnnXfixx9/NNu+S5cuWLNmDd577z288cYbGDlyJPbt24cHHngAGRkZaGpqkuAsnOdqAPjwww8hk8kQHh6OkpIS8TMmstLSUuTn51tcd+3aNbz88stuzpGp48eP44477sCOHTswZswYLFmyBDk5Obj11luxcOFCt+fHE78vW3ly1cKFC/HZZ58hNjYWbdq0EfWzfQE334harca6deugVCqNyzIyMhAXF4cFCxZg7dq1JtsHBQXhiSeeMFm2YMECPPvss1i2bBliYmIkuXDdZe3atXjooYcQHR2NdevW4dVXX5U6Sy7z8/OTOgt46623cPnyZVRWViI6Otpk3fnz5yXKlWWe8H2J5fPPPzfe/duqjfOKmxrAwIEDTQp/APjTn/6E2NhYh5s4FAoF/vnPf6Jv375YsmQJGhoaRM+nVqtFXl4eevbsCZVKhaioKLzwwgvQarUm261atQr33XcfQkNDoVKp0LdvXxQVFZlsExMTg59++gmff/65sUlr6NChdvNw+vRpfPnllxg9ejRGjx6N6upq7Nu3z2y7oUOHol+/fjh8+DCGDRuG9u3bo3Pnznj99ddNttPpdJgzZw4SEhIQFBQEf39/DB48GLt377aZj927d0Mmk+Hjjz82W7du3TrIZDJUVFRg3LhxWLp0KQAYz1Mmkxm3tdSmffbsWUyYMAGRkZFQqVTo1q0bJk+eDJ1OBwD4/fff8Y9//ANxcXEICAhAYGAghg8fju+//97u92fJiRMn0KVLF7PCHwBCQ0PNli1btgyxsbFQqVSIjIxETk4OLl68aPMY5eXlkMlkKC8vN1l+cz+FK9/Xd999h+HDhyMwMBABAQG4//778dVXX5lss3r1ashkMuzduxdqtRqdOnWCv78/HnnkEdTV1dnMu708uSo6OlqUz/FV3NQALGGMoba2FrGxsQ7vo1AoMGbMGMyePRt79uzBiBEj7O5TX1/v0GcLgoCRI0diz549mDRpEvr06YNDhw7hrbfewrFjx7B582bjtkVFRYiNjcXIkSPRpk0bfPLJJ5gyZQoEQUBOTg4AoLCwENOmTUNAQABmzZoFAAgLC7Obj/fffx/+/v54+OGH0a5dO/To0QMlJSUYOHCg2bYXLlzAgw8+iL/+9a8YNWoUNm7ciBdffBFxcXEYPnw4AECj0eDdd9/FmDFjMHHiRFy6dAkrVqxAamoq9u/fj/j4eIv5GDp0KKKiolBSUoJHHnnEZF1JSQl69OiBAQMGAAB+++037Ny5E2vWrLF7fr/99huSkpJw8eJFTJo0Cb1798bZs2exceNGXL16FUqlEidPnsTmzZvx2GOPoVu3bqitrcU777yDIUOG4PDhw4iMjLR7nBtFR0dj165d+Oyzz3DffffZ3Hbu3LnIz89HSkoKJk+ejKqqKhQVFeGbb77B3r170bZtW6eOfbOnn37aqe/rp59+wuDBgxEYGIgXXngBbdu2xTvvvIOhQ4fi888/R3Jyssn206ZNQ3BwMPLy8nDq1CkUFhZi6tSp2LBhg8t5unDhAgwGg928tm/fHu3bt7e7HfkD49iaNWsYALZixQqT5UOGDGGxsbFW9/v4448ZALZ48WKbn5+dnc0A2Ew5OTkm+ZHL5ezLL780+Zzi4mIGgO3du9e47OrVq2bHS01NZd27dzdZFhsby4YMGWIznzeLi4tjjz/+uPHvl156iYWEhLCmpiaT7YYMGcIAsPfee8+4TKvVsvDwcPa3v/3NuEyv1zOtVmuy74ULF1hYWBh78sknTZYDYHl5eca/c3NzmUqlYhcvXjQuO3/+PGvTpo3Jdjk5Oczaf+ebPzMrK4vJ5XL2zTffmG0rCAJjjLHGxkZmMBhM1lVXVzOVSsVeeeUVk2UA2KpVqyweu9mPP/7I2rVrxwCw+Ph49txzz7HNmzezK1eumGx3/vx5plQq2QMPPGBy/CVLljAAbOXKlcZl2dnZLDo62vj37t27GQC2e/dus3zfnEdnvq/09HSmVCrZiRMnjMt+++031qFDB3bvvfcal61atYoBYCkpKcbvkTHGZsyYwRQKhclvaImtPEVHR9u9lm7O9838/f1Zdna2zTzwhpsmoJsdPXoUOTk5GDBgALKzs53at7kt8dKlS3a39fPzw86dOy2mm3344Yfo06cPevfujfr6emNqvmO8scmkXbt2xn83NDSgvr4eQ4YMwcmTJ1vUNPXDDz/g0KFDGDNmjHHZmDFjUF9fjx07dphtHxAQYNJXolQqkZSUhJMnTxqXKRQKY/ObIAj4/fffodfrkZiYiIMHD9rMT1ZWFrRaLTZu3GhctmHDBuj1erM+GkcIgoDNmzcjLS0NiYmJZuubmwtUKhXk8uuXh8FgwH//+18EBASgV69edvNsSWxsLCorK/HEE0/g1KlTWLx4MdLT0xEWFobly5cbt9u1axd0Oh2mT59uPD4ATJw4EYGBgdi2bZvTx24Jg8GATz/9FOnp6ejevbtxeUREBMaOHYs9e/ZAo9GY7DNp0iSTZpfBgwfDYDDgl19+cTkfJSUlVq+jG1NWVpbLx+ARl01ANTU1GDFiBIKCgrBx40YoFAqn9r98+TIAoEOHDna3VSgUSElJcehzf/75Zxw5cgSdOnWyuP7GzsK9e/ciLy8PFRUVuHr1qsl2DQ0NCAoKcuiYN1u7di38/f3RvXt3HD9+HMD1IBYTE4OSkhKzJq8uXbqYtbEGBwfjhx9+MFn273//G//3f/+Ho0ePmoyg6tatm8389O7dG3fddRdKSkowYcIEANcLg7vvvhs9e/Z0+vzq6uqg0WjQr18/m9sJgoDFixdj2bJlqK6uNml+uPXWW50+LgDcdtttWLNmDQwGAw4fPoytW7fi9ddfx6RJk9CtWzekpKQYC8levXqZ7KtUKtG9e/cWFaKuqKurw9WrV83yAwB9+vSBIAg4c+aMSTNq165dTbYLDg4GcL0Zx1WDBg1yeV9iHXcBoKGhAcOHD8fFixfx5ZdfOt2WC8A4bNSVAsgWQRAQFxeHRYsWWVwfFRUF4HqH4v3334/evXtj0aJFiIqKglKpRGlpKd566y0IguDS8RljeP/993HlyhX07dvXbP358+dx+fJlk9EU1oInu+FNo2vXrsW4ceOQnp6O559/HqGhoVAoFCgoKMCJEyfs5isrKwvPPfccfv31V2i1Wnz11VdYsmSJC2fouPnz52P27Nl48sknMW/ePNxyyy2Qy+WYPn26y99vM4VCgbi4OMTFxWHAgAEYNmwYSkpKHL5RsMZaZ6cjbedicuT/hLPq6uocOo+AgAAa7eMErgJAY2Mj0tLScOzYMezatctiIWePwWDAunXr0L59e9xzzz2i5q9Hjx74/vvvcf/999scufDJJ59Aq9Viy5YtJndblkbVODMC4vPPP8evv/6KV155BX369DFZd+HCBUyaNAmbN292uull48aN6N69OzZt2mSSH0cfgBo9ejTUajXef/99XLt2DW3btkVGRobJNo6eZ6dOnRAYGGjx2Y+b8zxs2DCsWLHCZPnFixcREhLi0LEc0dwMde7cOQAwjhKqqqoyaXLR6XSorq62GSSa77RvHi1kqdbgzPfVvn17VFVVma07evQo5HK58cakpWzl6a677nKo9pOXl+dxD7h5Mm4CgMFgQEZGBioqKvCf//zHOHrE2c949tlnceTIEcycOROBgYGi5nHUqFEoLS3F8uXLMWnSJJN1165dgyAI8Pf3N95h3XhH1dDQgFWrVpl9pr+/v93hg82am3+ef/55i2PB33jjDZSUlDgdAG7Mb/NF/vXXX6OiosKsucCSkJAQDB8+HGvXrkVjYyMefPBBs0LY398fwPXCr2PHjlY/Sy6XIz09HWvXrsW3335r1g/QnEeFQmF2x/rhhx/i7NmzLtX8vvzyS9x9991mI3hKS0sB/K/JJyUlBUqlEv/85z/x4IMPGr+vFStWoKGhweaos+joaCgUCnzxxRdIT083Ll+2bJnZto5+XwqFAg888AD+85//4NSpU8apJ2pra7Fu3Trcc889ol0HtvJUUlKCa9eu2f2MG4MmsY+bAPD3v/8dW7ZsQVpaGn7//XezB79uLtQaGhqM21y9ehXHjx/Hpk2bcOLECYwePRrz5s0TPY+ZmZn44IMP8Mwzz2D37t0YNGgQDAYDjh49ig8++AA7duxAYmIiHnjgASiVSqSlpeHpp5/G5cuXsXz5coSGhhrvJJslJCSgqKgIr776Knr27InQ0FCLwxC1Wi0++ugj/PnPf7b6INDIkSOxePFinD9/3uLYdWsefvhhbNq0CY888ghGjBiB6upqFBcXo2/fvsb+FHuysrLw6KOPAoDF7z4hIQEA8OyzzyI1NRUKhQKjR4+2+Fnz58/Hp59+iiFDhhiH2547dw4ffvgh9uzZg44dO+Lhhx/GK6+8gvHjx2PgwIE4dOgQSkpKXC5gFi5ciAMHDuCvf/0r+vfvDwA4ePAg3nvvPdxyyy2YPn06gOt33Lm5ucjPz8eDDz6IkSNHoqqqCsuWLcNdd91lM/gGBQXhsccew9tvvw2ZTIYePXpg69atFh80c+b7evXVV7Fz507cc889mDJlCtq0aYN33nkHWq3W7JmPlrCVJ1f7AD755BPjsxtNTU344YcfjA81jhw50vhbcEvCEUhu1Txk0VqytW1AQAD705/+xJ544gn26aefOnzM7Oxs5u/vb3U9bhoGyhhjOp2OLVy4kMXGxjKVSsWCg4NZQkICy8/PZw0NDcbttmzZwvr378/8/PxYTEwMW7hwIVu5ciUDwKqrq43b1dTUsBEjRrAOHTowAFaHhH700UcWh8TeqLy83GT4q7XhsjcPTxQEgc2fP59FR0czlUrF7rjjDrZ161az7Zq/E0tD+bRaLQsODmZBQUHs2rVrZuv1ej2bNm0a69SpE5PJZCa/qaXP/OWXX1hWVhbr1KkTU6lUrHv37iwnJ8c4XLWxsZH9/e9/ZxEREaxdu3Zs0KBBrKKigg0ZMsTkO3R0GOjevXtZTk4O69evHwsKCmJt27ZlXbt2ZePGjTMZXtlsyZIlrHfv3qxt27YsLCyMTZ48mV24cMFkG0vfX11dHfvb3/7G2rdvz4KDg9nTTz/NfvzxR7M8Ovt9HTx4kKWmprKAgADWvn17NmzYMLZv3z6TbZqHgd48vNba8NSb2cqTq2wNxbb3m/FAxlgLemYIcRO9Xo/IyEikpaWZtcsTQlzD7XMAxLts3rwZdXV1NM6bEBFRDYB4tK+//ho//PAD5s2bh5CQEJcewiKEWEY1AOLRioqKMHnyZISGhuK9996TOjuE+BRJA8AXX3yBtLQ0REZGQiaTmUx2Zk15eTnuvPNOqFQq9OzZU5I3MRH3Wb16NfR6Pb799lu7T+8S4q2kKgslDQBXrlzB7bffbpwG1p7q6mqMGDECw4YNQ2VlJaZPn46nnnrK4hw1hBDiLaQqCz2mD6B53vcbH2C52Ysvvoht27aZPMU5evRoXLx4Edu3b3dDLgkhpHW5syz0qgfBKioqzB6FT01NNT5EY4lWqzV5mUrzbJS33norvSiCEI4wxnDp0iVERkaazLTqjMbGRuNLg+wd6+byRaVSQaVSuXTcm7lSFlriVQGgpqbG7IUmYWFh0Gg0uHbtmskUyc0KCgpEf88oIcR7nTlzBl26dHF6v8bGRnSLDkDNeccmpbv5KXcx5ylypSy0xKsCgCtyc3OhVquNfzc0NKBr16745WAMAgNoEBQhvNBcFhB95ymHpnG3RKfToea8AdUHohHYwXrZobkkoFvCLzhz5ozJPEli3f2LyasCQHh4OGpra02W1dbWIjAw0GrEs1btaufP0C7AI7o/CCFu0PRHd2dLm379A64nawx/FCuBgYGiTxjZzJWy0BKvugUeMGAAysrKTJbt3LnTpZk9CSHEFQKY3dTaxCoLJa0BXL582fjWKeD60KbKykrccsst6Nq1K3Jzc3H27FnjA0DPPPMMlixZghdeeAFPPvkkPvvsM3zwwQcuvSaviRmMdwSEEN/XxFr2Ip//fY7tssOV40hVFkoaAL799lsMGzbM+HdzW312djZWr16Nc+fO4fTp08b13bp1w7Zt2zBjxgwsXrwYXbp0wbvvvovU1FSnjy1AgDj/HQgh3kCsK97eXb4rNQCpykKPeQ7AXTQaDYKCglB9JBwdbHTkEEJ8y6VLArr1qUFDQ4NLbfPGsuNohM2y49IlAd16n3P5OO7kVZ3AhBAitdaoAUiF2wDQBIYmL/qhCCEtI9b13sSYnT4A7ylXuA0ABsZg8KIfihDSMmJd7wYwGGwEE1vrPA23AaDpj0QI4YNY17uB/W+sv7X13oLbAEAIIa4Q/ki21nsLbgOAngFNXhSpCSEtoxfpetczGZqY9aeJ9TbWeRpuA4ABMhjgPT8UIaRlxLre7ZUd3lSucBsAmpgcTYyeAyCEF2LV+CkA+ACqARDCF7Gud4HJINho5rG1ztNwGwDs/YiEEN8i1vWugwI6G/No6rzoxpLbAEA1AEL4Itb1zuzcPDIvurHkNgDomYL6AAjhiFijc6gPwAdQDYAQvoh1vTcxBZqYwsZ6+6+M9BQcBwA5DN71PhxCSAuIVSxTDcAHXO8EpgBACC8EseYCYnIYbJQd3jTHGLcBQMcUaGujGkcI8S06kcplATIINu7yba3zNNwGAAY5BGoCIoQbTLTpoNtAZ7MPgAKAx6NOYEL4ItqDYHZuHumFMF7AXjseIcS3iPY+ACaDwcZdvq11nobbANDE2tgcykUI8S1iNc3YG0FIL4TxAtQERAhfxHsOwPbNI/UBeAEBchoGSghHxGqbF2C7mYdeCOMFBMjoQTBCOCKIVDTb7wT2nnKF2wDQxBRoQ30AhHCjyW0PglEA8Hg0CogQvoh1vdu7eRQr0LgDvwGA5gIihCtiXe/2RwF5T7nCbQCgF8IQwhexrnd6I5gP0LM2aGLcnj4h3NGLNheQ7RoAdQJ7AXoOgBC+iPk+AAX1AXg3gdFzAITwRKzr3V7Z4U3liuQBYOnSpXjjjTdQU1OD22+/HW+//TaSkpKsbl9YWIiioiKcPn0aISEhePTRR1FQUAA/Pz+njtvE5DajOCHEtzQxcZ4DMMB2bcLVF89IURZKGgA2bNgAtVqN4uJiJCcno7CwEKmpqaiqqkJoaKjZ9uvWrcPMmTOxcuVKDBw4EMeOHcO4ceMgk8mwaNEip45Nw0AJ4YtY13tr1ACkKgslDQCLFi3CxIkTMX78eABAcXExtm3bhpUrV2LmzJlm2+/btw+DBg3C2LFjAQAxMTEYM2YMvv76a6ePbe+lDoQQ3yLW9a63805gvQs1DanKQskCgE6nw4EDB5Cbm2tcJpfLkZKSgoqKCov7DBw4EGvXrsX+/fuRlJSEkydPorS0FJmZmVaPo9VqodVqjX9rNBoA16M01QAI4YdYbfOOPgncXNY0U6lUUKlUZtu7qyy0RLIAUF9fD4PBgLCwMJPlYWFhOHr0qMV9xo4di/r6etxzzz1gjEGv1+OZZ57BSy+9ZPU4BQUFyM/PN1vexBSQUx8AIdwQqw/A0ecAoqKiTJbn5eVh7ty5Ztu7qyy0RPJOYGeUl5dj/vz5WLZsGZKTk3H8+HE899xzmDdvHmbPnm1xn9zcXKjVauPfGo0GUVFR9CAYIZwR63p39EngM2fOIDAw0Ljc0t2/q1wpCy2RLACEhIRAoVCgtrbWZHltbS3Cw8Mt7jN79mxkZmbiqaeeAgDExcXhypUrmDRpEmbNmgW53PxHsVbtoqkgCOGLWNe73s5zAM19AIGBgSYBwBp3lYWWSBYAlEolEhISUFZWhvT0dACAIAgoKyvD1KlTLe5z9epVsxNTKK7/EMzJhy+oBkAIX0SrAYj8Skgpy0JJm4DUajWys7ORmJiIpKQkFBYW4sqVK8ae8KysLHTu3BkFBQUAgLS0NCxatAh33HGHsdoze/ZspKWlGU/eUXrqAyCEK66MzrGkNeYCkqoslDQAZGRkoK6uDnPmzEFNTQ3i4+Oxfft2Y2fI6dOnTaLcyy+/DJlMhpdffhlnz55Fp06dkJaWhtdee83pY1MNgBC+iHW9MzvPATAXRhtJVRbKmLNtJ15Oo9EgKCgIE8pHQRnQVursEELcRHe5CSuGfoCGhgaH2uZv1lx2jC8fBWWA0sZxdFjVguO4k1eNAhKTAPEeDCGEeD6x3tVLcwH5gCZBAZlAfQCE8KJJpOvd3iwC3nRjyW0AoD4AQvjiqaOApMRvAKC5gAjhiphzAclt1Cb0XjS6kOsA4E2RmhDSMmIFAGbn5pF50Y0ltwFAT30AhHBFL1YfAL0T2PtRExAhfBHreqdRQD6AOoEJ4YtY17ueySGzUcjrKQB4PgoAhPBFrOudmoB8APUBEMIX6gMwx20AoD4AQvgiXh8ABQCvZxBkkAne01ZHCGkZgyDeg2C2+gC8aXg5twGAEEJcQTUAH2AQ5FQDIIQjBpGudwoAPoD6AAjhC/UBmOM2AOgFOUA1AEK4oRfperfXeiBWTcMduA0AhBDiCpoO2gdQHwAhfKE+AHPcBgB6EpgQvoj3TmAZmI3PsrXO03AdALxpvC4hpGVEeyEM9QEQQgifmJ3WA6oBeAEDo1FAhPDEINIsnQwAY7bXewtuA4C9djxCiG8R63oXIIOMRgF5N4MgA0SaG4QQ4vlEmwvIzjNE1AdACCE+ijE7TUBe1AbEbQCwF8UJIb5FrDtzGgbqAxi8q7OGENIyYl3vFAB8gEBPAhPCFUG0uYBs9x+K1dfgDtwGAEIIccX1PgBbNQA3ZqaFuA0AggDIvChSE0JaRhDE+RxfagKSvA1k6dKliImJgZ+fH5KTk7F//36b21+8eBE5OTmIiIiASqXCbbfdhtLSUqeP2/wjUqJEiZ8kBuZAcoUUZaGkNYANGzZArVajuLgYycnJKCwsRGpqKqqqqhAaGmq2vU6nw5///GeEhoZi48aN6Ny5M3755Rd07NjR6WMzQQaBagCEcIOJdL0zQWbzs1w5jlRloaQBYNGiRZg4cSLGjx8PACguLsa2bduwcuVKzJw502z7lStX4vfff8e+ffvQtm1bAEBMTIxLx7Y3lpcQ4ltEu97t1SZcqGlIVRZK1gSk0+lw4MABpKSk/C8zcjlSUlJQUVFhcZ8tW7ZgwIAByMnJQVhYGPr164f58+fDYDBYPY5Wq4VGozFJAK7/SJQoUeIriaD55tFWAmBW7mi1Wouf566y0BLJagD19fUwGAwICwszWR4WFoajR49a3OfkyZP47LPP8Pjjj6O0tBTHjx/HlClT0NTUhLy8PIv7FBQUID8/32y5mG2ChBDPJ1ofgJ2yo3ldVFSUyfK8vDzMnTvXbHt3lYWWeNUoIEEQEBoain/9619QKBRISEjA2bNn8cYbb1g96dzcXKjVauPfGo0GUVFRFAAI4YxoAcDBPoAzZ84gMDDQuFylUolyfMC1stASyQJASEgIFAoFamtrTZbX1tYiPDzc4j4RERFo27YtFAqFcVmfPn1QU1MDnU4HpVJpto9KpbL4xVMfACF8Ea8P4I9kaz2AwMBAkwBgjbvKQksk6wNQKpVISEhAWVmZcZkgCCgrK8OAAQMs7jNo0CAcP34cwg0Deo8dO4aIiAiHT9jIkbFclChR8q0kArGHm0pZFkraBKRWq5GdnY3ExEQkJSWhsLAQV65cMfaEZ2VloXPnzigoKAAATJ48GUuWLMFzzz2HadOm4eeff8b8+fPx7LPPOn1sBmoCIoQnTMx5+kUKJs2kKgslDQAZGRmoq6vDnDlzUFNTg/j4eGzfvt3YGXL69GnI5f+rpERFRWHHjh2YMWMG+vfvj86dO+O5557Diy++6PzB6X0AhPDFg58DkKoslDHGV0u4RqNBUFAQuhTlQd7OT+rsEELcRLjWiF8n56OhocGhtvmbNZcdUcVzbZYdwrVGnHlmrsvHcSevGgUkKhHHBRNCvIBY17u9/gQvuqXmOADAq34oQkgLiXW9UwDwAdQHQAhfPLgPQCr8BgCqARDCF6oBmKEAQAjhg2gBwE7/oRf1LXIcAKgTmBCuiHS9y9j1ZGu9t+A4AIBqAITwRKzr3V7/IfUBeAEKAITwhfoAzHAbAGRMBhk1ARHCDdGudwoAPoBqAITwhWoAZvgNAMIfiRDCB5Gud5kgg8xGO7+tdZ7G6QCQnZ2NCRMm4N57722N/LgPjQIihC/UBGTG6QDQ0NCAlJQUREdHY/z48cjOzkbnzp1bI2+tSgbvGq5FCGkZut0z5/QLYTZv3oyzZ89i8uTJ2LBhA2JiYjB8+HBs3LgRTU1NrZHH1iFQokSJuySC5ptHq0mcw7iFS28E69SpE9RqNb7//nt8/fXX6NmzJzIzMxEZGYkZM2bg559/FjuforP5A1KiRMknkyianwOwlbxEi14Jee7cOezcuRM7d+6EQqHAQw89hEOHDqFv37546623xMpj62CUKFHiLonBXcdxA6f7AJqamrBlyxasWrUKn376Kfr374/p06dj7NixxpcffPzxx3jyyScxY8YM0TMsGuoEJoQvNBWEGacDQEREBARBwJgxY7B//37Ex8ebbTNs2DB07NhRhOy1HplwPRFC+CDa9W7vLt+XA8Bbb72Fxx57DH5+1l+J1rFjR1RXV7coY63Oy6pqhJAWEul6t3fz6E03lk4HgMzMzNbIh9vJ/kiEED6Idr3TdNA+gGoAhPBF7E7g1j6OG3AbAKgPgBC+iHW9c90J7DOoBkAIX8S63u3dPHrRjSUFAEIIH6gJyAzXAcCbqmqEkBaiAGCG2wBgb0pXQohvEet6pz4AX0BNQITwhWoAZvgNAIBX/VCEEM9ANQAfIOrsgIQQjyfq9e4jZUeLZgMVy9KlSxETEwM/Pz8kJydj//79Du23fv16yGQypKenO39Qqeclp0SJkvuTCJqfIbKVXCFFOSh5ANiwYQPUajXy8vJw8OBB3H777UhNTcX58+dt7nfq1Cn84x//wODBg106rtTzklOiRMn9SRTMgeQkqcpByQPAokWLMHHiRIwfPx59+/ZFcXEx2rdvj5UrV1rdx2Aw4PHHH0d+fj66d+/u2oEd+REpUaLkW0kErRFopCoHJQ0AOp0OBw4cQEpKinGZXC5HSkoKKioqrO73yiuvIDQ0FBMmTHBHNgkh5H9EDjRSloOSdgLX19fDYDAgLCzMZHlYWBiOHj1qcZ89e/ZgxYoVqKysdOgYWq0WWq3W+LdGowEAmguIEM6INheQnbKjeV1zWdNMpVJBpVKZbe+OctAarxoFdOnSJWRmZmL58uUICQlxaJ+CggLk5+ebLRe1TZAQ4vFE7wOwtR5AVFSUyeK8vDzMnTu3xYd3pRy0RtIAEBISAoVCgdraWpPltbW1CA8PN9v+xIkTOHXqFNLS0ozLBOF6uG3Tpg2qqqrQo0cPk31yc3OhVquNf2s0mus/jIijAgghXkCs693BAHDmzBnja3IBWLz7B9xTDlojaR+AUqlEQkICysrKjMsEQUBZWRkGDBhgtn3v3r1x6NAhVFZWGtPIkSMxbNgwVFZWmkVc4PqXHhgYaJIIIcRVjnYC31zuWAsA7igHrZG8CUitViM7OxuJiYlISkpCYWEhrly5gvHjxwMAsrKy0LlzZxQUFMDPzw/9+vUz2b/53cM3L7eH+gAI4Yu7+wCcIVU5KHkAyMjIQF1dHebMmYOamhrEx8dj+/btxg6R06dPQy4Xv6JCfQCE8MXdfQDOkK4cZIyrYlCj0SAoKAh9Js+HQmX9xfaEEN9i0DbiSNFLaGhocKkp2Fh2TLFddhi0jTiyzPXjuJPkNQBCCPEmsj+SrfXegtsAQH0AhPDFk/sApMJvAAD1ARDCE9HuzFuhD0Aq3AYAeg6AEM6Ieb17USFvC78BgBBCXGBvBKE3tSxwGwBkAoNM8KJfihDSImJd79QH4APoOQBC+OLJzwFIhd8AQKOACOGKaKOAqAmIEEI4RTUAH0CjgAjhCz0HYIbbAEB9AITwhfoAzPEbAKgPgBCuiNcHwCCzMYWarXWehtsAQAghLqEagPejGgAhfKG5gMxxGwDsRnFCiG8R6XqnYaA+gJ4EJoQvol3v1ARECCF8ohqAD5Ax72qrI4S0jJjDQG2WHRQAvAA9B0AIX0QLAOx6srXeS3AbAGgUECF8obmAzHEbAOxGcUKIbxHreqdOYO9HU0EQwhexrneZAZDJba/3FtwGAHoOgBDO0HMAZrgNANQHQAhfRLveqRPY+9mb0IkQ4lvEut6pBuALqAmIEL6I1QREcwF5P2oCIoQv1ARkjuMAQHMBEcITsa53agLyBdQERAhf6I1gZigAEEL4INpzAAwyuY03ghm8p2Cx8TiD+yxduhQxMTHw8/NDcnIy9u/fb3Xb5cuXY/DgwQgODkZwcDBSUlJsbm9NczWOEiVK/CRRMAeSC6QoByWvAWzYsAFqtRrFxcVITk5GYWEhUlNTUVVVhdDQULPty8vLMWbMGAwcOBB+fn5YuHAhHnjgAfz000/o3Lmzw8eVMeoDIIQnog0Dhe1gInPhMyUsB6Xtsk5OTsZdd92FJUuWAAAEQUBUVBSmTZuGmTNn2t3fYDAgODgYS5YsQVZWlt3tNRoNgoKCMGhYHtq08Wtx/gkh3kGvb8Te3floaGhAYGCg0/sby47759osO/T6Ruwtm+vUcdxdDjaTtAag0+lw4MAB5ObmGpfJ5XKkpKSgoqLCoc+4evUqmpqacMsttzh1bFGrhIQQjyfW9S72cwBSloOSBoD6+noYDAaEhYWZLA8LC8PRo0cd+owXX3wRkZGRSElJsbheq9VCq9Ua/9ZoNNf/0YK2OkKIFxIrANiZRaB5nbGs+YNKpYJKpTLb3h3loDWS9wG0xIIFC7B+/XqUl5fDz89ylaygoAD5+flmy+k5AEL4Itr1LvyRbK0HEBUVZbI4Ly8Pc+fOFScPN3CkHLRG0gAQEhIChUKB2tpak+W1tbUIDw+3ue+bb76JBQsWYNeuXejfv7/V7XJzc6FWq41/azQaREVF2Y3ihBDfIt5cQI7VAM6cOWPSB2Dp7h9wTzlojaQBQKlUIiEhAWVlZUhPTwdwvfOjrKwMU6dOtbrf66+/jtdeew07duxAYmKizWNYq3bZjeKEEN8i1vUusOvJ1noAgYGBDnUCu6MctEbyJiC1Wo3s7GwkJiYiKSkJhYWFuHLlCsaPHw8AyMrKQufOnVFQUAAAWLhwIebMmYN169YhJiYGNTU1AICAgAAEBAQ4fmB6IxghfPHg2UClKgclDwAZGRmoq6vDnDlzUFNTg/j4eGzfvt3YIXL69GnI5f97Xq2oqAg6nQ6PPvqoyec4275GfQCE8EW0670VJoOTrByU+jkAd2seyzskaRY9B0AIR/T6Rny+/7UWPwcwNPllu88BlH/9qsvHcSfJawBSoU5gQvgi2vXuYB+AN+A3AAjMqyZtIoS0jHjTQTs2CsgbcBsAqBOYEM6Idb3TC2F8AINX/VCEkBYSczZQW0NKvahY4TcACHBt2j5CiHcS6TkAmcAgszHhjzeNLuQ2AMgEweaPSAjxLTJBpOudmoB8APUBEMIX0UYBwXbrgRfdV/IbAKgJiBC+iNUERKOAvB89B0AIX8R7DsDOCwHEampyA24DgN0fkRDiW6gPwAzHAYBeCUYIV8R8HwD1AXg56gQmhC9ufh+AN6AAQAjhg1jXu8HOy0QM3lMF4DYAyAQBMm+qqxFCWoSeAzDHbQCgGgAhnBHterdXdnhPuUIBgBDCB5oMzgwFAEIIH0TrAzAAzGB9vWBjnYfhNwAYBIBRHwAh3KA+ADP8BgCqARDCFzHfCGarnZ9mA/UCgr1JvQkhPsWDXwovFX4DANUACOGLqDUAW3MBeU+5wm0AYAYBjPoACOEGE6sPQLDzIBhNBucFGHUCE8IVsa53agLyAQIFAEK4QgHADL8BgBBCXMAMBjAbzwEweg7ACxgMgMx7fihCSAvZenjLqc9htjt6qQbg+RhjYF40ZwchpGWYmFNB2Co7KAB4AaoBEMIXsWoA9t4m6EV9i/wGAEIIcQEzGMBs3Dza6h/wNNwGAGYQbP6IhBDfItpzPz7UBCSXOgMAsHTpUsTExMDPzw/JycnYv3+/ze0//PBD9O7dG35+foiLi0NpaanzBxUYJUqUeEtiaKXjSFEOSl4D2LBhA9RqNYqLi5GcnIzCwkKkpqaiqqoKoaGhZtvv27cPY8aMQUFBAR5++GGsW7cO6enpOHjwIPr16+fwca9X4zwi/hFC3EC0phnGAFtPArtQA5CqHJQx0brGXZOcnIy77roLS5YsAQAIgoCoqChMmzYNM2fONNs+IyMDV65cwdatW43L7r77bsTHx6O4uNju8TQaDYKCgjBU/le0kbUV70QIIR5Nz5pQLmxCQ0MDAgMDnd6/uewYprBdduhZE3YbnDuOu8vBZpLWAHQ6HQ4cOIDc3FzjMrlcjpSUFFRUVFjcp6KiAmq12mRZamoqNm/e7NzBBQNANQBC+CFSDYAJDExm/b7Z2XtqKctBSQNAfX09DAYDwsLCTJaHhYXh6NGjFvepqamxuH1NTY3F7bVaLbRarfHvhoYGAIAeTd706k5CSAvp0QSg5c8D6JnW5lDP5uNoNBqT5SqVCiqVymx7d5SD1kjeB9DaCgoKkJ+fb7Z8D1zoOCaEeL3//ve/CAoKcno/pVKJ8PBw7KmxX3YEBAQgKirKZFleXh7mzp3r9HFbk6QBICQkBAqFArW1tSbLa2trER4ebnGf8PBwp7bPzc01qSpdvHgR0dHROH36tEv/CTyJRqNBVFQUzpw541Kbpiehc/FMvnQuDQ0N6Nq1K2655RaX9vfz80N1dTV0Op3dbRljkMlkJsss3f0D7ikHrZE0ACiVSiQkJKCsrAzp6ekArnd+lJWVYerUqRb3GTBgAMrKyjB9+nTjsp07d2LAgAEWt7dW7QoKCvL6/9DNAgMD6Vw8EJ2LZ5LLXe/78/Pzg5+fn4i5cU85aBWT2Pr165lKpWKrV69mhw8fZpMmTWIdO3ZkNTU1jDHGMjMz2cyZM43b7927l7Vp04a9+eab7MiRIywvL4+1bduWHTp0yKHjNTQ0MACsoaGhVc7HnehcPBOdi2fy5HNxdznYTPIAwBhjb7/9NuvatStTKpUsKSmJffXVV8Z1Q4YMYdnZ2Sbbf/DBB+y2225jSqWSxcbGsm3btjl8LE/+T+AsOhfPROfimTz9XNxZDjbziADgTo2NjSwvL481NjZKnZUWo3PxTHQunsmXzkUskj8IRgghRBr0JBQhhHCKAgAhhHCKAgAhhHDKJwOAJNNLtxJnzmX58uUYPHgwgoODERwcjJSUFLvn7k7O/i7N1q9fD5lMZhwj7QmcPZeLFy8iJycHERERUKlUuO222zzm/5mz51JYWIhevXqhXbt2iIqKwowZM9DY2Oim3Fr3xRdfIC0tDZGRkZDJZA7Ni1NeXo4777wTKpUKPXv2xOrVq1s9nx5F6l5osa1fv54plUq2cuVK9tNPP7GJEyeyjh07straWovb7927lykUCvb666+zw4cPs5dfftml8bStwdlzGTt2LFu6dCn77rvv2JEjR9i4ceNYUFAQ+/XXX92cc3POnkuz6upq1rlzZzZ48GD2l7/8xT2ZtcPZc9FqtSwxMZE99NBDbM+ePay6upqVl5ezyspKN+fcnLPnUlJSwlQqFSspKWHV1dVsx44dLCIigs2YMcPNOTdXWlrKZs2axTZt2sQAsI8//tjm9idPnmTt27dnarWaHT58mL399ttMoVCw7du3uyfDHsDnAkBSUhLLyckx/m0wGFhkZCQrKCiwuP2oUaPYiBEjTJYlJyezp59+ulXz6Qhnz+Vmer2edejQgf373/9urSw6zJVz0ev1bODAgezdd99l2dnZHhMAnD2XoqIi1r17d6bT6dyVRYc5ey45OTnsvvvuM1mmVqvZoEGDWjWfznIkALzwwgssNjbWZFlGRgZLTU1txZx5Fp9qAmqeVjUlJcW4zJFpVW/cHrg+raq17d3FlXO52dWrV9HU1OTy3CdicfVcXnnlFYSGhmLChAnuyKZDXDmXLVu2YMCAAcjJyUFYWBj69euH+fPnw2CQ9pWkrpzLwIEDceDAAWMz0cmTJ1FaWoqHHnrILXkWk6de++7kU7OBSjmtqthcOZebvfjii4iMjDT7T+5urpzLnj17sGLFClRWVrohh45z5VxOnjyJzz77DI8//jhKS0tx/PhxTJkyBU1NTcjLy3NHti1y5VzGjh2L+vp63HPPPWCMQa/X45lnnsFLL73kjiyLytq1r9FocO3aNbRr106inLmPT9UAyP8sWLAA69evx8cffyz65FWt7dKlS8jMzMTy5csREhIidXZaTBAEhIaG4l//+hcSEhKQkZGBWbNmOfXmJk9RXl6O+fPnY9myZTh48CA2bdqEbdu2Yd68eVJnjbjAp2oAUk6rKjZXzqXZm2++iQULFmDXrl3o379/a2bTIc6ey4kTJ3Dq1CmkpaUZlwnC9RdwtGnTBlVVVejRo0frZtoKV36XiIgItG3bFgqFwrisT58+qKmpgU6ng1KpbNU8W+PKucyePRuZmZl46qmnAABxcXG4cuUKJk2ahFmzZrVopk13s3btBwYGcnH3D/hYDeDGaVWbNU+ram2a1OZpVW/k0rSqInPlXADg9ddfx7x587B9+3YkJia6I6t2OXsuvXv3xqFDh1BZWWlMI0eOxLBhw1BZWWn2og13cuV3GTRoEI4fP24MYgBw7NgxRERESFb4A66dy9WrV80K+ebAxrxsVhlPvfbdSupeaLFJNa1qa3D2XBYsWMCUSiXbuHEjO3funDFdunRJqlMwcvZcbuZJo4CcPZfTp0+zDh06sKlTp7Kqqiq2detWFhoayl599VWpTsHI2XPJy8tjHTp0YO+//z47efIk+/TTT1mPHj3YqFGjpDoFo0uXLrHvvvuOfffddwwAW7RoEfvuu+/YL7/8whhjbObMmSwzM9O4ffMw0Oeff54dOXKELV26lIaB+gIpplVtLc6cS3R0NMP1Nx2bpLy8PPdn3AJnf5cbeVIAYMz5c9m3bx9LTk5mKpWKde/enb322mtMr9e7OdeWOXMuTU1NbO7cuaxHjx7Mz8+PRUVFsSlTprALFy64P+M32b17t8X//835z87OZkOGDDHbJz4+nimVSta9e3e2atUqt+dbSjQbKCGEcMqn+gAIIYQ4jgIAIYRwigIAIYRwigIAIYRwigIAIYRwigIAIYRwigIAIYRwigIAIYRwigIAIYRwigIAIYRwigIAIYRwigIA8Xl1dXUIDw/H/Pnzjcv27dsHpVJpNh0wITyhyeAIF0pLS5Geno59+/ahV69eiI+Px1/+8hcsWrRI6qwRIhkKAIQbOTk52LVrFxITE3Ho0CF88803UKlUUmeLEMlQACDcuHbtGvr164czZ87gwIEDiIuLkzpLhEiK+gAIN06cOIHffvsNgiDg1KlTUmeHEMlRDYBwQafTISkpCfHx8ejVqxcKCwtx6NAhhIaGSp01QiRDAYBw4fnnn8fGjRvx/fffIyAgAEOGDEFQUBC2bt0qddYIkQw1ARGfV15ejsLCQqxZswaBgYGQy+VYs2YNvvzySxQVFUmdPUIkQzUAQgjhFNUACCGEUxQACCGEUxQACCGEUxQACCGEUxQACCGEUxQACCGEUxQACCGEUxQACCGEUxQACCGEUxQACCGEUxQACCGEUxQACCGEU/8P0O5UcXV7oRwAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana_neumann(x, y, t, alpha=0.4, L=1, n=1):\n",
    "    # Steady-state solution for the given boundary conditions\n",
    "    return 1 - x / L\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u_corrected = u_ana_neumann(res_test[:, 0], res_test[:, 1], t=1)\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u_corrected = u_corrected.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u_corrected[:, :, -1], extent=[0, L, 0, 1], aspect='auto')  # Last time step\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat Analytical Solution t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical_t1.png')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1136.107116,
   "end_time": "2025-03-31T02:55:39.539153",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-31T02:36:43.432037",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
