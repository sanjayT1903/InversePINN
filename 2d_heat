{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "822b6a3a",
   "metadata": {
    "papermill": {
     "duration": 0.004348,
     "end_time": "2025-03-02T20:24:59.347660",
     "exception": false,
     "start_time": "2025-03-02T20:24:59.343312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1c8578b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:24:59.356045Z",
     "iopub.status.busy": "2025-03-02T20:24:59.355702Z",
     "iopub.status.idle": "2025-03-02T20:25:02.903941Z",
     "shell.execute_reply": "2025-03-02T20:25:02.903258Z"
    },
    "papermill": {
     "duration": 3.554792,
     "end_time": "2025-03-02T20:25:02.906031",
     "exception": false,
     "start_time": "2025-03-02T20:24:59.351239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e3447b63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:25:02.915023Z",
     "iopub.status.busy": "2025-03-02T20:25:02.914628Z",
     "iopub.status.idle": "2025-03-02T20:25:02.932778Z",
     "shell.execute_reply": "2025-03-02T20:25:02.931745Z"
    },
    "papermill": {
     "duration": 0.025259,
     "end_time": "2025-03-02T20:25:02.935175",
     "exception": false,
     "start_time": "2025-03-02T20:25:02.909916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a71fd52b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:25:02.946306Z",
     "iopub.status.busy": "2025-03-02T20:25:02.945052Z",
     "iopub.status.idle": "2025-03-02T20:25:02.951142Z",
     "shell.execute_reply": "2025-03-02T20:25:02.950148Z"
    },
    "papermill": {
     "duration": 0.013799,
     "end_time": "2025-03-02T20:25:02.953189",
     "exception": false,
     "start_time": "2025-03-02T20:25:02.939390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aa0f6058",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:25:02.962600Z",
     "iopub.status.busy": "2025-03-02T20:25:02.962322Z",
     "iopub.status.idle": "2025-03-02T20:25:03.027979Z",
     "shell.execute_reply": "2025-03-02T20:25:03.027142Z"
    },
    "papermill": {
     "duration": 0.072766,
     "end_time": "2025-03-02T20:25:03.029845",
     "exception": false,
     "start_time": "2025-03-02T20:25:02.957079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "562d4131",
   "metadata": {
    "papermill": {
     "duration": 0.003363,
     "end_time": "2025-03-02T20:25:03.036930",
     "exception": false,
     "start_time": "2025-03-02T20:25:03.033567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5811da54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:25:03.045370Z",
     "iopub.status.busy": "2025-03-02T20:25:03.044833Z",
     "iopub.status.idle": "2025-03-02T20:25:03.299347Z",
     "shell.execute_reply": "2025-03-02T20:25:03.298285Z"
    },
    "papermill": {
     "duration": 0.262533,
     "end_time": "2025-03-02T20:25:03.302984",
     "exception": false,
     "start_time": "2025-03-02T20:25:03.040451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "089236ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:25:03.315556Z",
     "iopub.status.busy": "2025-03-02T20:25:03.314674Z",
     "iopub.status.idle": "2025-03-02T20:25:04.703918Z",
     "shell.execute_reply": "2025-03-02T20:25:04.702935Z"
    },
    "papermill": {
     "duration": 1.396368,
     "end_time": "2025-03-02T20:25:04.705909",
     "exception": false,
     "start_time": "2025-03-02T20:25:03.309541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e644fa3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:25:04.714722Z",
     "iopub.status.busy": "2025-03-02T20:25:04.714070Z",
     "iopub.status.idle": "2025-03-02T20:25:04.717537Z",
     "shell.execute_reply": "2025-03-02T20:25:04.716811Z"
    },
    "papermill": {
     "duration": 0.009411,
     "end_time": "2025-03-02T20:25:04.719107",
     "exception": false,
     "start_time": "2025-03-02T20:25:04.709696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e5e4aec4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:25:04.727610Z",
     "iopub.status.busy": "2025-03-02T20:25:04.727373Z",
     "iopub.status.idle": "2025-03-02T20:43:39.514881Z",
     "shell.execute_reply": "2025-03-02T20:43:39.513867Z"
    },
    "papermill": {
     "duration": 1114.794118,
     "end_time": "2025-03-02T20:43:39.516910",
     "exception": false,
     "start_time": "2025-03-02T20:25:04.722792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/2000 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 2000/2000 [18:34<00:00,  1.79it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(2000)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc =  torch.mean((u_bc_x_min) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 4* torch.mean((bc_y_max-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 100*loss_res + 5*loss_ic + 10*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "02764f2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:43:39.707992Z",
     "iopub.status.busy": "2025-03-02T20:43:39.707671Z",
     "iopub.status.idle": "2025-03-02T20:43:39.722665Z",
     "shell.execute_reply": "2025-03-02T20:43:39.721643Z"
    },
    "papermill": {
     "duration": 0.108853,
     "end_time": "2025-03-02T20:43:39.724311",
     "exception": false,
     "start_time": "2025-03-02T20:43:39.615458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000858, Loss_IC: 0.057177, loss_bc: 0.027383\n",
      "Train Loss: 0.085418\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e9aac2f",
   "metadata": {
    "papermill": {
     "duration": 0.088538,
     "end_time": "2025-03-02T20:43:39.901462",
     "exception": false,
     "start_time": "2025-03-02T20:43:39.812924",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "01c05860",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:43:40.082650Z",
     "iopub.status.busy": "2025-03-02T20:43:40.081959Z",
     "iopub.status.idle": "2025-03-02T20:43:40.085856Z",
     "shell.execute_reply": "2025-03-02T20:43:40.085009Z"
    },
    "papermill": {
     "duration": 0.09648,
     "end_time": "2025-03-02T20:43:40.087597",
     "exception": false,
     "start_time": "2025-03-02T20:43:39.991117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# #optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0d224d3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:43:40.267426Z",
     "iopub.status.busy": "2025-03-02T20:43:40.266741Z",
     "iopub.status.idle": "2025-03-02T20:43:40.273013Z",
     "shell.execute_reply": "2025-03-02T20:43:40.272240Z"
    },
    "papermill": {
     "duration": 0.098673,
     "end_time": "2025-03-02T20:43:40.274586",
     "exception": false,
     "start_time": "2025-03-02T20:43:40.175913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(600)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "37fb5b36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:43:40.500103Z",
     "iopub.status.busy": "2025-03-02T20:43:40.499478Z",
     "iopub.status.idle": "2025-03-02T20:43:40.513267Z",
     "shell.execute_reply": "2025-03-02T20:43:40.512378Z"
    },
    "papermill": {
     "duration": 0.152167,
     "end_time": "2025-03-02T20:43:40.514994",
     "exception": false,
     "start_time": "2025-03-02T20:43:40.362827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 14.882813\n",
      "Train Loss: 15.565549\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "31cdba9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:43:40.694658Z",
     "iopub.status.busy": "2025-03-02T20:43:40.693859Z",
     "iopub.status.idle": "2025-03-02T20:43:40.706976Z",
     "shell.execute_reply": "2025-03-02T20:43:40.706330Z"
    },
    "papermill": {
     "duration": 0.104359,
     "end_time": "2025-03-02T20:43:40.708624",
     "exception": false,
     "start_time": "2025-03-02T20:43:40.604265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000858, Loss_IC: 0.057177, loss_bc: 0.027383\n",
      "Train Loss: 0.085418\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ee585baf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:43:40.886172Z",
     "iopub.status.busy": "2025-03-02T20:43:40.885870Z",
     "iopub.status.idle": "2025-03-02T20:43:41.218600Z",
     "shell.execute_reply": "2025-03-02T20:43:41.217642Z"
    },
    "papermill": {
     "duration": 0.423765,
     "end_time": "2025-03-02T20:43:41.220422",
     "exception": false,
     "start_time": "2025-03-02T20:43:40.796657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "30f7d4cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:43:41.401165Z",
     "iopub.status.busy": "2025-03-02T20:43:41.400366Z",
     "iopub.status.idle": "2025-03-02T20:43:41.404331Z",
     "shell.execute_reply": "2025-03-02T20:43:41.403589Z"
    },
    "papermill": {
     "duration": 0.09672,
     "end_time": "2025-03-02T20:43:41.405964",
     "exception": false,
     "start_time": "2025-03-02T20:43:41.309244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ec638bea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:43:41.587023Z",
     "iopub.status.busy": "2025-03-02T20:43:41.586228Z",
     "iopub.status.idle": "2025-03-02T20:43:42.688145Z",
     "shell.execute_reply": "2025-03-02T20:43:42.687249Z"
    },
    "papermill": {
     "duration": 1.19399,
     "end_time": "2025-03-02T20:43:42.689841",
     "exception": false,
     "start_time": "2025-03-02T20:43:41.495851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAEiCAYAAADwEwVaAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAArY0lEQVR4nO3de3BUZZ438O/pDt1NgATcmAvYkAEUSLhkDS+pgBbiZMyObBh2ayWDMyGmFEZMdpTsqiCXgDgEHIxxNZASRSyVJciKi0MqCFmyCsRlBGIxGmCAIFkkAcYlgQRy6fO8fzBpbfr05XQ6fbr7fD9VTxV5+lyeE9L96+cuCSEEiIhIdwxaF4CIiLTBAEBEpFMMAEREOsUAQESkUwwAREQ6xQBARKRTDABERDrFAEBEpFMMAEREOsUAQESkUwwA5JU//vGPKCgoQHJyMgYMGIDhw4djzpw5OHXqlNOxDzzwACRJgiRJMBgMiIqKwpgxY5CTk4O9e/d6fc/HHnsMAwcOdPm6JEkoKCjw6Xm8tWHDBmzZssWrY9vb27Fy5UrU1NT47f4nT57EokWLMHXqVFgsFkiShHPnzvnt+qRvEVoXgELDunXrcPDgQTzyyCOYOHEimpqa8MYbb+Dee+/FF198gfHjxzscf9ddd6G4uBgA0NbWhtOnT+Ojjz7C+++/jzlz5uD9999Hv379tHgUVTZs2ICYmBg89thjHo9tb2/HqlWrANwKgv5QW1uLf/u3f0NSUhLGjRuHuro6v1yXCGAAIC8VFhZi69atMJlM9rzs7GxMmDABa9euxfvvv+9wfHR0NH7961875K1duxa//e1vsWHDBiQmJmLdunUBKXsomzVrFq5evYpBgwZh/fr1DADkV2wCIq9MnTrV4cMfAO6++24kJyejvr7eq2sYjUb7t9k33ngDLS0tfi9nR0cHioqKMHr0aJjNZlitVjz33HPo6OhwOO6dd97Bgw8+iNjYWJjNZiQlJWHjxo0OxyQmJuLrr7/Gf//3f9ubtFx9sz937hzuvPNOAMCqVavsx69cubJXz3PHHXdg0KBBvboGkSusAZDPhBBobm5GcnKy1+cYjUbMnTsXy5cvx4EDBzBz5kyP51y5csWra8uyjFmzZuHAgQNYsGABxo0bh+PHj+PVV1/FqVOn8PHHH9uP3bhxI5KTkzFr1ixERETgk08+wVNPPQVZlpGfnw8AKC0txT//8z9j4MCBWLp0KQAgLi5O8d533nknNm7ciIULF+If/uEf8I//+I8AgIkTJwK4FZiuXbvm1XPExMR4dRxRrwkiH7333nsCgHj77bcd8qdPny6Sk5Ndnrdz504BQLz22mtur5+bmysAuE35+fkO5TEYDOLzzz93uE55ebkAIA4ePGjPa29vd7pfZmamGDlypENecnKymD59utty9rh8+bIAIIqKipxee+eddzw+S09y5fe//70AIBoaGrwqD5EnrAGQT06cOIH8/Hykp6cjNzdX1bk9I3u8+UZssVjwySefKL72s5/9zOHnDz/8EOPGjcPYsWMdag0PPvggAGD//v2YOnUqAKB///7211taWtDV1YXp06djz549aGlpQXR0tKpn8iQzM1PVCCiiQGAAINWampowc+ZMREdHY8eOHTAajarOv379OgB41bZtNBqRkZHh1XX//Oc/o76+3t4Wf7tLly7Z/33w4EEUFRWhtrYW7e3tDsf1RQBISEhAQkKCX69J1FsMAKRKS0sLfv7zn+Pq1av4/PPPMXToUNXX+NOf/gQAGD16tF/LJssyJkyYgJKSEsXXrVYrAODMmTP46U9/irFjx6KkpARWqxUmkwmVlZV49dVXIcuyX8sFADdu3PC60zs+Pt7v9ydSwgBAXrt58yaysrJw6tQp7Nu3D0lJSaqvYbPZsHXrVkRGRuK+++7za/lGjRqFr776Cj/96U8hSZLL4z755BN0dHRg165dGD58uD1///79Tse6u46aYysqKpCXl+fVdQS36aYAYQAgr9hsNmRnZ6O2thb/+Z//ifT0dJ+u8dvf/hb19fVYvHgxoqKi/FrGOXPmoLKyEps2bcKCBQscXrtx4wZkWcaAAQPsTVY//qBtaWnBO++843TNAQMG4OrVq17dPzIyEgAUj2cfAAUjBgDyyr/8y79g165dyMrKwvfff+808ev2SV8tLS32Y9rb2+0zgc+cOYNf/vKXWL16td/LmJOTg+3bt+PJJ5/E/v37MW3aNNhsNpw4cQLbt2/Hnj17MHnyZDz00EMwmUzIysrCb37zG1y/fh2bNm1CbGwsLl686HDN1NRUbNy4ES+99BJGjx6N2NhYe6fy7fr374+kpCRUVFTgnnvuwR133IHx48dj/PjxPvcBtLS04PXXXwdwq98CAN544w0MHjwY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4LfZv3+/4t9/T/lzc3PF9OnTnc5JSUkRJpNJjBw5UrzzzjsBL7eWuBooEZFOhVUfABEReY8BgIhIpxgAiIh0igGAiEinGACIiHSKAYCISKcYAIiIdIoBgIhIpxgAiIh0igGAiEinGACIiHSKAYDC3uXLlxEfH481a9bY8w4dOgSTyeS0HDCRnnAxONKFyspKzJ49G4cOHcKYMWOQkpKCX/ziFygpKdG6aESaYQAg3cjPz8e+ffswefJkHD9+HH/84x9hNpu1LhaRZhgASDdu3LiB8ePHo7GxEUeOHMGECRO0LhKRptgHQLpx5swZfPfdd5BlGefOndO6OESaYw2AdKGzsxNTpkxBSkoKxowZg9LSUhw/fhyxsbFaF41IMwwApAvPPvssduzYga+++goDBw7E9OnTER0djT/84Q9aF41IM2wCorBXU1OD0tJSvPfee4iKioLBYMB7772Hzz//HBs3btS6eESaYQ2AiEinWAMgItIpBgAiIp1iACAi0ikGACIinWIAICLSKQYAIiKdYgAgItIpBgAiIp1iACAi0ikGACIinWIAICLSKQYAIiKd+v87FHT4WGU5MgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1128.266634,
   "end_time": "2025-03-02T20:43:45.032414",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-02T20:24:56.765780",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
