{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e107b531",
   "metadata": {
    "papermill": {
     "duration": 0.004289,
     "end_time": "2025-02-24T22:08:58.231915",
     "exception": false,
     "start_time": "2025-02-24T22:08:58.227626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c0c8cba3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:08:58.240256Z",
     "iopub.status.busy": "2025-02-24T22:08:58.239901Z",
     "iopub.status.idle": "2025-02-24T22:09:01.575148Z",
     "shell.execute_reply": "2025-02-24T22:09:01.574242Z"
    },
    "papermill": {
     "duration": 3.34162,
     "end_time": "2025-02-24T22:09:01.577185",
     "exception": false,
     "start_time": "2025-02-24T22:08:58.235565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e6f6dbac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:09:01.586016Z",
     "iopub.status.busy": "2025-02-24T22:09:01.585256Z",
     "iopub.status.idle": "2025-02-24T22:09:01.600159Z",
     "shell.execute_reply": "2025-02-24T22:09:01.599462Z"
    },
    "papermill": {
     "duration": 0.020555,
     "end_time": "2025-02-24T22:09:01.601596",
     "exception": false,
     "start_time": "2025-02-24T22:09:01.581041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f620a126",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:09:01.609420Z",
     "iopub.status.busy": "2025-02-24T22:09:01.609173Z",
     "iopub.status.idle": "2025-02-24T22:09:01.612627Z",
     "shell.execute_reply": "2025-02-24T22:09:01.611944Z"
    },
    "papermill": {
     "duration": 0.009035,
     "end_time": "2025-02-24T22:09:01.614093",
     "exception": false,
     "start_time": "2025-02-24T22:09:01.605058",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8ba33a46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:09:01.621615Z",
     "iopub.status.busy": "2025-02-24T22:09:01.621404Z",
     "iopub.status.idle": "2025-02-24T22:09:01.682824Z",
     "shell.execute_reply": "2025-02-24T22:09:01.681881Z"
    },
    "papermill": {
     "duration": 0.067041,
     "end_time": "2025-02-24T22:09:01.684497",
     "exception": false,
     "start_time": "2025-02-24T22:09:01.617456",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64277346",
   "metadata": {
    "papermill": {
     "duration": 0.003295,
     "end_time": "2025-02-24T22:09:01.691388",
     "exception": false,
     "start_time": "2025-02-24T22:09:01.688093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3bbcbec9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:09:01.699249Z",
     "iopub.status.busy": "2025-02-24T22:09:01.698996Z",
     "iopub.status.idle": "2025-02-24T22:09:01.895841Z",
     "shell.execute_reply": "2025-02-24T22:09:01.894956Z"
    },
    "papermill": {
     "duration": 0.20314,
     "end_time": "2025-02-24T22:09:01.897885",
     "exception": false,
     "start_time": "2025-02-24T22:09:01.694745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fbc05376",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:09:01.908199Z",
     "iopub.status.busy": "2025-02-24T22:09:01.907466Z",
     "iopub.status.idle": "2025-02-24T22:09:03.182107Z",
     "shell.execute_reply": "2025-02-24T22:09:03.180936Z"
    },
    "papermill": {
     "duration": 1.281461,
     "end_time": "2025-02-24T22:09:03.183898",
     "exception": false,
     "start_time": "2025-02-24T22:09:01.902437",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "425ad470",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:09:03.192695Z",
     "iopub.status.busy": "2025-02-24T22:09:03.192309Z",
     "iopub.status.idle": "2025-02-24T22:09:03.195900Z",
     "shell.execute_reply": "2025-02-24T22:09:03.195254Z"
    },
    "papermill": {
     "duration": 0.009749,
     "end_time": "2025-02-24T22:09:03.197432",
     "exception": false,
     "start_time": "2025-02-24T22:09:03.187683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "64bfe466",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:09:03.205971Z",
     "iopub.status.busy": "2025-02-24T22:09:03.205707Z",
     "iopub.status.idle": "2025-02-24T22:22:56.047174Z",
     "shell.execute_reply": "2025-02-24T22:22:56.046017Z"
    },
    "papermill": {
     "duration": 832.848197,
     "end_time": "2025-02-24T22:22:56.049352",
     "exception": false,
     "start_time": "2025-02-24T22:09:03.201155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1500/1500 [13:52<00:00,  1.80it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1500)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 50* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 20*loss_res + 5*loss_ic + 2*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6b6ddef5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:22:56.199509Z",
     "iopub.status.busy": "2025-02-24T22:22:56.198497Z",
     "iopub.status.idle": "2025-02-24T22:22:56.214200Z",
     "shell.execute_reply": "2025-02-24T22:22:56.213139Z"
    },
    "papermill": {
     "duration": 0.089564,
     "end_time": "2025-02-24T22:22:56.216096",
     "exception": false,
     "start_time": "2025-02-24T22:22:56.126532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.001673, Loss_IC: 0.118813, loss_bc: 0.258807\n",
      "Train Loss: 0.379293\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e047b4dc",
   "metadata": {
    "papermill": {
     "duration": 0.066434,
     "end_time": "2025-02-24T22:22:56.353272",
     "exception": false,
     "start_time": "2025-02-24T22:22:56.286838",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7c476514",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:22:56.488223Z",
     "iopub.status.busy": "2025-02-24T22:22:56.487877Z",
     "iopub.status.idle": "2025-02-24T22:22:56.491567Z",
     "shell.execute_reply": "2025-02-24T22:22:56.490889Z"
    },
    "papermill": {
     "duration": 0.072361,
     "end_time": "2025-02-24T22:22:56.493075",
     "exception": false,
     "start_time": "2025-02-24T22:22:56.420714",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "eda6bdfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:22:56.627758Z",
     "iopub.status.busy": "2025-02-24T22:22:56.627466Z",
     "iopub.status.idle": "2025-02-24T22:22:56.633157Z",
     "shell.execute_reply": "2025-02-24T22:22:56.632424Z"
    },
    "papermill": {
     "duration": 0.076138,
     "end_time": "2025-02-24T22:22:56.634675",
     "exception": false,
     "start_time": "2025-02-24T22:22:56.558537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(250)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 10* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 10*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "57061e6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:22:56.769382Z",
     "iopub.status.busy": "2025-02-24T22:22:56.769053Z",
     "iopub.status.idle": "2025-02-24T22:22:56.782219Z",
     "shell.execute_reply": "2025-02-24T22:22:56.781337Z"
    },
    "papermill": {
     "duration": 0.082616,
     "end_time": "2025-02-24T22:22:56.783784",
     "exception": false,
     "start_time": "2025-02-24T22:22:56.701168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 142.296890\n",
      "Train Loss: 142.979626\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c6b3cc7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:22:56.918391Z",
     "iopub.status.busy": "2025-02-24T22:22:56.917423Z",
     "iopub.status.idle": "2025-02-24T22:22:56.930840Z",
     "shell.execute_reply": "2025-02-24T22:22:56.929994Z"
    },
    "papermill": {
     "duration": 0.082346,
     "end_time": "2025-02-24T22:22:56.932474",
     "exception": false,
     "start_time": "2025-02-24T22:22:56.850128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.001673, Loss_IC: 0.118813, loss_bc: 0.258807\n",
      "Train Loss: 0.379293\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "08762b57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:22:57.068804Z",
     "iopub.status.busy": "2025-02-24T22:22:57.068207Z",
     "iopub.status.idle": "2025-02-24T22:22:57.382331Z",
     "shell.execute_reply": "2025-02-24T22:22:57.381523Z"
    },
    "papermill": {
     "duration": 0.384146,
     "end_time": "2025-02-24T22:22:57.384339",
     "exception": false,
     "start_time": "2025-02-24T22:22:57.000193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6716ec70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:22:57.520197Z",
     "iopub.status.busy": "2025-02-24T22:22:57.519850Z",
     "iopub.status.idle": "2025-02-24T22:22:57.523534Z",
     "shell.execute_reply": "2025-02-24T22:22:57.522862Z"
    },
    "papermill": {
     "duration": 0.072746,
     "end_time": "2025-02-24T22:22:57.525018",
     "exception": false,
     "start_time": "2025-02-24T22:22:57.452272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "00636f60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T22:22:57.664361Z",
     "iopub.status.busy": "2025-02-24T22:22:57.664042Z",
     "iopub.status.idle": "2025-02-24T22:22:58.801014Z",
     "shell.execute_reply": "2025-02-24T22:22:58.800131Z"
    },
    "papermill": {
     "duration": 1.210482,
     "end_time": "2025-02-24T22:22:58.802821",
     "exception": false,
     "start_time": "2025-02-24T22:22:57.592339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Predicted u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Analytical u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 844.354515,
   "end_time": "2025-02-24T22:23:00.094259",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-24T22:08:55.739744",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
