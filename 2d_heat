{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "958430bf",
   "metadata": {
    "papermill": {
     "duration": 0.004319,
     "end_time": "2025-03-02T19:30:43.326211",
     "exception": false,
     "start_time": "2025-03-02T19:30:43.321892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8c427f12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:30:43.334736Z",
     "iopub.status.busy": "2025-03-02T19:30:43.334380Z",
     "iopub.status.idle": "2025-03-02T19:30:47.041683Z",
     "shell.execute_reply": "2025-03-02T19:30:47.041008Z"
    },
    "papermill": {
     "duration": 3.713799,
     "end_time": "2025-03-02T19:30:47.043668",
     "exception": false,
     "start_time": "2025-03-02T19:30:43.329869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f2b7dbf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:30:47.054871Z",
     "iopub.status.busy": "2025-03-02T19:30:47.054350Z",
     "iopub.status.idle": "2025-03-02T19:30:47.073229Z",
     "shell.execute_reply": "2025-03-02T19:30:47.072142Z"
    },
    "papermill": {
     "duration": 0.027327,
     "end_time": "2025-03-02T19:30:47.075595",
     "exception": false,
     "start_time": "2025-03-02T19:30:47.048268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a310afa4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:30:47.089402Z",
     "iopub.status.busy": "2025-03-02T19:30:47.088999Z",
     "iopub.status.idle": "2025-03-02T19:30:47.093563Z",
     "shell.execute_reply": "2025-03-02T19:30:47.092651Z"
    },
    "papermill": {
     "duration": 0.013823,
     "end_time": "2025-03-02T19:30:47.095193",
     "exception": false,
     "start_time": "2025-03-02T19:30:47.081370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bc6102a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:30:47.109574Z",
     "iopub.status.busy": "2025-03-02T19:30:47.109009Z",
     "iopub.status.idle": "2025-03-02T19:30:47.184267Z",
     "shell.execute_reply": "2025-03-02T19:30:47.183310Z"
    },
    "papermill": {
     "duration": 0.08376,
     "end_time": "2025-03-02T19:30:47.186175",
     "exception": false,
     "start_time": "2025-03-02T19:30:47.102415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6aa1083",
   "metadata": {
    "papermill": {
     "duration": 0.00344,
     "end_time": "2025-03-02T19:30:47.193368",
     "exception": false,
     "start_time": "2025-03-02T19:30:47.189928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7967fd94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:30:47.203769Z",
     "iopub.status.busy": "2025-03-02T19:30:47.203460Z",
     "iopub.status.idle": "2025-03-02T19:30:47.451303Z",
     "shell.execute_reply": "2025-03-02T19:30:47.450181Z"
    },
    "papermill": {
     "duration": 0.257141,
     "end_time": "2025-03-02T19:30:47.454436",
     "exception": false,
     "start_time": "2025-03-02T19:30:47.197295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "459be22a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:30:47.466879Z",
     "iopub.status.busy": "2025-03-02T19:30:47.466079Z",
     "iopub.status.idle": "2025-03-02T19:30:48.770788Z",
     "shell.execute_reply": "2025-03-02T19:30:48.769753Z"
    },
    "papermill": {
     "duration": 1.312019,
     "end_time": "2025-03-02T19:30:48.772729",
     "exception": false,
     "start_time": "2025-03-02T19:30:47.460710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b330f364",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:30:48.781499Z",
     "iopub.status.busy": "2025-03-02T19:30:48.781140Z",
     "iopub.status.idle": "2025-03-02T19:30:48.784669Z",
     "shell.execute_reply": "2025-03-02T19:30:48.784027Z"
    },
    "papermill": {
     "duration": 0.009713,
     "end_time": "2025-03-02T19:30:48.786331",
     "exception": false,
     "start_time": "2025-03-02T19:30:48.776618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a7c2b52e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:30:48.794633Z",
     "iopub.status.busy": "2025-03-02T19:30:48.794395Z",
     "iopub.status.idle": "2025-03-02T19:35:27.880402Z",
     "shell.execute_reply": "2025-03-02T19:35:27.879412Z"
    },
    "papermill": {
     "duration": 279.092745,
     "end_time": "2025-03-02T19:35:27.882612",
     "exception": false,
     "start_time": "2025-03-02T19:30:48.789867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 500/500 [04:39<00:00,  1.79it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(500)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc =  torch.mean((u_bc_x_min) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 4* torch.mean((bc_y_max-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 50*loss_res + 5*loss_ic + 10*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "51d78224",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:35:27.934771Z",
     "iopub.status.busy": "2025-03-02T19:35:27.933932Z",
     "iopub.status.idle": "2025-03-02T19:35:27.952487Z",
     "shell.execute_reply": "2025-03-02T19:35:27.951391Z"
    },
    "papermill": {
     "duration": 0.046556,
     "end_time": "2025-03-02T19:35:27.954582",
     "exception": false,
     "start_time": "2025-03-02T19:35:27.908026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000234, Loss_IC: 0.114739, loss_bc: 0.013282\n",
      "Train Loss: 0.128255\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3eb9275f",
   "metadata": {
    "papermill": {
     "duration": 0.02415,
     "end_time": "2025-03-02T19:35:28.003683",
     "exception": false,
     "start_time": "2025-03-02T19:35:27.979533",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8750a6f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:35:28.055006Z",
     "iopub.status.busy": "2025-03-02T19:35:28.054641Z",
     "iopub.status.idle": "2025-03-02T19:35:28.058744Z",
     "shell.execute_reply": "2025-03-02T19:35:28.057923Z"
    },
    "papermill": {
     "duration": 0.031722,
     "end_time": "2025-03-02T19:35:28.060661",
     "exception": false,
     "start_time": "2025-03-02T19:35:28.028939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# #optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ccce03a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:35:28.111964Z",
     "iopub.status.busy": "2025-03-02T19:35:28.111636Z",
     "iopub.status.idle": "2025-03-02T19:35:28.117786Z",
     "shell.execute_reply": "2025-03-02T19:35:28.116943Z"
    },
    "papermill": {
     "duration": 0.033827,
     "end_time": "2025-03-02T19:35:28.119485",
     "exception": false,
     "start_time": "2025-03-02T19:35:28.085658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(600)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6e64b300",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:35:28.171062Z",
     "iopub.status.busy": "2025-03-02T19:35:28.170284Z",
     "iopub.status.idle": "2025-03-02T19:35:28.184556Z",
     "shell.execute_reply": "2025-03-02T19:35:28.183644Z"
    },
    "papermill": {
     "duration": 0.041883,
     "end_time": "2025-03-02T19:35:28.186293",
     "exception": false,
     "start_time": "2025-03-02T19:35:28.144410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 14.882813\n",
      "Train Loss: 15.565549\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fe24dec1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:35:28.237200Z",
     "iopub.status.busy": "2025-03-02T19:35:28.236522Z",
     "iopub.status.idle": "2025-03-02T19:35:28.250519Z",
     "shell.execute_reply": "2025-03-02T19:35:28.249604Z"
    },
    "papermill": {
     "duration": 0.041262,
     "end_time": "2025-03-02T19:35:28.252359",
     "exception": false,
     "start_time": "2025-03-02T19:35:28.211097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000234, Loss_IC: 0.114739, loss_bc: 0.013282\n",
      "Train Loss: 0.128255\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "32aec65d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:35:28.304696Z",
     "iopub.status.busy": "2025-03-02T19:35:28.304359Z",
     "iopub.status.idle": "2025-03-02T19:35:28.640713Z",
     "shell.execute_reply": "2025-03-02T19:35:28.639761Z"
    },
    "papermill": {
     "duration": 0.364694,
     "end_time": "2025-03-02T19:35:28.642660",
     "exception": false,
     "start_time": "2025-03-02T19:35:28.277966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+QAAAIjCAYAAACKx9GpAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACSaklEQVR4nOzdd3xT9f7H8XeSpnuxSouUvTcKchVlIwKiKFwXVwEHKiAq7p8LXFxQvHhFEccFvcp14FZAEBmKg42AyFCWsldLd9qc3x+HpE0XbWnJafN6+sgjzckZ3yTfYt/5fM/32AzDMAQAAAAAAM4qu78bAAAAAABAICKQAwAAAADgBwRyAAAAAAD8gEAOAAAAAIAfEMgBAAAAAPADAjkAAAAAAH5AIAcAAAAAwA8I5AAAAAAA+AGBHAAAAAAAPyCQAwAAv7HZbJowYYK/m3HW7Nq1SzabTbNnzy63fS5dulQ2m01Lly4tt31a+bgAUJUQyAGgEpg9e7ZsNptWr17t76aUyPr16/WPf/xDiYmJCgkJUfXq1dWnTx/NmjVLOTk5/m5epffKK69USKDz3EJCQlS7dm316NFDzz77rA4fPlxux7Kao0eP6v7771fz5s0VGhqq6tWrq1+/fvryyy/PaL9z5szRtGnTyqeRflbe/Q0AkMtmGIbh70YAAIo3e/ZsjRw5UqtWrVKnTp383ZxivfHGG7r99ttVu3Zt3XDDDWratKlOnjypxYsX66uvvtLTTz+t//u///N3Myu1Nm3aqGbNmuVWmVy6dKl69uypcePGqXPnzsrJydHhw4f1ww8/6IsvvlBMTIw++OAD9erVq1yOl1dGRoaCgoIUFBRU7vs+na1bt6p37946fPiwRo4cqU6dOunEiRN69913tX79et1333167rnnyrTvyy67TJs2bdKuXbt8lhuGoczMTDmdTjkcjnJ4FZLb7VZWVpaCg4Nlt5d/raWo/lbRxwWAQHD2/+8HAKiyfvrpJ91+++264IILNG/ePEVFRXmfu/vuu7V69Wpt2rTJjy1EcS6++GINHTrUZ9mGDRt0ySWXaMiQIfr111+VkJBwxsfxBLnQ0FCFhoae8f7KwuVyaejQoTp+/LiWL1+uLl26eJ+75557NGzYMD3//PPq1KmTrrnmmnI7rs1mK/fXbLfb/fI++uu4AFCV8HUmAFQh69atU//+/RUdHa3IyEj17t1bP/30k886LpdLEydOVNOmTRUaGqoaNWrooosu0qJFi7zrHDhwQCNHjlTdunUVEhKihIQEXXHFFQWqfflNnDhRNptN7777rk8Y9+jUqZNGjBjhfZyamqp7773XO7S9efPmev7555V/8JbNZtPYsWP14YcfqlWrVgoLC9MFF1ygjRs3SpJmzpypJk2aKDQ0VD169CjQzh49eqhNmzZas2aNLrzwQoWFhalhw4Z69dVXC7Tx0KFDuvnmm1W7dm2Fhoaqffv2euutt3zW8ZwH/Pzzz+u1115T48aNFRISos6dO2vVqlUF9vnbb79p6NChql69ukJDQ9WpUyd9/vnnPut4TktYsWKFxo8fr1q1aikiIkJXXnmlz5DxBg0aaPPmzVq2bJl3iHmPHj0kleyzLa327dtr2rRpOnHihKZPn+5dPmLECDVo0KDA+hMmTJDNZvNZ5vn83n33XbVu3VohISFasGCB97m855B7tt+xY4dGjBih2NhYxcTEaOTIkUpLS/PZb3p6usaNG6eaNWsqKipKl19+uf76668SnZf+0UcfadOmTXrooYd8wrgkORwOzZw5U7GxsT778Qztf//99/V///d/io+PV0REhC6//HLt3bvXu16PHj301Vdfaffu3d7PyPNeFXYO+YgRIxQZGak9e/bosssuU2RkpM455xy9/PLLkqSNGzeqV69eioiIUP369TVnzhyf9uY/l9vTlwq7efqKJM2aNUu9evVSXFycQkJC1KpVK82YMcNn38X1t6LOIf/www913nnnKSwsTDVr1tQ//vEP/fXXXz7reF7zX3/9pcGDBysyMlK1atXSfffdx2ktAAIKFXIAqCI2b96siy++WNHR0XrggQfkdDo1c+ZM9ejRQ8uWLfOGjgkTJmjSpEm65ZZbdP755ys5OVmrV6/W2rVr1bdvX0nSkCFDtHnzZt15551q0KCBDh06pEWLFmnPnj2FhjBJSktL0+LFi9WtWzfVq1fvtO01DEOXX365lixZoptvvlkdOnTQ119/rfvvv19//fWX/vWvf/ms/9133+nzzz/XmDFjJEmTJk3SZZddpgceeECvvPKKRo8erePHj2vKlCm66aab9O233/psf/z4cQ0YMEBXX321rrvuOn3wwQe64447FBwcrJtuukmSGfB69OihHTt2aOzYsWrYsKE+/PBDjRgxQidOnNBdd93ls885c+bo5MmTuu2222Sz2TRlyhRdddVV+uOPP+R0Or2fS9euXXXOOefooYceUkREhD744AMNHjxYH330ka688kqffd55552qVq2annjiCe3atUvTpk3T2LFj9f7770uSpk2bpjvvvFORkZF65JFHJEm1a9cu8WdbFkOHDtXNN9+shQsX6plnninTPr799lt98MEHGjt2rGrWrFlkP/K4+uqr1bBhQ02aNElr167VG2+8obi4OE2ePNm7zogRI/TBBx/ohhtu0N/+9jctW7ZMAwcOLFF7vvjiC0nSjTfeWOjzMTExuuKKK/TWW29px44datKkife5Z555RjabTQ8++KAOHTqkadOmqU+fPlq/fr3CwsL0yCOPKCkpSX/++ae3H0dGRhbbnpycHPXv31/dunXTlClT9O6772rs2LGKiIjQI488omHDhumqq67Sq6++qhtvvFEXXHCBGjZsWOi+unXrpv/+978+y3bv3q1HH31UcXFx3mUzZsxQ69atdfnllysoKEhffPGFRo8eLbfb7f09K66/FcZzek3nzp01adIkHTx4UC+++KJWrFihdevWKTY21uc19+vXT126dNHzzz+vb775RlOnTlXjxo11xx13FPt+AUCVYQAALG/WrFmGJGPVqlVFrjN48GAjODjY+P33373L9u3bZ0RFRRndunXzLmvfvr0xcODAIvdz/PhxQ5Lx3HPPlaqNGzZsMCQZd911V4nW//TTTw1JxtNPP+2zfOjQoYbNZjN27NjhXSbJCAkJMXbu3OldNnPmTEOSER8fbyQnJ3uXP/zww4Ykn3W7d+9uSDKmTp3qXZaZmWl06NDBiIuLM7KysgzDMIxp06YZkox33nnHu15WVpZxwQUXGJGRkd7j7Ny505Bk1KhRwzh27Jh33c8++8yQZHzxxRfeZb179zbatm1rZGRkeJe53W7jwgsvNJo2bepd5vmM+/TpY7jdbu/ye+65x3A4HMaJEye8y1q3bm107969wHt6us+2KEuWLDEkGR9++GGR67Rv396oVq2a9/Hw4cON+vXrF1jviSeeMPL/eSHJsNvtxubNmwusL8l44oknCmx/0003+ax35ZVXGjVq1PA+XrNmjSHJuPvuu33WGzFiRIF9FqZDhw5GTExMseu88MILhiTj888/Nwwj930655xzfPrcBx98YEgyXnzx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KrBuUf0tv06dOikuLk6vvvqqT5+bP3++tmzZUuIZ8AEgkHDZMwCoRP7zn/94J7PK66677tLTTz+tRYsW6aKLLtLo0aMVFBSkmTNnKjMzU1OmTPGu26pVK/Xo0UPnnXeeqlevrtWrV2vu3LkaO3asJLNq3Lt3b1199dVq1aqVgoKC9Mknn+jgwYO69tpri23fhRdeqJdfflmjR49WixYtdMMNN6hp06Y6efKkli5dqs8//1xPP/20JGnQoEHq2bOnHnnkEe3atUvt27fXwoUL9dlnn+nuu+9W48aNy/GdM88hnzx5snbt2qVmzZrp/fff1/r16/Xaa695L1E2atQozZw5UyNGjNCaNWvUoEEDzZ07VytWrNC0adPKVM1++eWXddFFF6lt27a69dZb1ahRIx08eFA//vij/vzzT23YsKHU+zzvvPM0Y8YMPf3002rSpIni4uLUq1ev0362p/Pdd98pIyNDOTk5Onr0qFasWKHPP/9cMTEx+uSTT3wmBLv22mv14IMP6sorr9S4ceOUlpamGTNmqFmzZlq7dm2pX1NpnXfeeRoyZIimTZumo0ePei975hn1cLqqbnBwsObOnavevXvroosu0siRI9WpUyedOHFCc+bM0dq1a3XvvfcW2uerV6/u3ebgwYOaNm2amjRpoltvvdWnfe+//77Gjx+vzp07KzIyUoMGDSrfN6EIr776qr799lvdfvvtWrJkic9ztWvXVt++fXXJJZcoODhYgwYN0m233aaUlBS9/vrriouLK/DlUVH9LT+n06nJkydr5MiR6t69u6677jrvZc8aNGjgHQ4PAMjDX9O7AwBKznNJrKJue/fuNQzDMNauXWv069fPiIyMNMLDw42ePXsaP/zwg8++nn76aeP88883YmNjjbCwMKNFixbGM888473015EjR4wxY8YYLVq0MCIiIoyYmBijS5cuxgcffFDi9q5Zs8a4/vrrjTp16hhOp9OoVq2a0bt3b+Ott94ycnJyvOudPHnSuOeee7zrNW3a1Hjuued8LvtlGOalscaMGeOzzHP5qPyXZyvsEl7du3c3Wrdubaxevdq44IILjNDQUKN+/frG9OnTC7T94MGDxsiRI42aNWsawcHBRtu2bX0uUVXcsT1tzX/Jrd9//9248cYbjfj4eMPpdBrnnHOOcdlllxlz5871rlPUpe0Ku6TVgQMHjIEDBxpRUVGGJO8lqU732RbFcwzPzel0GrVq1TK6detmPPPMM8ahQ4cK3W7hwoVGmzZtjODgYKN58+bGO++8U+Rlz/J/fkW9X57tDx8+7LOe5/3Jezm71NRUY8yYMUb16tWNyMhIY/DgwcbWrVsNScY///nPYl+zx6FDh4zx48cbTZo0MUJCQozY2FijT58+3kudFfY+/e9//zMefvhhIy4uzggLCzMGDhxo7N6922fdlJQU4/rrrzdiY2MNSd5LoBV12bOIiIgCx/P02/zq16/vc3m7/H3E8x4Wdst7+bLPP//caNeunREaGmo0aNDAmDx5svGf//ynwPtcVH8r6nJr77//vtGxY0cjJCTEqF69ujFs2DDjzz//9FmnqNdcWP8BgKrMZhhnYdYbAAD8qEePHjpy5Ig2bdrk76aggq1fv14dO3bUO++8o2HDhpXrvpcuXaqePXvqww8/1NChQ8t13wCAwMQ55AAAoFJKT08vsGzatGmy2+3q1q2bH1oEAEDpcA45AAColKZMmaI1a9aoZ8+eCgoK0vz58zV//nyNGjWqwPXpAQCwIgI5AAColC688EItWrRITz31lFJSUlSvXj1NmDBBjzzyiL+bBgBAiXAOOQAAAAAAfsA55AAAAAAA+AGBHAAAAAAAP6jy55C73W7t27dPUVFRstls/m4OAAAAAKCKMwxDJ0+eVJ06dWS3F10Hr/KBfN++fcy0CgAAAAA46/bu3au6desW+XyVD+RRUVGSzDciOjraz60pmsvl0sKFC3XJJZfI6XT6uzlAoeinsDr6KKyOPorKgH4Kq6sMfTQ5OVmJiYnePFqUKh/IPcPUo6OjLR/Iw8PDFR0dbdlOBdBPYXX0UVgdfRSVAf0UVleZ+ujpTptmUjcAAAAAAPyAQA4AAAAAgB8QyAEAAAAA8IMqfw45AAAAEAgMw1B2drZycnLOaD8ul0tBQUHKyMg4430BFcEKfdThcCgoKOiML61NIAcAAAAquaysLO3fv19paWlnvC/DMBQfH6+9e/eecdgAKoJV+mh4eLgSEhIUHBxc5n0QyAEAAIBKzO12a+fOnXI4HKpTp46Cg4PPKKS43W6lpKQoMjJSdjtnuMJ6/N1HDcNQVlaWDh8+rJ07d6pp06ZlbgeBHAAAAKjEsrKy5Ha7lZiYqPDw8DPen9vtVlZWlkJDQwnksCQr9NGwsDA5nU7t3r3b25ay4DcMAAAAqAIIz8DZVR6/c/zWAgAAAADgBwRyAAAAAAD8gEAOAAAAoEratWuXbDab1q9fX+Q6S5culc1m04kTJ8r12DabTZ9++mm57hNVD4EcAAAAgF+MGDFCNptNNptNTqdTDRs21AMPPKCMjIxy2X9iYqL279+vNm3alMv+ytOIESM0ePBgfzcDfsYs6wAAAAD85tJLL9WsWbPkcrm0Zs0aDR8+XDabTZMnTz7jfTscDsXHx5dDK4GKQYUcAAAAqGoMQ0pN9c/NMErV1JCQEMXHxysxMVGDBw9Wnz59tGjRIu/zbrdbkyZNUsOGDRUWFqb27dtr7ty53uePHz+uYcOGqVatWgoLC1PTpk01a9YsSYUPWZ83b56aNWumsLAw9ezZU7t27fJpz4QJE9ShQwefZdOmTVODBg28j1etWqW+ffuqZs2aiomJUffu3bV27dpSve7TWbZsmc4//3yFhIQoISFBDz30kLKzs73Pz507V23btlVYWJhq1KihPn36KDU1VZI5DP/8889XRESEYmNj1bVrV+3evbtc24fyQYUcAAAAqGrS0qTIyDJtapcUeybHTkmRIiLKtOmmTZv0ww8/qH79+t5lkyZN0jvvvKNXX31VTZs21fLly/WPf/xDtWrVUvfu3fXYY4/p119/1fz581WzZk3t2LFD6enphe5/7969uuqqqzRmzBiNGjVKq1ev1r333lvqdp48eVLDhw/XSy+9JMMwNHXqVA0YMEDbt29XVFRUmV57Xn/99ZcGDBigESNG6O2339Zvv/2mW2+9VaGhoZowYYL279+v6667TlOmTNGVV16pkydP6rvvvpNhGMrOztbgwYN166236n//+5+ysrK0cuVK2Wy2M24Xyh+BHAAAAIDffPnll4qMjFR2drYyMzNlt9s1ffp0SVJmZqaeffZZffPNN7rgggskSY0aNdL333+vmTNnqnv37tqzZ486duyoTp06SZJPJTu/GTNmqHHjxpo6daokqXnz5tq4cWOph8f36tXL5/Frr72m2NhYLVu2TJdddlmp9lWYV155RYmJiZo+fbpsNptatGihffv26cEHH9Tjjz+u/fv3Kzs7W1dddZX3y4u2bdtKko4dO6akpCRddtllaty4sSSpZcuWZ9wmVAwCuUUs/GOhfjjxg/6W/jfVdtb2d3MAAABQmYWHm5XqMnC73UpOTlZ0dLTs9jKc4RoeXqrVe/bsqRkzZig1NVX/+te/FBQUpCFDhkiSduzYobS0NPXt29dnm6ysLHXs2FGSdMcdd2jIkCFau3atLrnkEg0ePFgXXnhhocfasmWLunTp4rPME/RL4+DBg3r00Ue1dOlSHTp0SDk5OUpLS9OePXtKva+i2nnBBRf4VLW7du2qlJQU/fnnn2rfvr169+6ttm3bql+/frrkkks0dOhQVatWTdWrV9eIESPUr18/9e3bV3369NHVV1+thISEcmkbyhfnkFvE2PljNWXXFO04tsPfTQEAAEBlZ7OZw8b9cSvl0OiIiAg1adJE7du313/+8x/9/PPPevPNNyVJKae+VPjqq6+0fv167+3XX3/1nkfev39/7d69W/fcc4/27dun3r1767777ivzW2e322XkOw/e5XL5PB4+fLjWr1+vF198UT/88IPWr1+vGjVqKCsrq8zHLQ2Hw6FFixZp/vz5atWqlV566SU1b95cO3fulCTNmjVLP/74oy688EK9//77atasmX766aez0jaUDoHcIjzffhkq3SQYAAAAQFVht9v1f//3f3r00UeVnp6uVq1aKSQkRHv27FGTJk18bomJid7tatWqpeHDh+udd97RtGnT9NprrxW6/5YtW2rlypU+y/IH1Vq1aunAgQM+oTz/dcxXrFihcePGacCAAWrdurVCQkJ05MiRM3z1vu388ccffdqwYsUKRUVFqW7dupLM/NC1a1dNnDhR69atU3BwsD755BPv+h07dtTDDz+sH374QW3atNGcOXPKrX0oPwRyi7DpVCAv5ayUAAAAQFXy97//XQ6HQy+//LKioqJ033336Z577tFbb72l33//XWvXrtVLL72kt956S5L0+OOP67PPPtOOHTu0efNmffnll0WeM3377bdr+/btuv/++7V161bNmTNHs2fP9lmnR48eOnz4sKZMmaLff/9dL7/8subPn++zTtOmTfXf//5XW7Zs0c8//6xhw4YpLCys1K81KSnJp/K/fv167d27V6NHj9bevXt155136rffftNnn32mJ554QuPHj5fdbtfPP/+sZ599VqtXr9aePXv08ccf6/Dhw2rZsqV27typhx9+WD/++KN2796thQsXavv27ZxHblEEcougQg4AAABIQUFBGjt2rKZMmaLU1FQ99dRTeuyxxzRp0iS1bNlSl156qb766is1bNhQkhQcHKyHH35Y7dq1U7du3eRwOPTee+8Vuu969erpo48+0qeffqr27dvr1Vdf1bPPPuuzTsuWLfXKK6/o5ZdfVvv27bVy5coCQ+DffPNNHT9+XOeee65uuOEGjRs3TnFxcaV+rUuXLlXHjh19bhMnTtQ555yjefPmaeXKlWrfvr1uv/123XzzzXr00UclSdHR0Vq+fLkGDBigZs2a6dFHH9XUqVPVv39/hYeH67ffftOQIUPUrFkzjRo1SmPGjNFtt91W6vah4tmMKl6STU5OVkxMjJKSkhQdHe3v5hSp6b+basfxHVp6w1J1b9Td380BCuVyuTRv3jwNGDBATqfT380BCqCPwuroo6gIGRkZ2rlzpxo2bKjQ0NAz3t8ZT+oGVDCr9NHifvdKmkP5DbOKU3NfUCEHAAAAgMBAILcIziEHAAAAgMBCILcIbyCnQg4AAAAAAYFAbhHeSd2okAMAAABAQCCQWwQVcgAAAAAILARyi7DbzI/Cbbj93BIAAAAAwNlAILcIhqwDAAAAQGAhkFsEQ9YBAAAAILAQyC3CWyEnkAMAAABAQCCQWwTXIQcAAACsZdeuXbLZbFq/fr2/m3LWLV26VDabTSdOnJAkzZ49W7Gxsafdzmaz6dNPP63QtlUlBHKLoEIOAACAQDNixAjZbDbvrUaNGrr00kv1yy+/+LtplvHRRx+pR48eiomJUWRkpNq1a6cnn3xSx44dO6vtuOaaa7Rt2zbv4wkTJqhDhw4F1tu/f7/69+9foW2ZPXu26tevX6HHOFsI5BZBhRwAAACB6NJLL9X+/fu1f/9+LV68WEFBQbrsssv83axyk5WVVeZtH3nkEV1zzTXq3Lmz5s+fr02bNmnq1KnasGGD/vvf/5ZjK08vLCxMcXFxp10vPj5eISEhZ6FFVQOB3CKokAMAAKC8GIah1KzUst9cZd+2tAWmkJAQxcfHKz4+Xh06dNBDDz2kvXv36vDhw951Nm7cqF69eiksLEw1atTQqFGjlJKS4n2+R48euvvuu332O3jwYI0YMcL7uEGDBnr22Wd10003KSoqSvXq1dNrr73ms83KlSvVsWNHhYaGqlOnTlq3bp3P8zk5Obr55pvVsGFDhYWFqXnz5nrxxRd91hkxYoQGDx6sZ555RnXq1FHz5s315JNPqk2bNgVee4cOHfTYY48V+r6sXLlSzz77rKZOnarnnntOF154oRo0aKC+ffvqo48+0vDhw73rzpgxQ40bN1ZwcLCaN29eIKzbbDa98cYbuvLKKxUeHq6mTZvq888/91ln3rx5atasmcLCwtSzZ0/t2rXL5/m8Q9Znz56tiRMnasOGDd7RDbNnz/YeK++Q9dN9dp736/nnn1dCQoJq1KihMWPGyOVyFfq+lMSePXt0xRVXKDIyUtHR0br66qt18OBB7/MbNmxQz549FRUVpejoaJ133nlavXq1JGn37t0aNGiQqlWrpoiICLVu3Vrz5s0rc1tOJ6jC9oxSoUIOAACA8pLmSlPkpEi/HDvl4RRFBEeUbduUFL3zzjtq0qSJatSoIUlKTU1Vv379dMEFF2jVqlU6dOiQbrnlFo0dO9YbAktq6tSpeuqpp/R///d/mjt3ru644w51795dzZs3V0pKii677DL17dtX77zzjnbu3Km77rrLZ3u32626devqww8/VI0aNfTDDz9o1KhRSkhI0NVXX+1db/HixYqOjtaiRYskSTExMZo4caJWrVqlzp07S5LWrVunX375RR9//HGhbX333XcVGRmp0aNHF/q8Jxx/8sknuuuuuzRt2jT16dNHX375pUaOHKm6deuqZ8+e3vUnTpyoKVOm6LnnntNLL72kYcOGaffu3apevbr27t2rq666SmPGjNGoUaO0evVq3XvvvUW+j9dcc402bdqkBQsW6JtvvvG+xvxK+tktWbJECQkJWrJkiXbs2KFrrrlGHTp00K233lpkG4ridru9YXzZsmXKzs7WmDFjdM0112jp0qWSpGHDhqljx46aMWOGHA6H1q9fL6fTKUkaM2aMsrKytHz5ckVEROjXX39VZGTF/S4RyC2CCjkAAAAC0ZdffukNPKmpqUpISNCXX34pu90czDtnzhxlZGTo7bffVkSEGfSnT5+uQYMGafLkyapdu3aJjzVgwABvwH3wwQf1r3/9S0uWLFHz5s01Z84cud1uvfnmmwoNDVXr1q31559/6o477vBu73Q6NXHiRO/jhg0b6scff9QHH3zgE8gjIiL0xhtvKDg42LusX79+mjVrljeQz5o1S927d1ejRo0Kbev27dvVqFEjb1AsyvPPP68RI0Z4X9f48eP1008/6fnnn/cJ5CNGjNB1110nSXr22Wf173//WytXrtSll17qrbBPnTpVktS8eXNt3LhRkydPLvSYYWFhioyMVFBQkOLj44tsW0k/u2rVqmn69OlyOBxq0aKFBg4cqMWLF5cpkC9evFgbN27Uzp07lZiYKEl6++231bp1a+8XInv27NH999+vFi1aSJKaNm3q3X7Pnj0aMmSI2rZtK0lFfj7lhUBuEVTIAQAAUF7CneFKeTjl9CsWwu12K/lksqKjor2huLTHLo2ePXtqxowZkqTjx4/rlVdeUf/+/bVy5UrVr19fW7ZsUfv27b2BTpK6du0qt9utrVu3liqQt2vXzvuzzWZTfHy8Dh06JEnasmWL2rVrp9DQUO86F1xwQYF9vPzyy/rPf/6jPXv2KD09XVlZWQUmN2vbtq1PGJekW2+9VTfddJNeeOEF2e12zZkzR//617+KbGtJc8GWLVs0atQon2Vdu3YtMJQ+72uPiIhQdHS0z2vv0qWLz/qFvfbSKuln17p1azkcDu86CQkJ2rhxY5mPmZiY6A3jktSqVSvFxsZqy5Yt6ty5s8aPH69bbrlF//3vf9WnTx/9/e9/V+PGjSVJ48aN0x133KGFCxeqT58+GjJkiM97V944h9wiqJADAACgvNhsNkUER5T95iz7tp6/a0sqIiJCTZo0UZMmTdS5c2e98cYbSk1N1euvv17ifdjt9gIBtrBzkPNXm202m9xud4mP89577+m+++7TzTffrIULF2r9+vUaOXJkgYnb8gZQj0GDBikkJESffPKJvvjiC7lcLg0dOrTIYzVr1kx//PHHGZ1LndeZvvaKdLbbNmHCBG3evFkDBw7Ut99+q1atWumTTz6RJN1yyy36448/dMMNN2jjxo3q1KmTXnrppQpri18D+fLlyzVo0CDVqVPntNeru/3222Wz2TRt2rSz1r6ziQo5AAAAYIYxu92u9PR0SVLLli21YcMGpaametdZsWKF7Ha7mjdvLkmqVauW9u/f730+JydHmzZtKtVxW7ZsqV9++UUZGRneZT/99JPPOitWrNCFF16o0aNHq2PHjmrSpIl+//33Eu0/KChIw4cP16xZszRr1ixde+21CgsLK3L966+/XikpKXrllVcKfd5zffCWLVtqxYoVBdrZqlWrErXLs4+VK1f6LMv/2vMLDg5WTk7Oafd7us+uvLVs2VJ79+7V3r17vct+/fVXnThxwuc9adasme655x4tXLhQV111lWbNmuV9LjExUbfffrs+/vhj3XvvvaX6cqi0/BrIU1NT1b59e7388svFrvfJJ5/op59+Up06dc5Sy84+KuQAAAAIRJmZmTpw4IAOHDigLVu26M4771RKSooGDRokyZyAKzQ0VMOHD9emTZu0ZMkS3Xnnnbrhhhu8Q5579eqlr776Sl999ZV+++033XHHHd7AWlLXX3+9bDabbr31Vv3666+aN2+enn/+eZ91mjZtqtWrV+vrr7/Wtm3b9Nhjj2nVqlUlPsYtt9yib7/9VgsWLNBNN91U7LpdunTRAw88oHvvvVcPPPCAfvzxR+3evVuLFy/W3//+d7311luSpPvvv1+zZ8/WjBkztH37dr3wwgv6+OOPdd9995W4Xbfffru2b9+u+++/X1u3btWcOXNOO2FegwYNtHPnTq1fv15HjhxRZmZmgXVK8tmVldvt1vr1631uW7ZsUZ8+fdS2bVsNGzZMa9eu1cqVK3XjjTeqe/fu6tSpk9LT0zV27FgtXbpUu3fv1ooVK7Rq1Sq1bNlSknT33Xfr66+/1s6dO7V27VotWbLE+1xF8Gsg79+/v55++mldeeWVRa7z119/6c4779S777572gkNKjMq5AAAAAhECxYsUEJCghISEtSlSxetWrVKH374oXr06CFJCg8P19dff61jx46pc+fOGjp0qHr37q3p06d793HTTTdp+PDh3uDVqFEjnwnNSiIyMlJffPGFNm7cqI4dO+qRRx4pMKnZbbfdpquuukrXXHONunTpoqNHjxY5C3phmjZtqgsvvFAtWrQocM52YSZPnqw5c+bo559/Vr9+/dS6dWuNHz9e7dq18172bPDgwXrxxRf1/PPPq3Xr1po5c6ZmzZrlff9Kol69evroo4/06aefqn379nr11Vf17LPPFrvNkCFDdOmll6pnz56qVauW/ve//xVYpySfXVmlpKTovPPOU8eOHb23QYMGyWaz6bPPPlO1atXUrVs39enTR40aNdL7778vSXI4HDp69KhuvPFGNWvWTFdffbX69+/vnawvJydHY8aMUcuWLXXppZeqWbNmRY5SKA82wyIJ0Gaz6ZNPPtHgwYO9y9xut/r06aMrrrhCd911lxo0aKC77767wDUG88rMzPT5diY5OVmJiYk6cuSIoqOjK/AVnJnub3XXj3/9qP9d8T8NaT3E380BCuVyubRo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AAAA/CM8XEpJKdstOdmtP/88oeRkd5m2Dw8/s7a3a9fO53FCQkKx1eGS2L59u6677jo1atRI0dHR3grsnj17SrR9SYtmW7ZsUfv27b1hXJK6du0qt9vtM+y7devWcjgc3sd5X+OWLVsUFBSk8847z/t8ixYtzvhc8N9//10ul0tdu3b1LnM6nTr//PO1ZcsWn3XzfgYJCQmSVKbPIDk5Wfv27fM5pmS+J55jjhgxQuvXr1fz5s01btw4LVy40Lve3//+d6Wnp6tRo0a69dZb9cknnyg7O7vU7bAyArlFMKkbAAAAyovNJkVE+Od2pmdiOp3OfK/FdsYV0UGDBunYsWN6/fXX9fPPP+vnn3+WZJ6/XBLNmjWTJP32229n1A6PiniN5Slv+zw5paLad+6552rnzp166qmnlJ6erquvvlpDhw6VJCUmJmrr1q165ZVXFBYWptGjR6tbt24+59tXdgRyi2BSNwAAAKB0goODJUk5OTlFrnP06FFt3bpVjz76qHr37q2WLVvq+PHjpTpOhw4d1KpVK02dOrXQYHrixAlJUsuWLbVhwwalpqZ6n1uxYoXsdruaN29eomO1aNFC2dnZWrNmjXfZ1q1bvccoTEneh8aNGys4OFgrVqzwLnO5XFq1apVatWpVoraVVnR0tOrUqeNzTMl8T/IeMzo6Wtdcc41ef/11vf/++/roo4+857WHhYVp0KBB+ve//62lS5fqxx9/1MaNGyukvf7AOeQWQYUcAAAAKJ24uDiFhYVpwYIFqlu3rkJDQxUTE+OzTrVq1VSjRg299tprSkhI0J49e/TQQw+V6jg2m02zZs1Snz59dPHFF+uRRx5RixYtlJKSoi+++EILFy7UsmXLNGzYMD3xxBMaPny4JkyYoMOHD+vOO+/UDTfc4D1//HSaN2+uSy+9VLfddptmzJihoKAg3X333QoLCzuj9yEiIkJ33HGH7r//flWvXl316tXTlClTlJaWpptvvrlU70dhdu7cWeA66E2bNtX999+vJ554wjsr/axZs7R+/XrvzPEvvPCCEhIS1LFjR9ntdn344YeKj49XbGysZs+erZycHHXp0kXh4eF65513FBYW5nOeeWVHhdwiqJADAAAApRMUFKR///vfmjlzpurUqaMrrriiwDp2u13vvfee1qxZozZt2uiee+7Rc889V+pjnX/++Vq9erWa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ACqapQP5hRdeqNdee03btm1Ts2bNtGHDBn3//fd64YUXitwmMzNTmZmZ3sfJycmSJJfLJZfLVeFtLqvs7Gzvz1muLMntx8YARfD8Dln5dwmBjT4Kq6OPojKgn8LqKkMfLWnbbIaFT8h2u936v//7P02ZMkUOh0M5OTl65pln9PDDDxe5zYQJEzRx4sQCy+fMmaPw8PCKbO4ZSc1J1bCNwyRJH7b7UE67088tAgAAAACURVpamq6//nolJSUpOjq6yPUsHcjfe+893X///XruuefUunVrrV+/XnfffbdeeOEFDR8+vNBtCquQJyYm6siRI8W+Ef52NOWoEv6dIElKfiBZoUGhfm4RUJDL5dKiRYvUt29fOZ18aQTroY/C6uijqAzop7C6ytBHk5OTVbNmzdMGcksPWb///vv10EMP6dprr5UktW3bVrt379akSZOKDOQhISEKCQkpsNzpdFr2w5KkYGew9+egoCBLtxWw+u8TQB+F1dFHURnQT2F1Vu6jJW2XpS97lpaWJrvdt4kOh0Nud9U7wZrLngEAAABAYClThXzv3r2y2WyqW7euJGnlypWaM2eOWrVqpVGjRpVb4wYNGqRnnnlG9erVU+vWrbVu3Tq98MILuummm8rtGFaRd5Z1C59FAAAAAAAoJ2WqkF9//fVasmSJJOnAgQPq27evVq5cqUceeURPPvlkuTXupZde0tChQzV69Gi1bNlS9913n2677TY99dRT5XYMq6BCDgAAAACBpUyBfNOmTTr//PMlSR988IHatGmjH374Qe+++65mz55dbo2LiorStGnTtHv3bqWnp+v333/X008/reDg4NNvXMlQIQcAAACAwFKmQO5yubwTp33zzTe6/PLLJUktWrTQ/v37y691AYQKOQAAAAAEljIF8tatW+vVV1/Vd999p0WLFunSSy+VJO3bt081atQo1wYGCirkAAAAABBYyhTIJ0+erJkzZ6pHjx667rrr1L59e0nS559/7h3KjtKhQg4AAAAAgaVMs6z36NFDR44cUXJysqpVq+ZdPmrUKIWHh5db4wIJFXIAAAAACCxlqpCnp6crMzPTG8Z3796tadOmaevWrYqLiyvXBgYKKuQAAAAAEFjKFMivuOIKvf3225KkEydOqEuXLpo6daoGDx6sGTNmlGsDA4XdlvtRUCEHAAAAgKqvTIF87dq1uvji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",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d6489098",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:35:28.700210Z",
     "iopub.status.busy": "2025-03-02T19:35:28.699814Z",
     "iopub.status.idle": "2025-03-02T19:35:28.703823Z",
     "shell.execute_reply": "2025-03-02T19:35:28.703019Z"
    },
    "papermill": {
     "duration": 0.036188,
     "end_time": "2025-03-02T19:35:28.705377",
     "exception": false,
     "start_time": "2025-03-02T19:35:28.669189",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b993cb4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:35:28.758257Z",
     "iopub.status.busy": "2025-03-02T19:35:28.757919Z",
     "iopub.status.idle": "2025-03-02T19:35:29.871362Z",
     "shell.execute_reply": "2025-03-02T19:35:29.870445Z"
    },
    "papermill": {
     "duration": 1.142036,
     "end_time": "2025-03-02T19:35:29.873168",
     "exception": false,
     "start_time": "2025-03-02T19:35:28.731132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 290.509371,
   "end_time": "2025-03-02T19:35:31.321161",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-02T19:30:40.811790",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
