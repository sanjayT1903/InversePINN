{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c7bb001",
   "metadata": {
    "papermill": {
     "duration": 0.004467,
     "end_time": "2025-02-23T17:39:09.099676",
     "exception": false,
     "start_time": "2025-02-23T17:39:09.095209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "42c15810",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:39:09.109050Z",
     "iopub.status.busy": "2025-02-23T17:39:09.108344Z",
     "iopub.status.idle": "2025-02-23T17:39:12.969257Z",
     "shell.execute_reply": "2025-02-23T17:39:12.968294Z"
    },
    "papermill": {
     "duration": 3.868161,
     "end_time": "2025-02-23T17:39:12.971555",
     "exception": false,
     "start_time": "2025-02-23T17:39:09.103394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "13616c37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:39:12.988012Z",
     "iopub.status.busy": "2025-02-23T17:39:12.987609Z",
     "iopub.status.idle": "2025-02-23T17:39:13.009118Z",
     "shell.execute_reply": "2025-02-23T17:39:13.008274Z"
    },
    "papermill": {
     "duration": 0.031999,
     "end_time": "2025-02-23T17:39:13.011642",
     "exception": false,
     "start_time": "2025-02-23T17:39:12.979643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "803f1a1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:39:13.024187Z",
     "iopub.status.busy": "2025-02-23T17:39:13.023928Z",
     "iopub.status.idle": "2025-02-23T17:39:13.027937Z",
     "shell.execute_reply": "2025-02-23T17:39:13.027161Z"
    },
    "papermill": {
     "duration": 0.013447,
     "end_time": "2025-02-23T17:39:13.029761",
     "exception": false,
     "start_time": "2025-02-23T17:39:13.016314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bb775709",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:39:13.042080Z",
     "iopub.status.busy": "2025-02-23T17:39:13.041646Z",
     "iopub.status.idle": "2025-02-23T17:39:13.110522Z",
     "shell.execute_reply": "2025-02-23T17:39:13.109490Z"
    },
    "papermill": {
     "duration": 0.077893,
     "end_time": "2025-02-23T17:39:13.112390",
     "exception": false,
     "start_time": "2025-02-23T17:39:13.034497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c73bd065",
   "metadata": {
    "papermill": {
     "duration": 0.003644,
     "end_time": "2025-02-23T17:39:13.119897",
     "exception": false,
     "start_time": "2025-02-23T17:39:13.116253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "68e413f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:39:13.129970Z",
     "iopub.status.busy": "2025-02-23T17:39:13.129647Z",
     "iopub.status.idle": "2025-02-23T17:39:13.361163Z",
     "shell.execute_reply": "2025-02-23T17:39:13.360381Z"
    },
    "papermill": {
     "duration": 0.240013,
     "end_time": "2025-02-23T17:39:13.363557",
     "exception": false,
     "start_time": "2025-02-23T17:39:13.123544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "691534ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:39:13.375530Z",
     "iopub.status.busy": "2025-02-23T17:39:13.374734Z",
     "iopub.status.idle": "2025-02-23T17:39:14.639195Z",
     "shell.execute_reply": "2025-02-23T17:39:14.638273Z"
    },
    "papermill": {
     "duration": 1.271856,
     "end_time": "2025-02-23T17:39:14.641313",
     "exception": false,
     "start_time": "2025-02-23T17:39:13.369457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4f9ba0ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:39:14.650256Z",
     "iopub.status.busy": "2025-02-23T17:39:14.649854Z",
     "iopub.status.idle": "2025-02-23T17:39:14.653555Z",
     "shell.execute_reply": "2025-02-23T17:39:14.652751Z"
    },
    "papermill": {
     "duration": 0.01001,
     "end_time": "2025-02-23T17:39:14.655256",
     "exception": false,
     "start_time": "2025-02-23T17:39:14.645246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ca5374b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:39:14.664193Z",
     "iopub.status.busy": "2025-02-23T17:39:14.663757Z",
     "iopub.status.idle": "2025-02-23T17:48:36.836146Z",
     "shell.execute_reply": "2025-02-23T17:48:36.835277Z"
    },
    "papermill": {
     "duration": 562.179894,
     "end_time": "2025-02-23T17:48:36.838832",
     "exception": false,
     "start_time": "2025-02-23T17:39:14.658938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1000 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1000/1000 [09:22<00:00,  1.78it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1000)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2)  + torch.mean((u_bc_x_min)**2) + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 2*loss_res + 3*loss_ic + 2*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ea0c53e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:48:36.934156Z",
     "iopub.status.busy": "2025-02-23T17:48:36.933403Z",
     "iopub.status.idle": "2025-02-23T17:48:36.953355Z",
     "shell.execute_reply": "2025-02-23T17:48:36.952424Z"
    },
    "papermill": {
     "duration": 0.06888,
     "end_time": "2025-02-23T17:48:36.955148",
     "exception": false,
     "start_time": "2025-02-23T17:48:36.886268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.117179, Loss_IC: 0.322331, loss_bc: 0.132523\n",
      "Train Loss: 0.572032\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37038d12",
   "metadata": {
    "papermill": {
     "duration": 0.092361,
     "end_time": "2025-02-23T17:48:37.093095",
     "exception": false,
     "start_time": "2025-02-23T17:48:37.000734",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3a95a6d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:48:37.187365Z",
     "iopub.status.busy": "2025-02-23T17:48:37.186541Z",
     "iopub.status.idle": "2025-02-23T17:48:37.220654Z",
     "shell.execute_reply": "2025-02-23T17:48:37.219668Z"
    },
    "papermill": {
     "duration": 0.082917,
     "end_time": "2025-02-23T17:48:37.222544",
     "exception": false,
     "start_time": "2025-02-23T17:48:37.139627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/4090693566.py:4: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n"
     ]
    }
   ],
   "source": [
    "\n",
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# Load saved parameters\n",
    "model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# Move model to the correct device\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8e4d235f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T17:48:37.316695Z",
     "iopub.status.busy": "2025-02-23T17:48:37.316348Z",
     "iopub.status.idle": "2025-02-23T19:25:29.579324Z",
     "shell.execute_reply": "2025-02-23T19:25:29.578258Z"
    },
    "papermill": {
     "duration": 5812.312322,
     "end_time": "2025-02-23T19:25:29.581328",
     "exception": false,
     "start_time": "2025-02-23T17:48:37.269006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 750/750 [1:36:52<00:00,  7.75s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(750)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2)  + torch.mean((u_bc_x_min)**2) + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 100*loss_res + 3*loss_ic + 2*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3886c4e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T19:25:29.737149Z",
     "iopub.status.busy": "2025-02-23T19:25:29.736497Z",
     "iopub.status.idle": "2025-02-23T19:25:29.753866Z",
     "shell.execute_reply": "2025-02-23T19:25:29.752942Z"
    },
    "papermill": {
     "duration": 0.096598,
     "end_time": "2025-02-23T19:25:29.755549",
     "exception": false,
     "start_time": "2025-02-23T19:25:29.658951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.117183, Loss_IC: 0.322318, loss_bc: 0.132516\n",
      "Train Loss: 0.572017\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9d91bdb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T19:25:29.912158Z",
     "iopub.status.busy": "2025-02-23T19:25:29.911862Z",
     "iopub.status.idle": "2025-02-23T19:25:29.924986Z",
     "shell.execute_reply": "2025-02-23T19:25:29.924067Z"
    },
    "papermill": {
     "duration": 0.091425,
     "end_time": "2025-02-23T19:25:29.926709",
     "exception": false,
     "start_time": "2025-02-23T19:25:29.835284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.001001, Loss_IC: 0.157747, loss_bc: 0.120077\n",
      "Train Loss: 0.278826\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d81306f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T19:25:30.080329Z",
     "iopub.status.busy": "2025-02-23T19:25:30.079808Z",
     "iopub.status.idle": "2025-02-23T19:25:30.407086Z",
     "shell.execute_reply": "2025-02-23T19:25:30.406245Z"
    },
    "papermill": {
     "duration": 0.406074,
     "end_time": "2025-02-23T19:25:30.408907",
     "exception": false,
     "start_time": "2025-02-23T19:25:30.002833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "32e9c5ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T19:25:30.563864Z",
     "iopub.status.busy": "2025-02-23T19:25:30.563611Z",
     "iopub.status.idle": "2025-02-23T19:25:30.567074Z",
     "shell.execute_reply": "2025-02-23T19:25:30.566285Z"
    },
    "papermill": {
     "duration": 0.082054,
     "end_time": "2025-02-23T19:25:30.568565",
     "exception": false,
     "start_time": "2025-02-23T19:25:30.486511",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "29e2ef48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T19:25:30.722239Z",
     "iopub.status.busy": "2025-02-23T19:25:30.721962Z",
     "iopub.status.idle": "2025-02-23T19:25:31.956152Z",
     "shell.execute_reply": "2025-02-23T19:25:31.955261Z"
    },
    "papermill": {
     "duration": 1.313419,
     "end_time": "2025-02-23T19:25:31.958071",
     "exception": false,
     "start_time": "2025-02-23T19:25:30.644652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAEiCAYAAADwEwVaAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAC8Y0lEQVR4nO29e7xeRXU+/sze5xIgJKCQcDGIgIIiSgWJgApqFCsitF8lQgsBq6KAF9KqpF4CXohaRWzlUqmCVZBbQVH4oRChiKAoiqXKRUkURBJNKQkNkJyzZ/3+mFkzay57v+97cs55T5K9Pp/3nL1n1syefXvWdWYrIiK01FJLLbW02VHR7wG01FJLLbXUH2oFQEsttdTSZkqtAGippZZa2kypFQAttdRSS5sptQKgpZZaamkzpVYAtNRSSy1tptQKgJZaaqmlzZRaAdBSSy21tJlSKwBaaqmlljZT2iwFwMUXXwylFH73u99N6T4lnXHGGVBKjXu/d955J4aGhvD73/9+3PvuB91www2YPn06/vznP/d7KC1tpKSUwhlnnNHvYUwK9V0AnHfeeVBKYe7cuf0eSld01lln4Vvf+la/hzFu9OEPfxjHHHMMnv3sZ/d7KD3Reeedh4svvjgpf/3rX4899tgDS5YsGfdj/vSnP8Wpp56KvffeG1tttRV22WUXHH300XjggQcS3kMPPRRKKSilUBQFZsyYgT333BPHHXccbrzxxq6PecIJJ2D69Om19UopnHrqqWM6n26p7lrXEZ937veud71r4gbaA11//fWbDcg30UC/B3DJJZdg1113xZ133onf/va32GOPPfo9pEY666yz8OY3vxlHHXVUUH7cccfhrW99K4aHh/szsDHQ3XffjZtuugm33357v4fSM5133nnYbrvtcMIJJyR1J510Ev7hH/4BZ555JrbeeutxO+ZnPvMZ/OhHP8Jb3vIWvOhFL8KKFSvwpS99CS95yUvw4x//GC984QsD/mc961lOEK1duxa//e1vcfXVV+Mb3/gGjj76aHzjG9/A4ODguI1voqjpWtfRa1/7Whx//PFJ+fOe97xxHNnY6frrr8e5556bFQJPPfUUBgb6Do2TQn09y+XLl+P222/H1VdfjZNOOgmXXHIJFi9e3M8hjZnKskRZlv0eRk900UUXYZdddsHLXvayfg9lXOn//b//h/e85z248sor8ba3vW3c+l24cCEuvfRSDA0NubL58+djn332wac//Wl84xvfCPhnzpyJv/3bvw3KPv3pT+O9730vzjvvPOy66674zGc+M27jm0r0vOc9Lzn3jYWmTZvW7yFMGvXVBXTJJZdg2223xeGHH443v/nNuOSSSxKe3/3ud1BK4XOf+xy+/OUvY/fdd8fw8DBe+tKX4qc//WnA+1//9V844YQTsNtuu2HatGnYYYcd8La3vQ3/8z//0ziOBQsWYLvttsPIyEhS97rXvQ577rknAGParl27Fl/72tecSctaUV0M4P/7//4/HHLIIdh6660xY8YMvPSlL8Wll17q6n/4wx/iLW95C3bZZRcMDw9jzpw5OO200/DUU091cwkT2nXXXbOa2qGHHopDDz00KPvWt76FV7/61UFs4Qc/+AGKosDHPvaxgPfSSy+FUgrnn39+T+NZtmwZlFL4whe+kNTdfvvtUErhm9/8Zk997rrrrvjVr36F//zP/3T3QZ7brFmz8KIXvQjf/va3e+q3Ex100EEB+APAc5/7XOy999649957u+qjLEv88z//M17wghfgS1/6ElavXj2uYwSAdevWYfHixdhjjz3cM/XBD34Q69atC/guuugivPrVr8asWbMwPDyMF7zgBcn97XStN5T4nd5iiy1wwAEH4Ic//GHyrNa9W7fccguUUrjllltcWTfv0wknnIBzzz0XQOiuYsrFAH7xi1/gL//yLzFjxgxMnz4dr3nNa/DjH/844OFx/uhHP8LChQux/fbbY6uttsJf/dVfTdmYVF8tgEsuuQR//dd/jaGhIRxzzDE4//zz8dOf/hQvfelLE95LL70UTzzxBE466SQopfDZz34Wf/3Xf41ly5Y5M/rGG2/EsmXLcOKJJ2KHHXbAr371K3z5y1/Gr371K/z4xz+uDaIed9xx+Pd//3d873vfwxvf+EZXvmLFCvzgBz9wVsnXv/51vP3tb8cBBxyAd77znQCA3Xffvfb8Lr74YrztbW/D3nvvjUWLFmGbbbbBL37xC9xwww049thjAQBXXnklnnzySbz73e/GM5/5TNx55534l3/5F/zhD3/AlVdeObYL2wU98sgjeOihh/CSl7wkKH/1q1+Nk08+GUuWLMFRRx2Fl7zkJXj00Ufxnve8B/PmzevZh7vbbrvh4IMPxiWXXILTTjstqLvkkkuw9dZb48gjj+ypz3POOQfvec97MH36dHz4wx8GAMyePTvg2W+//SYlVkNEWLlyJfbee++u25RliWOOOQYf/ehHcdttt+Hwww/v2GbVqlVd9a21xpve9CbcdttteOc734nnP//5uOeee/CFL3wBDzzwQHBNzj//fOy9995405vehIGBAXznO9/BySefDK01TjnlFADdXescPf3009kxz5gxwwnRr3zlKzjppJNw0EEH4f3vfz+WLVuGN73pTXjGM56BOXPmdHW+MXXzPp100kn44x//iBtvvBFf//rXO/b5q1/9Cq94xSswY8YMfPCDH8Tg4CD+9V//FYceeij+8z//M4lfvuc978G2226LxYsX43e/+x3OOeccnHrqqbj88svHdE4TStQn+tnPfkYA6MYbbyQiIq01PetZz6L3ve99Ad/y5csJAD3zmc+kxx57zJV/+9vfJgD0ne98x5U9+eSTyXG++c1vEgC69dZbXdlFF11EAGj58uVERFRVFT3rWc+i+fPnB23PPvtsUkrRsmXLXNlWW21FCxYsSI4T9/n444/T1ltvTXPnzqWnnnoq4NVaN455yZIlpJSi3//+965s8eLF1M3tevazn50d3yGHHEKHHHKI27/pppuS68e0du1a2mOPPWjvvfemp59+mg4//HCaMWNGMJ5e6F//9V8JAN17772ubP369bTddttlx9oN7b333sH5xHTWWWcRAFq5cuWY+u+Wvv71rxMA+spXvhKUH3LIIbT33nvXtrvmmmsIAH3xi19s7H/BggUEoPF3yimnBOMpioJ++MMfBv1ccMEFBIB+9KMfubLcs3fYYYfRbrvtFpR1utYxNY31m9/8JhGZ+z9r1izad999ad26da7tl7/8ZQIQHC9+t5huvvlmAkA333xz4znl3qdTTjml9n0CQIsXL3b7Rx11FA0NDdGDDz7oyv74xz/S1ltvTa985SuTcc6bNy94x0877TQqy5Ief/zx/AXrI/XNBXTJJZdg9uzZeNWrXgXAmF3z58/HZZddhqqqEv758+dj2223dfuveMUrABgXA9MWW2zhtlkDYf/2z3/+89qxFEWBv/mbv8G1116LJ554IhjjQQcdhOc85zk9n9+NN96IJ554AqeffnriU5SWiBzz2rVrsWrVKhx00EEgIvziF7/o+bjdErvF5DVl2nLLLXHxxRfj3nvvxStf+Upcd911+MIXvoBddtllTMc6+uijMW3atMDF973vfQ+rVq2aMD8xn1e3mvNY6L777sMpp5yCAw88EAsWLOipLWf2yOetjqZNm4Ybb7wx+4vpyiuvxPOf/3zstddeWLVqlfu9+tWvBgDcfPPNjlc+e6tXr8aqVatwyCGHYNmyZRvsmjryyCOz4+X3/Wc/+xn+9Kc/4V3velfgVjvhhBMwc+bMMR93vN+nqqrw/e9/H0cddRR22203V77jjjvi2GOPxW233YY1a9YEbd75zncG7/grXvEKVFU1JVOt++ICqqoKl112GV71qldh+fLlrnzu3Ln4/Oc/j6VLl+J1r3td0CYGH37B//d//9eVPfbYYzjzzDNx2WWX4U9/+lPA3+mBPv744/GZz3wG11xzDY4//njcf//9uOuuu3DBBReM6RwffPBBAEgyQ2J66KGH8LGPfQzXXnttcC7djHk8iGo+CHfwwQfj3e9+N84991wcdthhGxRM3WabbXDEEUfg0ksvxSc+8QkARrjuvPPODpjGm/i8muZOPPXUU8k13mGHHbrqf8WKFTj88MMxc+ZMXHXVVT0nAPzf//0fAHSVpVSWJebNm9dVv7/5zW9w7733Yvvtt8/Wy/fiRz/6ERYvXow77rgDTz75ZMC3evXqDQLiZz3rWY1jZjB87nOfG5QPDg4GQNsrjff79Oc//xlPPvmkiwNKev7znw+tNR5++OHABdgNVk0V6osA+MEPfoBHH30Ul112GS677LKk/pJLLkkEQN0LJgHs6KOPxu23344PfOAD2HfffTF9+nRorfH6178eWuvGMb3gBS/Afvvth2984xs4/vjj8Y1vfANDQ0M4+uijx3CG3VFVVXjta1+Lxx57DB/60Iew1157YauttsIjjzyCE044oeOYc1QHeFVVBdfwmc98JoD6h3LdunUuuPbggw/iySefxJZbbtnzeJiOP/54XHnllbj99tuxzz774Nprr8XJJ5+MopgYI5TPa7vttqvlufzyy3HiiScGZXUCUdLq1avxl3/5l3j88cfxwx/+EDvttFPP4/vv//5vABj3tGetNfbZZx+cffbZ2Xr2rT/44IN4zWteg7322gtnn3025syZg6GhIVx//fX4whe+MKZnb6Ko6ZmO98f7fRoLdYNVU4X6IgAuueQSzJo1y0XiJV199dW45pprcMEFFwTmXCf63//9XyxduhRnnnlmkMHym9/8pus+jj/+eCxcuBCPPvooLr30Uhx++OGJi6Tb2bgcHP7v//7v2pf8nnvuwQMPPICvfe1rQc50LxOFYtp2223x+OOPJ+W///3vA81qr732AoDAApO0ePFi3Hvvvfjc5z6HD33oQzj99NPxz//8z2Me1+tf/3psv/32uOSSSzB37lw8+eSTOO6448bcX6f7sHz5cmy33Xa1mjAAHHbYYT1f66effhpHHHEEHnjgAdx00014wQte0FN7wADVpZdeii233BIvf/nLe27fRLvvvjt++ctf4jWveU3jNfrOd76DdevW4dprrw00VukiYpqIGeg88fA3v/lNYAWOjIxg+fLlePGLX+zK+B2Mn+vYpdLL+9TtOW2//fbYcsstcf/99yd19913H4qiGHPAeirQpMcAnnrqKVx99dV44xvfiDe/+c3J79RTT8UTTzyBa6+9tqd+WerGUvacc87puo9jjjkGSim8733vw7Jly7L+6a222ioLsDG97nWvw9Zbb40lS5bg6aefDup4jLkxExG++MUvdj3mmHbffXf8+Mc/xvr1613Zd7/7XTz88MMB384774w5c+bgZz/7WdLHT37yE3zuc5/D+9//fvz93/89PvCBD+BLX/oS/vM//3PM4xoYGMAxxxyDK664AhdffDH22WcfvOhFLxpzf53uw1133YUDDzywsY8dd9wR8+bNC35NVFUV5s+fjzvuuANXXnllx/7r+njve9+Le++9F+9973sxY8aMnvtooqOPPhqPPPIILrzwwqTuqaeewtq1awHkn73Vq1fjoosuStp1+8z3Qvvvvz+23357XHDBBcGzevHFFyfHYmXq1ltvdWVVVeHLX/5ywNfL+7TVVlsBSIVKTGVZ4nWvex2+/e1vB2moK1euxKWXXoqXv/zl434PJ5Mm3QLgQOub3vSmbP3LXvYypynOnz+/635nzJiBV77ylfjsZz+LkZER7Lzzzvj+979fq+HmaPvtt8frX/96XHnlldhmm22y6Xn77bcfbrrpJpx99tnYaaed8JznPCe7jMWMGTPwhS98AW9/+9vx0pe+FMceeyy23XZb/PKXv8STTz6Jr33ta9hrr72w++674x/+4R/wyCOPYMaMGfiP//iPDfIVvv3tb8dVV12F17/+9Tj66KPx4IMP4hvf+EY2XfXII4/ENddcAyJyGtHTTz+NBQsW4LnPfS4+9alPAQDOPPNMfOc738GJJ56Ie+65x708Z5xxBs4880zcfPPNXeWGH3/88fjnf/5n3HzzzbUToJRSOOSQQ4Lc7hztt99+OP/88/HJT34Se+yxB2bNmuU0yT/96U/4r//6L5fKOF7093//97j22mtxxBFH4LHHHksmfsUKw+rVqx3Pk08+6WYCP/jgg3jrW9/q4iHjSccddxyuuOIKvOtd78LNN9+Mgw8+GFVV4b777sMVV1yB733ve9h///3xute9DkNDQzjiiCNw0kkn4f/+7/9w4YUXYtasWXj00UeDPpuudR098MADyfUBTArpa1/7WgwODuKTn/wkTjrpJLz61a/G/PnzsXz5clx00UVJDGDvvffGy172MixatAiPPfYYnvGMZ+Cyyy7D6OhowNfL+7TffvsBAN773vfisMMOQ1mWeOtb35o9l09+8pO48cYb8fKXvxwnn3wyBgYG8K//+q9Yt24dPvvZzzZehylPk512dMQRR9C0adNo7dq1tTwnnHACDQ4O0qpVq1wa6D/90z8lfIjStf7whz/QX/3VX9E222xDM2fOpLe85S30xz/+MeGrSysjIrriiisIAL3zne/Mju2+++6jV77ylbTFFlsQAJfGWNfntddeSwcddBBtscUWNGPGDDrggANcKhwR0a9//WuaN28eTZ8+nbbbbjt6xzveQb/85S8JAF100UWOr9s0UCKiz3/+87TzzjvT8PAwHXzwwfSzn/0sSQMlIvr5z39OAIKUQU5Z+8lPfhLw/uxnP6OBgQF697vf7cr+/u//npRSQXpnJ9p7772pKAr6wx/+kNQ98cQTBIDe+ta3duxnxYoVdPjhh9PWW2+dpA2ef/75tOWWW9KaNWu6Hlc3dMghhzSmODbxTp8+nZ773OfS3/7t39L3v//9ro+5YMEC2mqrrWrrEaWBEpkUy8985jO099570/DwMG277ba033770ZlnnkmrV692fNdeey296EUvomnTptGuu+5Kn/nMZ+irX/1q8hw3Xeu6MdX94rbnnXcePec5z6Hh4WHaf//96dZbb80+qw8++CDNmzePhoeHafbs2fSP//iPdOONNyZpoN2+T6Ojo/Se97yHtt9+e1JKBfcvxgsi864cdthhNH36dNpyyy3pVa96Fd1+++0BD2PAT3/606A8l646VUgR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MDk4WEd9FQBDQ0PYb7/9sHTpUhx11FEATPBj6dKlOPXUU7NtDjzwQCxduhTvf//7XdmNN96IAw88MMtfZ3bNnDlzo3+gmWbMmNGeyxSk9lymJhUbkOE2bdo0TJs2bRxHMzk4WEvUZ7rssstoeHiYLr74Yvr1r39N73znO2mbbbahFStWEBHRcccdR6effrrj/9GPfkQDAwP0uc99ju69915avHgxDQ4O0j333NPV8VavXk0AaPXq1RNyPpNJ7blMTWrPZWrSVD6XycZBpr4LACKif/mXf6FddtmFhoaG6IADDqAf//jHru6QQw6hBQsWBPxXXHEFPe95z6OhoSHae++96brrruv6WFP5IeiV2nOZmtSey9SkqX4uk4mDTFNCAEwmPf3007R48WJ6+umn+z2UDab2XKYmtecyNWlTOpfxor5PBGuppZZaaqk/NCXWAmqppZZaamnyqRUALbXUUkubKbUCoKWWWmppM6VNUgBMmeWlx4F6OZcLL7wQr3jFK7Dtttti2223xbx58zqe+2RSr/eF6bLLLoNSyuVITwXq9Vwef/xxnHLKKdhxxx0xPDyM5z3veVPmOev1XM455xzsueee2GKLLTBnzhycdtppePrppydptPV066234ogjjsBOO+0EpVRX6+LccssteMlLXoLh4WHsscceuPjiiyd8nFOK+h2FHm+67LLLaGhoiL761a/Sr371K3rHO95B22yzDa1cuTLL/6Mf/YjKsqTPfvaz9Otf/5o+8pGPjCmfdiKo13M59thj6dxzz6Vf/OIXdO+999IJJ5xAM2fOpD/84Q+TPPKUej0XpuXLl9POO+9Mr3jFK+jII4+cnMF2oF7PZd26dbT//vvTG97wBrrtttto+fLldMstt9Ddd989ySNPqddzueSSS2h4eJguueQSWr58OX3ve9+jHXfckU477bRJHnlK119/PX34wx+mq6++mgDQNddc08i/bNky2nLLLWnhwoX061//mv7lX/6FyrKkG264YXIGPAVokxMABxxwAJ1yyiluv6oq2mmnnWjJkiVZ/qOPPpoOP/zwoGzu3Ll00kknTeg4u6FezyWm0dFR2nrrrelrX/vaRA2xaxrLuYyOjtJBBx1E//Zv/0YLFiyYMgKg13M5//zzabfddqP169dP1hC7pl7P5ZRTTqFXv/rVQdnChQvp4IMPntBx9krdCIAPfvCDtPfeewdl8+fPp8MOO2wCRza1aJNyAfGyqvPmzXNl3SyrKvkBs6xqHf9k0VjOJaYnn3wSIyMjY177ZLxorOfy8Y9/HLNmzcLf/d3fTcYwu6KxnMu1116LAw88EKeccgpmz56NF77whTjrrLNQ5b6/PIk0lnM56KCDcNdddzk30bJly3D99dfjDW94w6SMeTxpqr77k0mb1Gqg/VxWdbxpLOcS04c+9CHstNNOyUM+2TSWc7ntttvwla98BXffffckjLB7Gsu5LFu2DD/4wQ/wN3/zN7j++uvx29/+FieffDJGRkawePHiyRh2lsZyLsceeyxWrVqFl7/85SAijI6O4l3vehf+8R//cTKGPK5U9+6vWbMGTz31FLbYYos+jWzyaJOyAFry9OlPfxqXXXYZrrnmmnFfvGqi6YknnsBxxx2HCy+8ENttt12/h7PBpLXGrFmz8OUvfxn77bcf5s+fjw9/+MM9fblpqtAtt9yCs846C+eddx5+/vOf4+qrr8Z1112HT3ziE/0eWktjoE3KAujnsqrjTWM5F6bPfe5z+PSnP42bbroJL3rRiyZymF1Rr+fy4IMP4ne/+x2OOOIIV6bt924HBgZw//33Y/fdd5/YQdfQWO7LjjvuiMHBQZRl6cqe//znY8WKFVi/fj2GhoYmdMx1NJZz+ehHP4rjjjsOb3/72wEA++yzD9auXYt3vvOd+PCHP7xBK21ONtW9+zNmzNgstH9gE7MA5LKqTLysat0yqbysqqQxLas6zjSWcwGAz372s/jEJz6BG264Afvvv/9kDLUj9Xoue+21F+655x7cfffd7vemN70Jr3rVq3D33XcnH9qYTBrLfTn44IPx29/+1gkxAHjggQew44479g38gbGdy5NPPpmAPAs22shWlZmq7/6kUr+j0ONN/VpWdSKo13P59Kc/TUNDQ3TVVVfRo48+6n5PPPFEv07BUa/nEtNUygLq9Vweeugh2nrrrenUU0+l+++/n7773e/SrFmz6JOf/GS/TsFRr+eyePFi2nrrremb3/wmLVu2jL7//e/T7rvvTkcffXS/TsHRE088Qb/4xS/oF7/4BQGgs88+m37xi1/Q73//eyIiOv300+m4445z/JwG+oEPfIDuvfdeOvfcc9s00E2B+rGs6kRRL+fy7Gc/m2C+phv8Fi9ePPkDz1Cv90XSVBIARL2fy+23305z586l4eFh2m233ehTn/oUjY6OTvKo89TLuYyMjNAZZ5xBu+++O02bNo3mzJlDJ598Mv3v//7v5A88optvvjn7/PP4FyxYQIccckjSZt9996WhoSHabbfd6KKLLpr0cfeT2tVAW2qppZY2U9qkYgAttdRSSy11T60AaKmlllraTKkVAC211FJLmym1AqClllpqaTOlVgC01FJLLW2m1AqAllpqqaXNlFoB0FJLLbW0mVIrAFpqqaWWNlNqBUBLLbXU0mZKrQBoqaWWWtpMqRUALbXUUkubKbUCoKVNnv785z9jhx12wFlnneXKbr/9dgwNDSXLAbfU0uZE7WJwLW0WdP311+Ooo47C7bffjj333BP77rsvjjzySJx99tn9HlpLLfWNWgHQ0mZDp5xyCm666Sbsv//+uOeee/DTn/4Uw8PD/R5WSy31jVoB0NJmQ0899RRe+MIX4uGHH8Zdd92FffbZp99DaqmlvlIbA2hps6EHH3wQf/zjH6G1xu9+97t+D6ellvpOrQXQ0mZB69evxwEHHIB9990Xe+65J8455xzcc889mDVrVr+H1lJLfaNWALS0WdAHPvABXHXVVfjlL3+J6dOn45BDDsHMmTPx3e9+t99Da6mlvlHrAmppk6dbbrkF55xzDr7+9a9jxowZKIoCX//61/HDH/4Q559/fr+H11JLfaPWAmippZZa2kyptQBaaqmlljZTagVASy211NJmSq0AaKmlllraTKkVAC211FJLmym1AqClllpqaTOlVgC01FJLLW2m1AqAllpqqaXNlFoB0FJLLbW0mVIrAFpqqaWWNlNqBUBLLbXU0mZKrQBoqaWWWtpMqRUALbXUUkubKf3/uzFcijVkeF8AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Predicted u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Analytical u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6386.782498,
   "end_time": "2025-02-23T19:25:33.361133",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-23T17:39:06.578635",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
