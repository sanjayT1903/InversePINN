{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2de0bf5",
   "metadata": {
    "papermill": {
     "duration": 0.004483,
     "end_time": "2025-02-23T23:59:34.801934",
     "exception": false,
     "start_time": "2025-02-23T23:59:34.797451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0d9fa460",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T23:59:34.811810Z",
     "iopub.status.busy": "2025-02-23T23:59:34.810944Z",
     "iopub.status.idle": "2025-02-23T23:59:38.464957Z",
     "shell.execute_reply": "2025-02-23T23:59:38.463376Z"
    },
    "papermill": {
     "duration": 3.662305,
     "end_time": "2025-02-23T23:59:38.468128",
     "exception": false,
     "start_time": "2025-02-23T23:59:34.805823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "56933f4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T23:59:38.479308Z",
     "iopub.status.busy": "2025-02-23T23:59:38.478566Z",
     "iopub.status.idle": "2025-02-23T23:59:38.494806Z",
     "shell.execute_reply": "2025-02-23T23:59:38.494122Z"
    },
    "papermill": {
     "duration": 0.023107,
     "end_time": "2025-02-23T23:59:38.496525",
     "exception": false,
     "start_time": "2025-02-23T23:59:38.473418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "87e2ee0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T23:59:38.505577Z",
     "iopub.status.busy": "2025-02-23T23:59:38.505257Z",
     "iopub.status.idle": "2025-02-23T23:59:38.509592Z",
     "shell.execute_reply": "2025-02-23T23:59:38.508724Z"
    },
    "papermill": {
     "duration": 0.010848,
     "end_time": "2025-02-23T23:59:38.511220",
     "exception": false,
     "start_time": "2025-02-23T23:59:38.500372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "76249019",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T23:59:38.520369Z",
     "iopub.status.busy": "2025-02-23T23:59:38.520049Z",
     "iopub.status.idle": "2025-02-23T23:59:38.592258Z",
     "shell.execute_reply": "2025-02-23T23:59:38.591361Z"
    },
    "papermill": {
     "duration": 0.079226,
     "end_time": "2025-02-23T23:59:38.594372",
     "exception": false,
     "start_time": "2025-02-23T23:59:38.515146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d1b78ba",
   "metadata": {
    "papermill": {
     "duration": 0.004133,
     "end_time": "2025-02-23T23:59:38.606213",
     "exception": false,
     "start_time": "2025-02-23T23:59:38.602080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ab05cff1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T23:59:38.616378Z",
     "iopub.status.busy": "2025-02-23T23:59:38.615408Z",
     "iopub.status.idle": "2025-02-23T23:59:38.837043Z",
     "shell.execute_reply": "2025-02-23T23:59:38.836171Z"
    },
    "papermill": {
     "duration": 0.229186,
     "end_time": "2025-02-23T23:59:38.839363",
     "exception": false,
     "start_time": "2025-02-23T23:59:38.610177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8c187d98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T23:59:38.852006Z",
     "iopub.status.busy": "2025-02-23T23:59:38.851330Z",
     "iopub.status.idle": "2025-02-23T23:59:40.230031Z",
     "shell.execute_reply": "2025-02-23T23:59:40.229010Z"
    },
    "papermill": {
     "duration": 1.387137,
     "end_time": "2025-02-23T23:59:40.231995",
     "exception": false,
     "start_time": "2025-02-23T23:59:38.844858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "10015173",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T23:59:40.241505Z",
     "iopub.status.busy": "2025-02-23T23:59:40.241053Z",
     "iopub.status.idle": "2025-02-23T23:59:40.244935Z",
     "shell.execute_reply": "2025-02-23T23:59:40.244116Z"
    },
    "papermill": {
     "duration": 0.010523,
     "end_time": "2025-02-23T23:59:40.246561",
     "exception": false,
     "start_time": "2025-02-23T23:59:40.236038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "055ec1f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-23T23:59:40.256344Z",
     "iopub.status.busy": "2025-02-23T23:59:40.256013Z",
     "iopub.status.idle": "2025-02-24T00:13:36.765834Z",
     "shell.execute_reply": "2025-02-24T00:13:36.764846Z"
    },
    "papermill": {
     "duration": 836.517407,
     "end_time": "2025-02-24T00:13:36.768056",
     "exception": false,
     "start_time": "2025-02-23T23:59:40.250649",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1500/1500 [13:56<00:00,  1.79it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1500)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 2*loss_res + 3*loss_ic + 2*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5bd8b81c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T00:13:36.910096Z",
     "iopub.status.busy": "2025-02-24T00:13:36.909265Z",
     "iopub.status.idle": "2025-02-24T00:13:36.926913Z",
     "shell.execute_reply": "2025-02-24T00:13:36.925637Z"
    },
    "papermill": {
     "duration": 0.086577,
     "end_time": "2025-02-24T00:13:36.928650",
     "exception": false,
     "start_time": "2025-02-24T00:13:36.842073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.012238, Loss_IC: 0.134631, loss_bc: 0.076054\n",
      "Train Loss: 0.222923\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08472be6",
   "metadata": {
    "papermill": {
     "duration": 0.067129,
     "end_time": "2025-02-24T00:13:37.063556",
     "exception": false,
     "start_time": "2025-02-24T00:13:36.996427",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "acc12b21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T00:13:37.197997Z",
     "iopub.status.busy": "2025-02-24T00:13:37.197648Z",
     "iopub.status.idle": "2025-02-24T00:13:37.226628Z",
     "shell.execute_reply": "2025-02-24T00:13:37.225724Z"
    },
    "papermill": {
     "duration": 0.097682,
     "end_time": "2025-02-24T00:13:37.228457",
     "exception": false,
     "start_time": "2025-02-24T00:13:37.130775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/4090693566.py:4: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n"
     ]
    }
   ],
   "source": [
    "\n",
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# Load saved parameters\n",
    "model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# Move model to the correct device\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e9c08d40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T00:13:37.365440Z",
     "iopub.status.busy": "2025-02-24T00:13:37.364885Z",
     "iopub.status.idle": "2025-02-24T00:27:52.752255Z",
     "shell.execute_reply": "2025-02-24T00:27:52.751285Z"
    },
    "papermill": {
     "duration": 855.458443,
     "end_time": "2025-02-24T00:27:52.754122",
     "exception": false,
     "start_time": "2025-02-24T00:13:37.295679",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [14:15<00:00,  8.55s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(100)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 10* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 10*loss_res + 5*loss_ic + 3*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "75c7e8b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T00:27:52.900899Z",
     "iopub.status.busy": "2025-02-24T00:27:52.900522Z",
     "iopub.status.idle": "2025-02-24T00:27:52.915393Z",
     "shell.execute_reply": "2025-02-24T00:27:52.914541Z"
    },
    "papermill": {
     "duration": 0.090698,
     "end_time": "2025-02-24T00:27:52.917247",
     "exception": false,
     "start_time": "2025-02-24T00:27:52.826549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.011805, Loss_IC: 0.154677, loss_bc: 0.010256\n",
      "Train Loss: 0.176738\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f6d48cf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T00:27:53.062437Z",
     "iopub.status.busy": "2025-02-24T00:27:53.061576Z",
     "iopub.status.idle": "2025-02-24T00:27:53.075343Z",
     "shell.execute_reply": "2025-02-24T00:27:53.074506Z"
    },
    "papermill": {
     "duration": 0.088016,
     "end_time": "2025-02-24T00:27:53.076958",
     "exception": false,
     "start_time": "2025-02-24T00:27:52.988942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000263, Loss_IC: 0.031592, loss_bc: 0.009638\n",
      "Train Loss: 0.041492\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a210bdd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T00:27:53.220687Z",
     "iopub.status.busy": "2025-02-24T00:27:53.220071Z",
     "iopub.status.idle": "2025-02-24T00:27:53.590360Z",
     "shell.execute_reply": "2025-02-24T00:27:53.589584Z"
    },
    "papermill": {
     "duration": 0.443872,
     "end_time": "2025-02-24T00:27:53.592390",
     "exception": false,
     "start_time": "2025-02-24T00:27:53.148518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7737ea45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T00:27:53.738909Z",
     "iopub.status.busy": "2025-02-24T00:27:53.738092Z",
     "iopub.status.idle": "2025-02-24T00:27:53.741937Z",
     "shell.execute_reply": "2025-02-24T00:27:53.741161Z"
    },
    "papermill": {
     "duration": 0.07699,
     "end_time": "2025-02-24T00:27:53.743481",
     "exception": false,
     "start_time": "2025-02-24T00:27:53.666491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "45226d3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-24T00:27:53.887520Z",
     "iopub.status.busy": "2025-02-24T00:27:53.886752Z",
     "iopub.status.idle": "2025-02-24T00:27:55.012589Z",
     "shell.execute_reply": "2025-02-24T00:27:55.011755Z"
    },
    "papermill": {
     "duration": 1.199947,
     "end_time": "2025-02-24T00:27:55.014551",
     "exception": false,
     "start_time": "2025-02-24T00:27:53.814604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Predicted u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Analytical u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1704.227814,
   "end_time": "2025-02-24T00:27:56.311395",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-23T23:59:32.083581",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
