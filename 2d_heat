{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41568bcb",
   "metadata": {
    "papermill": {
     "duration": 0.004603,
     "end_time": "2025-02-25T00:13:43.716245",
     "exception": false,
     "start_time": "2025-02-25T00:13:43.711642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "da00c7e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T00:13:43.725610Z",
     "iopub.status.busy": "2025-02-25T00:13:43.725279Z",
     "iopub.status.idle": "2025-02-25T00:13:47.667211Z",
     "shell.execute_reply": "2025-02-25T00:13:47.666220Z"
    },
    "papermill": {
     "duration": 3.949945,
     "end_time": "2025-02-25T00:13:47.669929",
     "exception": false,
     "start_time": "2025-02-25T00:13:43.719984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3276cc78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T00:13:47.680430Z",
     "iopub.status.busy": "2025-02-25T00:13:47.679863Z",
     "iopub.status.idle": "2025-02-25T00:13:47.708430Z",
     "shell.execute_reply": "2025-02-25T00:13:47.707545Z"
    },
    "papermill": {
     "duration": 0.036122,
     "end_time": "2025-02-25T00:13:47.710524",
     "exception": false,
     "start_time": "2025-02-25T00:13:47.674402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b352c849",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T00:13:47.720227Z",
     "iopub.status.busy": "2025-02-25T00:13:47.719549Z",
     "iopub.status.idle": "2025-02-25T00:13:47.724339Z",
     "shell.execute_reply": "2025-02-25T00:13:47.723579Z"
    },
    "papermill": {
     "duration": 0.011457,
     "end_time": "2025-02-25T00:13:47.726180",
     "exception": false,
     "start_time": "2025-02-25T00:13:47.714723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4917e687",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T00:13:47.735662Z",
     "iopub.status.busy": "2025-02-25T00:13:47.735012Z",
     "iopub.status.idle": "2025-02-25T00:13:47.815938Z",
     "shell.execute_reply": "2025-02-25T00:13:47.814483Z"
    },
    "papermill": {
     "duration": 0.087748,
     "end_time": "2025-02-25T00:13:47.817939",
     "exception": false,
     "start_time": "2025-02-25T00:13:47.730191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94fdc80c",
   "metadata": {
    "papermill": {
     "duration": 0.003959,
     "end_time": "2025-02-25T00:13:47.825830",
     "exception": false,
     "start_time": "2025-02-25T00:13:47.821871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "35436a04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T00:13:47.835148Z",
     "iopub.status.busy": "2025-02-25T00:13:47.834317Z",
     "iopub.status.idle": "2025-02-25T00:13:48.077160Z",
     "shell.execute_reply": "2025-02-25T00:13:48.076319Z"
    },
    "papermill": {
     "duration": 0.25062,
     "end_time": "2025-02-25T00:13:48.080053",
     "exception": false,
     "start_time": "2025-02-25T00:13:47.829433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "093882fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T00:13:48.094808Z",
     "iopub.status.busy": "2025-02-25T00:13:48.094092Z",
     "iopub.status.idle": "2025-02-25T00:13:49.428897Z",
     "shell.execute_reply": "2025-02-25T00:13:49.427741Z"
    },
    "papermill": {
     "duration": 1.342646,
     "end_time": "2025-02-25T00:13:49.431062",
     "exception": false,
     "start_time": "2025-02-25T00:13:48.088416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ef6ebcd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T00:13:49.441556Z",
     "iopub.status.busy": "2025-02-25T00:13:49.440494Z",
     "iopub.status.idle": "2025-02-25T00:13:49.444844Z",
     "shell.execute_reply": "2025-02-25T00:13:49.444035Z"
    },
    "papermill": {
     "duration": 0.01126,
     "end_time": "2025-02-25T00:13:49.446619",
     "exception": false,
     "start_time": "2025-02-25T00:13:49.435359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ec86f2a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T00:13:49.456212Z",
     "iopub.status.busy": "2025-02-25T00:13:49.455850Z",
     "iopub.status.idle": "2025-02-25T01:52:57.938281Z",
     "shell.execute_reply": "2025-02-25T01:52:57.937432Z"
    },
    "papermill": {
     "duration": 5948.491347,
     "end_time": "2025-02-25T01:52:57.941932",
     "exception": false,
     "start_time": "2025-02-25T00:13:49.450585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1200 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1200/1200 [1:39:08<00:00,  4.96s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1200)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 20*loss_res + 5*loss_ic + 2*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f60e2cfd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T01:52:58.066955Z",
     "iopub.status.busy": "2025-02-25T01:52:58.066590Z",
     "iopub.status.idle": "2025-02-25T01:52:58.085195Z",
     "shell.execute_reply": "2025-02-25T01:52:58.083956Z"
    },
    "papermill": {
     "duration": 0.084043,
     "end_time": "2025-02-25T01:52:58.087255",
     "exception": false,
     "start_time": "2025-02-25T01:52:58.003212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000239, Loss_IC: 0.042894, loss_bc: 0.003932\n",
      "Train Loss: 0.047065\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7136724",
   "metadata": {
    "papermill": {
     "duration": 0.0631,
     "end_time": "2025-02-25T01:52:58.213053",
     "exception": false,
     "start_time": "2025-02-25T01:52:58.149953",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2115e7d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T01:52:58.344098Z",
     "iopub.status.busy": "2025-02-25T01:52:58.343433Z",
     "iopub.status.idle": "2025-02-25T01:52:58.347729Z",
     "shell.execute_reply": "2025-02-25T01:52:58.346805Z"
    },
    "papermill": {
     "duration": 0.072823,
     "end_time": "2025-02-25T01:52:58.349504",
     "exception": false,
     "start_time": "2025-02-25T01:52:58.276681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6bb56504",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T01:52:58.474428Z",
     "iopub.status.busy": "2025-02-25T01:52:58.474071Z",
     "iopub.status.idle": "2025-02-25T01:52:58.480798Z",
     "shell.execute_reply": "2025-02-25T01:52:58.479804Z"
    },
    "papermill": {
     "duration": 0.071172,
     "end_time": "2025-02-25T01:52:58.482800",
     "exception": false,
     "start_time": "2025-02-25T01:52:58.411628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(250)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "217b23a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T01:52:58.607406Z",
     "iopub.status.busy": "2025-02-25T01:52:58.606783Z",
     "iopub.status.idle": "2025-02-25T01:52:58.622696Z",
     "shell.execute_reply": "2025-02-25T01:52:58.621705Z"
    },
    "papermill": {
     "duration": 0.080005,
     "end_time": "2025-02-25T01:52:58.624805",
     "exception": false,
     "start_time": "2025-02-25T01:52:58.544800",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 284.411804\n",
      "Train Loss: 285.094540\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4c48a700",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T01:52:58.751068Z",
     "iopub.status.busy": "2025-02-25T01:52:58.750600Z",
     "iopub.status.idle": "2025-02-25T01:52:58.767165Z",
     "shell.execute_reply": "2025-02-25T01:52:58.766060Z"
    },
    "papermill": {
     "duration": 0.080289,
     "end_time": "2025-02-25T01:52:58.769078",
     "exception": false,
     "start_time": "2025-02-25T01:52:58.688789",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000239, Loss_IC: 0.042894, loss_bc: 0.003932\n",
      "Train Loss: 0.047065\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c20b68b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T01:52:58.897106Z",
     "iopub.status.busy": "2025-02-25T01:52:58.896433Z",
     "iopub.status.idle": "2025-02-25T01:52:59.242641Z",
     "shell.execute_reply": "2025-02-25T01:52:59.241630Z"
    },
    "papermill": {
     "duration": 0.411462,
     "end_time": "2025-02-25T01:52:59.244968",
     "exception": false,
     "start_time": "2025-02-25T01:52:58.833506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "642eb34a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T01:52:59.373224Z",
     "iopub.status.busy": "2025-02-25T01:52:59.372273Z",
     "iopub.status.idle": "2025-02-25T01:52:59.376475Z",
     "shell.execute_reply": "2025-02-25T01:52:59.375732Z"
    },
    "papermill": {
     "duration": 0.067448,
     "end_time": "2025-02-25T01:52:59.378272",
     "exception": false,
     "start_time": "2025-02-25T01:52:59.310824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ef08e3ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-25T01:52:59.500720Z",
     "iopub.status.busy": "2025-02-25T01:52:59.499890Z",
     "iopub.status.idle": "2025-02-25T01:53:00.794219Z",
     "shell.execute_reply": "2025-02-25T01:53:00.793252Z"
    },
    "papermill": {
     "duration": 1.358504,
     "end_time": "2025-02-25T01:53:00.796479",
     "exception": false,
     "start_time": "2025-02-25T01:52:59.437975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXsAAAEiCAYAAAAYv3I0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA5sElEQVR4nO3deVwT59YH8N8QSEARRJHNorjUfUGhULBW6ItStVRb69oiUrXaQm+VWxesitsFr1WKr0Vp3WgtfbW1anuVahXlWiutVqHXvVVR1AruoCiEJM/7BzepMQmZQMgkmfP9fObzIZNZzhOSk8mZZ57hGGMMhBBC7JqD0AEQQghpfJTsCSFEBCjZE0KICFCyJ4QQEaBkTwghIkDJnhBCRICSPSGEiAAle0IIEQFK9oQQIgKiTfYBAQGYMGGC5nF+fj44jkN+fr5gMT3pyRjN5Z133sHAgQPNvl2hjBkzBqNGjRI6DGKjsrOzwXEcLl26JHQojUqQZK9+cdWTs7MzOnXqhMTERJSVlQkRUr3l5uZiwYIFQofBW3FxMdatW4c5c+YIHYpJ/vzzTyxYsABFRUU6z82aNQvffPMNfvvtN7PuU6VSITs7Gy+//DL8/f3RtGlT9OjRA0uWLEFVVZXWspcuXdJ6Tzs5OcHT0xPh4eGYM2cOSkpKeO+X4zgkJibqfU792fn1118b1La61PVa1xWToennn39utFhNkZqaih07dggdhmAchdz5okWL0K5dO1RVVeHQoUNYs2YNcnNzcfLkSTRp0sSisTz//PN49OgRpFKpSevl5uYiMzPTZhL+ypUr0a5dO0RGRgodikn+/PNPLFy4EAEBAQgMDNR6rk+fPggODsaKFSvw+eefm22fDx8+RHx8PJ599llMnToVXl5eKCgoQEpKCvLy8rB//35wHKe1ztixYzFkyBCoVCrcvXsXR48eRUZGBlauXIn169djzJgxZouvsdT1WtdF/Xl+UseOHc0YXf2lpqbitddew/Dhw7Xmx8bGYsyYMZDJZMIEZiGCJvvBgwcjODgYADBp0iS0bNkS6enp+PbbbzF27Fi961RWVqJp06Zmj8XBwQHOzs5m3641qampQU5ODqZOnSp0KGY3atQopKSkYPXq1XB1dTXLNqVSKX766SeEh4dr5k2ePBkBAQGahB8VFaW1Tt++ffHGG29ozbt8+TIGDRqEuLg4dO3aFb179zZLfNbm8c+zLZFIJJBIJEKH0eisqmb/wgsvAKgtNQDAhAkT4OrqigsXLmDIkCFo1qwZXn/9dQC1P7EzMjLQvXt3ODs7w9vbG1OmTMHdu3e1tskYw5IlS/DUU0+hSZMmiIyMxKlTp3T2bahm/8svv2DIkCHw8PBA06ZN0atXL6xcuVITX2ZmJgBo/WxVM3eM+hiKW11WyM7O1sw7dOgQbt26pZOg4uLi4OzsjDNnzmjNj46OhoeHB/78809esailpKTAyckJN2/e1HnurbfeQvPmzXXKIHXJz8/HM888AwCIj4/XvM6Pt23gwIGorKzE3r17TYq1LlKpVCvRq73yyisAoPN6GdK2bVtkZ2dDLpdj2bJlZovvcWfPnsVrr72GFi1awNnZGcHBwfjuu++0lrlz5w7ef/999OzZE66urnBzc8PgwYO1yl98XuuGuHfvHiZMmAB3d3c0b94ccXFxKCoq0tlHREQEIiIidNafMGECAgICtOYtX74c4eHhaNmyJVxcXBAUFIStW7dqLcNxHCorK/HZZ59p2qQ+H2aoZr969Wp0794dMpkMfn5+SEhIwL1797SWiYiIQI8ePXD69GlERkaiSZMmaN26daP9nxvCqpL9hQsXAAAtW7bUzFMoFIiOjoaXlxeWL1+OESNGAACmTJmCGTNmoF+/fli5ciXi4+ORk5OD6Oho1NTUaNafP38+5s2bh969e+PDDz9E+/btMWjQIFRWVhqNZ+/evXj++edx+vRpvPfee1ixYgUiIyOxc+dOTQzqE52bNm3STGqWiNEUhw8fBsdx6NOnj9b8lStXolWrVoiLi4NSqQQAfPLJJ/jhhx+watUq+Pn5mbSf2NhYKBQKbNmyRWu+XC7H1q1bMWLECJN+RXXt2hWLFi0CUPtloX6dn3/+ec0y3bp1g4uLC3766SeTYq2P0tJSAICnpyfvdcLCwtChQwfeX0ZVVVW4deuWzvTgwQOdZU+dOoVnn30WZ86cwezZs7FixQo0bdoUw4cPx/bt2zXLXbx4ETt27MBLL72E9PR0zJgxAydOnMCAAQM0X+h8XmtDysvLdeK9ffu25nnGGIYNG4ZNmzbhjTfewJIlS3D16lXExcXxek0MWblyJfr06YNFixYhNTUVjo6OGDlyJHbt2qVZZtOmTZDJZOjfv7+mTVOmTDG4zQULFiAhIQF+fn5YsWIFRowYgU8++QSDBg3S+uwCwN27d/Hiiy+id+/eWLFiBbp06YJZs2bh+++/b1C7zI4JYOPGjQwA27dvH7t58ya7cuUK27x5M2vZsiVzcXFhV69eZYwxFhcXxwCw2bNna63/448/MgAsJydHa/7u3bu15t+4cYNJpVI2dOhQplKpNMvNmTOHAWBxcXGaeQcOHGAA2IEDBxhjjCkUCtauXTvWtm1bdvfuXa39PL6thIQEpu9lbIwY9XkybrXi4mIGgG3cuFEz74033mAtW7bUu509e/YwAGzJkiXs4sWLzNXVlQ0fPrzOfdclLCyMhYaGas3btm2b3lj5OHr0qE57ntSpUyc2ePBgk7dtqqioKObm5qb1vlC/3h9++KHB9YYNG8YAsPLy8jq3D8DodPToUc3y//M//8N69uzJqqqqNPNUKhULDw9nTz/9tGZeVVUVUyqVWvsqLi5mMpmMLVq0SDOPz2v9OPXnWd8kk8k0y+3YsYMBYMuWLdPMUygUrH///jr7GzBgABswYIDOvuLi4ljbtm215j18+FDrsVwuZz169GAvvPCC1vymTZvq/Typ4y8uLmaM/fWZHDRokNbr9fHHHzMAbMOGDVpxAmCff/65Zl51dTXz8fFhI0aM0NmXkAQ9so+KikKrVq3g7++PMWPGwNXVFdu3b0fr1q21lnv77be1Hn/99ddwd3fHwIEDtY4igoKC4OrqigMHDgAA9u3bB7lcjnfffVervDJt2jSjsRUWFqK4uBjTpk1D8+bNtZ578qScPpaI0VS3b9+Gh4eH3ucGDRqEKVOmYNGiRXj11Vfh7OyMTz75pN77Gj9+PH755RfNrzUAyMnJgb+/PwYMGFDv7dbFw8MDt27dapRtq6WmpmLfvn1YunSpzvvCGPW5hPv37xtddtiwYdi7d6/ONGPGDK3l7ty5g/3792PUqFG4f/++1hF1dHQ0/vjjD1y7dg0AIJPJ4OBQ+5FXKpW4ffs2XF1d0blzZxw/ftyktuiTmZmpE+/jR7e5ublwdHTU+jxLJBK8++67Ddqvi4uL5u+7d++ivLwc/fv3r3eb1J/JadOmaV4voPZ8jZubm9YvBqD2//r4eRqpVIqQkBBcvHixXvtvLIKeoM3MzESnTp3g6OgIb29vdO7cWevFBQBHR0c89dRTWvP++OMPlJeXw8vLS+92b9y4AaD2xBgAPP3001rPt2rVymDSU1MnqR49evBvkIVjrA9Wx43Jli9fjm+//RZFRUX48ssvDcbOx+jRozFt2jTk5ORg/vz5KC8vx86dOzF9+nReX5b1wRgzuu07d+5ALpdrHru4uMDd3Z3X9rds2YK5c+di4sSJOgcgfKhLMM2aNTO67FNPPaVzbgUArl69qvX4/PnzYIxh3rx5mDdvnt5t3bhxA61bt4ZKpcLKlSuxevVqFBcXa0p2gHbptL5CQkLqPEF7+fJl+Pr66pxA79y5c4P2u3PnTixZsgRFRUWorq7WzK/v+0z9mXwyLqlUivbt22ueV3vqqad09uXh4YH//Oc/9dp/YxE02Rt7cwDaRyNqKpUKXl5eyMnJ0btOq1atzBZjfVkqRkNv6Mc/yGotW7bUOTn8uMLCQs2X0IkTJwz2iOLDw8MDL730kibZb926FdXV1To9Vczp7t27Ol+aT3r11Vfx73//W/M4Li6O18nHvXv3Yvz48Rg6dCiysrLqFd/Jkyfh5eUFNze3eq2vj0qlAgC8//77iI6O1ruMuutjamoq5s2bhzfffBOLFy9GixYt4ODggGnTpmm2Yy04jtN7YPLk+/rHH3/Eyy+/jOeffx6rV6+Gr68vnJycsHHjRnz55ZcWidVQT566DqyEIGiyr68OHTpg37596Nevn9ZPuCe1bdsWQO1Rdvv27TXzb968WWfSU+8DqP2A6jvCUjOUbC0RIwDN0f+TvQSePPoAgC5duiAnJwfl5eU6R7OVlZWIj49Ht27dEB4ejmXLluGVV17R9Myoj/Hjx2PYsGE4evQocnJy0KdPH3Tv3r1e2zJ2lKZQKHDlyhW8/PLLdS63YsUKrdeVz8nnX375Ba+88gqCg4Px1VdfwdHR9I9NQUEBLly4YPYvO/V7xsnJqc73KQBs3boVkZGRWL9+vdb8e/fuaZ1sbqxfXm3btkVeXh4ePHigdXR/7tw5nWU9PDz0lkGefF9/8803cHZ2xp49e7T6yW/cuFFnXb7tUn8mz507p/WZlMvlKC4uNvo6Wyur6o3D16hRo6BUKrF48WKd5xQKhSbxRUVFwcnJCatWrdL6ls3IyDC6j759+6Jdu3bIyMjQSaSPb0vd5//JZSwRI1D7xpRIJDh48KDW/NWrV+ssGxYWBsYYjh07pvPcrFmzUFJSgs8++wzp6ekICAhAXFyc1s9iUw0ePBienp745z//iX//+98NSnSGXme106dPo6qqSm9XyccFBQUhKipKM3Xr1q3O5c+cOYOhQ4ciICAAO3furPOL25DLly9jwoQJkEqlOjX3hvLy8kJERAQ++eQTXL9+Xef5x7u/SiQSnaPNr7/+WlPTVzP2WtfXkCFDoFAosGbNGs08pVKJVatW6SzboUMHnD17Viv+3377Tae3lUQiAcdxWkf8ly5d0nulbNOmTXm1KSoqClKpFP/7v/+r9XqtX78e5eXlGDp0qNFtWCObPLIfMGAApkyZgrS0NBQVFWHQoEFwcnLCH3/8ga+//horV67Ea6+9hlatWuH9999HWloaXnrpJQwZMgSFhYX4/vvvjXabc3BwwJo1axATE4PAwEDEx8fD19cXZ8+exalTp7Bnzx4AtckDAP72t78hOjoaEokEY8aMsUiMAODu7o6RI0di1apV4DgOHTp0wM6dOzXlmMc999xzaNmyJfbt26e5pgEA9u/fj9WrVyMlJQV9+/YFUHtkFBERgXnz5mn1GVb3ceYzjoiTkxPGjBmDjz/+GBKJRG9ZKDs7G/Hx8di4cWOd4wB16NABzZs3R1ZWFpo1a4amTZsiNDRUc8Xm3r170aRJE7OO+XP//n1ER0fj7t27mDFjhs6JuQ4dOiAsLExr3vHjx/HFF19ApVLh3r17OHr0KL755htwHIdNmzahV69eZotPLTMzE8899xx69uyJyZMno3379igrK0NBQQGuXr2q6Uf/0ksvYdGiRYiPj0d4eDhOnDiBnJwcraNXdbvqeq0N+f7773H27Fmd+eHh4Wjfvj1iYmLQr18/zJ49G5cuXUK3bt2wbds2lJeX66zz5ptvIj09HdHR0Zg4cSJu3LiBrKwsdO/eHRUVFZrlhg4divT0dLz44osYN24cbty4gczMTHTs2FGnZh4UFIR9+/YhPT0dfn5+aNeuHUJDQ3X23apVKyQnJ2PhwoV48cUX8fLLL+PcuXNYvXo1nnnmmUYtRTYqIboAqbs6Pd59TJ+4uDjWtGlTg89/+umnLCgoiLm4uLBmzZqxnj17spkzZ7I///xTs4xSqWQLFy5kvr6+zMXFhUVERLCTJ0+ytm3b1tn1Uu3QoUNs4MCBrFmzZqxp06asV69ebNWqVZrnFQoFe/fdd1mrVq0Yx3E63TDNGaMhN2/eZCNGjGBNmjRhHh4ebMqUKezkyZN6u8/97W9/Yx07dtQ8rqioYG3btmV9+/ZlNTU1WstOnz6dOTg4sIKCAs08T09P9uyzzxqNSe3IkSMMABs0aJDe51etWsUAsN27dxvd1rfffsu6devGHB0dddoWGhrK3njjDd5x8aHuTmloevx/8+Syjo6OrEWLFiw0NJQlJyezy5cv894vAJaQkKD3OUOfnQsXLrDx48czHx8f5uTkxFq3bs1eeukltnXrVs0yVVVV7O9//7vmfdavXz9WUFCgt5tjXa+1oZgMTY+ve/v2bRYbG8vc3NyYu7s7i42NZYWFhXr38cUXX7D27dszqVTKAgMD2Z49e/R2vVy/fj17+umnmUwmY126dGEbN25kKSkpOp/Fs2fPsueff565uLho/f+e7Hqp9vHHH7MuXbowJycn5u3tzd5++22dbtgDBgxg3bt313lN9MUpNEGSPRHOhQsXmJOTE9u3b5/J6546dYoBYDt37uS9TlFRkU4/5MeNHDmSPfPMMybH8rjCwkLGcRwrLCxs0HaIMPRdE0LMzyZr9qT+2rdvj4kTJ2Lp0qUmr3vgwAGEhYWZVLNcu3YtXF1d8eqrr+o8xxhDfn4+lixZYnIsj1u6dClee+01kwbtIkRsOMasrH8QsQv/+te/cPr0acybNw+JiYlIT08XOiRipS5duoR27doZPW9DGsYmT9AS6/fuu++irKwMQ4YMwcKFC4UOhxDRE7SMc/DgQcTExMDPzw8cx/G6sUB+fj769u0LmUyGjh07mm00PmJely5dwqNHj7Bjxw5eV4wS8QoICABjjI7qG5mgyb6yshK9e/fWDBNsTHFxMYYOHYrIyEgUFRVh2rRpmDRpkqYbJCGEEP2spmbPcRy2b9+ucxeZx82aNQu7du3CyZMnNfPGjBmDe/fuYffu3RaIkhBCbJNN1ewLCgp0LlWOjo6uc4TI6upqratAVSoV7ty5g5YtWzbaZeGEEOExxnD//n34+fnpjK/FR1VVldageXWRSqVWf6c7m0r2paWl8Pb21prn7e2NiooKPHr0SO+l7GlpaXSCkBARu3Llis7IucZUVVWhXVtXlN7QHVBQHx8fHxQXF1t1wrepZF8fycnJSEpK0jwuLy9HmzZtcPl4ANxcTf+2VzJ+owOqYLw6pgK/bSkbUGnjvQ8e8RpS30pgQ/apj7nHbWzI685r+4269YazrnEwTffggQrhIbfq1UFALpej9IYSxcfawq1Z3Xmi4r4K7YIuQy6XU7I3Fx8fH5SVlWnNKysrg5ubm8EBqmQymd67xru5Ohj9J+qj5Pn555fs+e6zIcme5z4akHhVlOzrt/1G3XrD2XqyV2tIubapa+1UF745QWg2dQVtWFgY8vLytObt3btXZzAqQggxBxUYr8kWCHpk/+DBA5w/f17zuLi4GEVFRWjRogXatGmD5ORkXLt2DZ9//jkAYOrUqfj4448xc+ZMvPnmm9i/fz+++uorndEI+fhPdTVcpfU4skf9jxLqu66K6b85Ar991v9frGzAsYDKjCNxNOQ117s9M48SohLgmMncr4m5mfs1ro+H1UoAuqO/mqKGKVFj5BdeDc/SrtAETfa//vorIiMjNY/VtXX13YOuX7+OkpISzfPt2rXDrl27MH36dKxcuRJPPfUU1q1bZ/AOPYQQ0hB8jtzpyJ6HiIiIOk/u6bs6NiIiAoWFhY0YFSGE1FKBGT23RMmeEEJsHB3Z24GCRx3hLDFP881ZP21IrdvcdVxz1t0B89ZxVRaoWdtavPoIVTtXMeHPKVRX1gA41aBt1DDGo2ZPyZ4QQmyakkcZx9xdiBsLJXtCCDFAyYz3o7eVfvaU7AkhxAAVjF9cZhsdL0Wc7H8ubwcnhbTRtt/YNUtzb98SNVZzngOwRA3cnK+JUDVsS+yXWUF9HtB9Tygqqw0syZ+Ccagx0j6FlbTfGNEme0IIMUYJzmjHB2u/wE2Nkj0hhBhAyZ4QQkRAxTijpTBr6GbKh2iT/dlbXpA81B0Nsz4au2ZpiZqoJboK0+vEZ/u23wb9O7V8QlQ9rGrwNuSQQG5k7CM5HdkTQohtYzyO7K3lBLUxlOwJIcQAqtkTQogI1DAJaowMMV7DrP02NLVEm+wflLnCwcV6byHWqIS64q+R98tZ4ud0Y792dvq/EaRm/6jh+6Qje0IIEQElczA6mFxj377SXCjZE0KIASpwRq/WFmpEU1MJf+8wQgixUjXMEXIjUw0z7Zj54MGDiImJgZ+fHziOw44dO+pcPj8/HxzH6UylpaUm7Ve0R/bS2xI4OD924sWKf4lx1hSbALVXwdpvp/V5QV5PAfaprG74sawKDkbvMWzqzUsqKyvRu3dvvPnmm3j11Vd5r3fu3Dm4ublpHnt5eZm0X9Eme0IIMUbJOCiNHOAYe/5JgwcPxuDBg02OxcvLC82bNzd5PTUq4xBCiAFKOPCaLCEwMBC+vr4YOHAgfvrpJ5PXpyN7QggxoIY58uhnX3tkX1FRoTVfJpNBJmv4kCy+vr7IyspCcHAwqqursW7dOkREROCXX35B3759eW9HtMledpuDRCbwWXRrqsXrYTXnCqi2bb/7fQJnxm6MSnnDt6WC8TKN+uYl/v7+WvNTUlKwYMGCBsfQuXNndO7cWfM4PDwcFy5cwEcffYRNmzbx3o5okz0hhBjD7wRt7fNXrlzROoFqjqN6Q0JCQnDo0CGT1qFkTwghBvC7qKr2eTc3N61k35iKiorg6+tr0jqU7AkhxIAaJoGj0Zq9aeWiBw8e4Pz585rHxcXFKCoqQosWLdCmTRskJyfj2rVr+PzzzwEAGRkZaNeuHbp3746qqiqsW7cO+/fvxw8//GDSfkWb7GX3GCTSv/5JVlOfbggrb4M567ENYiVhWNV7zppieUJ9XydFTcMbxae3jam9cX799VdERkZqHiclJQEA4uLikJ2djevXr6OkpETzvFwux9///ndcu3YNTZo0Qa9evbBv3z6tbfAh2mRPCCHGNMadqiIiIsDqOPDJzs7Wejxz5kzMnDnTpH3oQ8meEEIMUPE4sjd2AtdaULInhBADapgEEjPX7IUi2mQvq1DC0cnITQds439oMk5lfBmrYuX/B6s5F6GPFYemlxnjdahp+E1FVMwBKiO9cYw9by0EjzIzMxMBAQFwdnZGaGgojhw5UufyGRkZ6Ny5M1xcXODv74/p06ejqqrhNxYmhJAnKfHXDUwMT7ZB0GS/ZcsWJCUlISUlBcePH0fv3r0RHR2NGzdu6F3+yy+/xOzZs5GSkoIzZ85g/fr12LJlC+bMmWPhyAkhYqA+sjc22QJBo0xPT8fkyZMRHx+Pbt26ISsrC02aNMGGDRv0Ln/48GH069cP48aNQ0BAAAYNGoSxY8ca/TVACCH1ofjvPWjrmhRGavrWQrCavVwux7Fjx5CcnKyZ5+DggKioKBQUFOhdJzw8HF988QWOHDmCkJAQXLx4Ebm5uYiNjTW4n+rqalRXV2seqwcrklYo4OioMFNrrISt1Wd5suqauCG2dl5EH1t83R/DKWoavA1TrqC1doIl+1u3bkGpVMLb21trvre3N86ePat3nXHjxuHWrVt47rnnwBiDQqHA1KlT6yzjpKWlYeHChWaNnRAiDo3Rz14otvGV9F/5+flITU3F6tWrcfz4cWzbtg27du3C4sWLDa6TnJyM8vJyzXTlyhULRkwIsWXWNJ59Qwl2ZO/p6QmJRIKysjKt+WVlZfDx8dG7zrx58xAbG4tJkyYBAHr27InKykq89dZb+OCDD+DgoPuim2tMaUKI+Ch49LNXMNuo2QmW7KVSKYKCgpCXl4fhw4cDAFQqFfLy8pCYmKh3nYcPH+okdImk9h9R1+XH+jhW1sBRYhsnVhrExuuuDSam9ttGzmk0Oud2lOao2Zv/toRCEfSiqqSkJMTFxSE4OBghISHIyMhAZWUl4uPjAQDjx49H69atkZaWBgCIiYlBeno6+vTpg9DQUJw/fx7z5s1DTEyMJukTQoi52FPNXtBkP3r0aNy8eRPz589HaWkpAgMDsXv3bs1J25KSEq0j+blz54LjOMydOxfXrl1Dq1atEBMTg3/84x9CNYEQYscYj370zEZ643DM1PqHjauoqIC7uzsig5LhKHEWOpzGJ65/ry4xtZ/KOFqPFcpq7P/PP1FeXm7yTUXUeSI+fxSkrtI6l5U/kGNjxFf12o8liXZsHIeHNXCQ2MY3coOIKdmZG7125qOy/GvJKeUN3oY9jY0j2mRPCCHGqMBBBWM3HKeaPSGE2DTqjUMIISKgYBI4qIz1s7eNnoDiTfbVckBS9zcyJ0CdkVgA1eJFgVM1vJ8941HGYVTGIYQQ20b97AkhRASoNw4hhIiAgjmAM5LMFZTsrRtXLQfnYBs/v4iVo3MA1skMNXsq4xBCiAhQsieEEBGgZE8IISKgZJzRmj1dVGXlWI0CTM/NTgixeyK5foSpGn6PaTqyJ4QQEaBkTwghIkDJnhBCRECpcgCnMlKzN/K8tRBvslcoAGM1e5HUNgkxO2u4hkWlbPgmaIhjQgixf1TGIYQQEWCMAzOSzI09by0o2RNCiAFUs7cHCgXA2cY/iRCb0/ByecOxhvezZzzKOHRkTwghNo7B+Dh3ttKNg5I9IYQYoAIHjnrjEEKIfVOqHACq2ds2plCAUc3edJxtHMUQwljDTxwwxqOMYyN1HNEme0IIMYa6XhJCiAhQsieEEBFQqjhAVXcyVxp53lqINtkzpQqMs4bOwObDUT2diNmTY12ZoZheW7M3dmTf4N1YhGiTPSGEGGNPZRzBu6NkZmYiICAAzs7OCA0NxZEjR+pc/t69e0hISICvry9kMhk6deqE3NxcC0VLCBETxnOyBYIe2W/ZsgVJSUnIyspCaGgoMjIyEB0djXPnzsHLy0tneblcjoEDB8LLywtbt25F69atcfnyZTRv3tzywRNC7B5TcWBGavLGnrcWgib79PR0TJ48GfHx8QCArKws7Nq1Cxs2bMDs2bN1lt+wYQPu3LmDw4cPw8nJCQAQEBBQv52rGMDZyncyP8xmjjHsjDWM3U4ApfY5OMZUDd8mjzIOqIxTN7lcjmPHjiEqKuqvYBwcEBUVhYKCAr3rfPfddwgLC0NCQgK8vb3Ro0cPpKamQqk0fKK1uroaFRUVWhMhhPChvqjK2GSKgwcPIiYmBn5+fuA4Djt27DC6Tn5+Pvr27QuZTIaOHTsiOzvb5LYIluxv3boFpVIJb29vrfne3t4oLS3Vu87FixexdetWKJVK5ObmYt68eVixYgWWLFlicD9paWlwd3fXTP7+/mZtByHEfqlP0BqbTFFZWYnevXsjMzOT1/LFxcUYOnQoIiMjUVRUhGnTpmHSpEnYs2ePSfu1qd44KpUKXl5e+PTTTyGRSBAUFIRr167hww8/REpKit51kpOTkZSUpHlcUVFBCZ8Qwktj1OwHDx6MwYMH814+KysL7dq1w4oVKwAAXbt2xaFDh/DRRx8hOjqa93YES/aenp6QSCQoKyvTml9WVgYfHx+96/j6+sLJyQkSiUQzr2vXrigtLYVcLodUKtVZRyaTQSaT6cxnSqXFx8bhqLZrn6z5cg0xj/9kjg7wfLrbNPKpsoKCAq1yNwBER0dj2rRpJm1HsHeCVCpFUFAQ8vLyNPNUKhXy8vIQFhamd51+/frh/PnzUKn+OvHy+++/w9fXV2+iJ4SQhjCljPPkucHq6mqzxFBaWqq33F1RUYFHjx7x3o6gX/tJSUlYu3YtPvvsM5w5cwZvv/02KisrNb1zxo8fj+TkZM3yb7/9Nu7cuYP33nsPv//+O3bt2oXU1FQkJCQI1QRCiL3j2cne399f6/xgWlqaAMEaJmjNfvTo0bh58ybmz5+P0tJSBAYGYvfu3ZpvsZKSEjg8dgm0v78/9uzZg+nTp6NXr15o3bo13nvvPcyaNUuoJhBC7JgpNfsrV67Azc1NM19f+bg+fHx89Ja73dzc4OLiwns7gp+gTUxMRGJiot7n8vPzdeaFhYXh559/bviOmQqAGfrhmrJLPrVdMddYidlxDpZ9j1sVc/SzB/ffydgygJubm1ayN5ewsDCdUQL27t1rsNxtCGUWQggxpBHGS3jw4AGKiopQVFQEoLZrZVFREUpKSgDU9iAcP368ZvmpU6fi4sWLmDlzJs6ePYvVq1fjq6++wvTp003aLyV7QggxpBGS/a+//oo+ffqgT58+AGrPXfbp0wfz588HAFy/fl2T+AGgXbt22LVrF/bu3YvevXtjxYoVWLdunUndLgErKOMQQoi1aox+9hEREWB1dAvVd3VsREQECgsLTdrPkyjZWxuz1BmJTbDA+RmmEu94SXUlVP4bgeD97M2Fkj0hhBjCOOMDndnIQGiU7AkhxACOx+C4tjJ4LiV7QggxhMc9aI0+byXEm+yZLd1jRkTEdB9dOj/TuMwynj2oZk8IIXaPkj0hhIgAJXtCCLF/nIoDZ6Qmb+x5a2FyR9+4uDgcPHiwMWIhhP994MQ0EeE0whW0QjE52ZeXlyMqKgpPP/00UlNTce3atcaIixBCiBmZnOx37NiBa9eu4e2338aWLVsQEBCAwYMHY+vWraipqWmMGAkhRBAc/uprb3ASOkie6nW9dqtWrZCUlITffvsNv/zyCzp27IjY2Fj4+flh+vTp+OOPP8wdJyGEWJ66n72xyQY0aHCO69evY+/evdi7dy8kEgmGDBmCEydOoFu3bvjoo4/MFSMhhAjDjmr2JvfGqampwXfffYeNGzfihx9+QK9evTBt2jSMGzdOM3D/9u3b8eabb5o83jIhRA86SVs/ZnjdRD1cgq+vL1QqFcaOHYsjR44gMDBQZ5nIyEg0b97cDOERQoiAxNzP/qOPPsLIkSPh7OxscJnmzZujuLi4QYERQojQOFXtZGwZW2Byso+NjW2MOAghxPrQEMeEECICYi7jEEKIWIj6BC0hhIgGj5o97LVmTwghokFlHEIIEQFK9oQQYv+oZk8IIWJAR/aEEGL/6MieEELEwkaSuTENGvXSXDIzMxEQEABnZ2eEhobiyJEjvNbbvHkzOI7D8OHDGzdAQogoqYdLMDbZAsGT/ZYtW5CUlISUlBQcP34cvXv3RnR0NG7cuFHnepcuXcL777+P/v37WyhSQojo2NEQx4In+/T0dEyePBnx8fHo1q0bsrKy0KRJE2zYsMHgOkqlEq+//joWLlyI9u3bWzBaQoiYGL1LFY+avrUQNNnL5XIcO3YMUVFRmnkODg6IiopCQUGBwfUWLVoELy8vTJw40RJhEkLEyo6O7AU9QXvr1i0olUp4e3trzff29sbZs2f1rnPo0CGsX78eRUVFvPZRXV2N6upqzeOKiop6x0sIERd7GuJY8DKOKe7fv4/Y2FisXbsWnp6evNZJS0uDu7u7ZvL392/kKAkhdoOO7M3D09MTEokEZWVlWvPLysrg4+Ojs/yFCxdw6dIlxMTEaOapVLVfq46Ojjh37hw6dOigtU5ycjKSkpI0jysqKijhE0L4oYuqzEMqlSIoKAh5eXma7pMqlQp5eXlITEzUWb5Lly44ceKE1ry5c+fi/v37WLlypd4kLpPJIJPJdHfOcbWTrbKH+5La8utvy+zhvWMhdFGVGSUlJSEuLg7BwcEICQlBRkYGKisrER8fDwAYP348WrdujbS0NDg7O6NHjx5a66vvdfvkfEIIaSh7qtkLnuxHjx6NmzdvYv78+SgtLUVgYCB2796tOWlbUlICBwebOrVACLEXVMYxr8TERL1lGwDIz8+vc93s7GzzB0QIIQAle2IFqN5N6ks07x2uwYmY++9kbBlbQMmeEEIMoJo9IYSIAZVxCCFEJGwkmRsj3mTPOdROasxGfosRQiyG+tkTQogIUM2eEELEgGr2hBBi/6iMY484ukqXWBidJ7J+dGRPCCH2z55q9nQ4SwghhjTSePaZmZkICAiAs7MzQkNDceTIEYPLZmdng+M4rcnZ2dnkfVKyJ4QQAzjGeE2m2LJlC5KSkpCSkoLjx4+jd+/eiI6Oxo0bNwyu4+bmhuvXr2umy5cvm9wWSvaECEV9rYdYJ1vQCEf26enpmDx5MuLj49GtWzdkZWWhSZMm2LBhg8F1OI6Dj4+PZnryVq582MgrTgghlqeu2Rub+JLL5Th27BiioqI08xwcHBAVFYWCggKD6z148ABt27aFv78/hg0bhlOnTpncFkr2hBBigLrrpbEJqL3l6eNTdXW1zvZu3boFpVKpc2Tu7e2N0tJSvTF07twZGzZswLfffosvvvgCKpUK4eHhuHr1qkltoWRPCCGGmFDG8ff3h7u7u2ZKS0szSwhhYWEYP348AgMDMWDAAGzbtg2tWrXCJ598YtJ2RNv1knOoPatNGgdT2UjnYyKcRq/bOzR8PHsTLqq6cuUK3NzcNPP13fva09MTEokEZWVlWvPLysrg4+PDKyYnJyf06dMH58+f57W8Gh3ZE0KIIYxHvf6/yd7NzU1r0pfspVIpgoKCkJeXp5mnUqmQl5eHsLAwXiEplUqcOHECvr6+JjVFtEf2hBBiFGO1k7FlTJCUlIS4uDgEBwcjJCQEGRkZqKysRHx8PABg/PjxaN26taYMtGjRIjz77LPo2LEj7t27hw8//BCXL1/GpEmTTNovJXtCCDGgMcbGGT16NG7evIn58+ejtLQUgYGB2L17t+akbUlJCRwc/iq63L17F5MnT0ZpaSk8PDwQFBSEw4cPo1u3bia2hZn4tWTjKioq4O7ujkjHEXDknIQOhxCj6PxH/ShYDfJV21BeXq5VS+dDnSeCRyyBo1PdV6sqaqrw6zdz67UfS6Ije0IIMYBTGj+PzCktE0tDUbInhBADaIhjQggRg0Y4QSsU8Sb7xh6fg8YqJ2bCOVj39SD2fE6BjuwJIUQE7Gk8e0r2hBBiCJVxCCHE/lEZhxhnK+N1WxKdx7BLjX1OQdBzAnQPWkIIsX+ckoFzqDubc0rbyPZWcfhpyv0Y165di/79+8PDwwMeHh6Iioqqc3lCCKm3RroHrRAET/am3o8xPz8fY8eOxYEDB1BQUAB/f38MGjQI165ds3DkhBB7x4HHzUuEDpInwZO9qfdjzMnJwTvvvIPAwEB06dIF69at0wwRSqyc0Pc8Fct9U+0M58DVe2owdW8cY5MNEPTdW9/7MT7u4cOHqKmpQYsWLRorTEKISJn7HrRCEvQEbV33Yzx79iyvbcyaNQt+fn5aXxiPq66u1roXZEVFRf0DJoSICscYOCNH7saetxY2/bt06dKl2Lx5M7Zv3w5nZ/3DkKalpWndF9Lf39/CURJCbJaK52QDBE32Dbkf4/Lly7F06VL88MMP6NWrl8HlkpOTUV5erpmuXLliltiJSAl9zoDOHViU+sje2GQLBH3X1Pd+jMuWLcPixYuxe/duBAcH17kPmUymc29IQgjhRcX4TTZA8IuqTL0f4z//+U/Mnz8fX375JQICAlBaWgoAcHV1haurq2DtIITYHxouwYxMvR/jmjVrIJfL8dprr2ltJyUlBQsWLLBk6IQQe0cDoZlXYmIiEhMT9T6Xn5+v9fjSpUvm2akDB3CP9cO1kZ9ihAAwf92exi3Si4Y4JoQQMeBTk7eRA0VK9oQQYoA99bOnZE8IIYZQzd4OWeI+nzbyc4+IEN9zAGKr7TMYv2jKRj7WlOwJIcQATsXAGTkDy9nIQRwle0IIMYTKOIQQIgIqGB+w3kYqW5TsLam+5wVs5GciEQGR1fapNw4hhIiBisdVVSrb+GKjZE8IIYZQzZ4QQkSAavbEovTV+qmOT6wZn9q+DdT1qWZPCCFioORxKyql9X9pAZTsCSHEMKrZE0KIGPBI9jYyXgIl+8ZCNXVC6qavrm9tdXw6sieEEBFQKgGmrHsZlZHnrQQle0IIMYSO7AkhRARUDEZr8jZSshVvslfxuG08IUTc6MieEEJEQMXj7iV0ZE8IITZOxeOiKhoIjRBCbByVcQghRAQo2RNCiP1jSiWYkX72jPrZE0KIjWPM+AlYOrInhBAbx3j0s7eRZM/zhpKEECJCKhW/yUSZmZkICAiAs7MzQkNDceTIkTqX//rrr9GlSxc4OzujZ8+eyM3NNXmflOwJIcQAplTymkyxZcsWJCUlISUlBcePH0fv3r0RHR2NGzdu6F3+8OHDGDt2LCZOnIjCwkIMHz4cw4cPx8mTJ03aLyV7QggxRN0bx9hkgvT0dEyePBnx8fHo1q0bsrKy0KRJE2zYsEHv8itXrsSLL76IGTNmoGvXrli8eDH69u2Ljz/+2KT9WkWyF+InDSGEGKVi/Cae5HI5jh07hqioKM08BwcHREVFoaCgQO86BQUFWssDQHR0tMHlDRE82Qv1k4YQQoxirHaM/Tqn2mRfUVGhNVVXV+ts7tatW1AqlfD29taa7+3tjdLSUr0hlJaWmrS8IYIne6F+0hBCiDGm1Oz9/f3h7u6umdLS0gSOXpugXS/VP2mSk5M18/j8pElKStKaFx0djR07djRmqIQQEWIqBmZkdFz23yP7K1euwM3NTTNfJpPpLOvp6QmJRIKysjKt+WVlZfDx8dG7fR8fH5OWN0TQZF/XT5qzZ8/qXcfUnzTV1dVaP6fKy8sBAApW05DQCSGNwYy3JVR/xlkD+sErWLXRmBSo3Y+bm5tWstdHKpUiKCgIeXl5GD58OABApVIhLy8PiYmJetcJCwtDXl4epk2bppm3d+9ehIWF8W8IRHBRVVpaGhYuXKgz/0fFDssHQwixuNu3b8Pd3d2kdaRSKXx8fHColF/nDx8fH0ilUl7LJiUlIS4uDsHBwQgJCUFGRgYqKysRHx8PABg/fjxat26tKQO99957GDBgAFasWIGhQ4di8+bN+PXXX/Hpp5+a1CZBk70lftIkJydrlX3u3buHtm3boqSkxOQ3gDWpqKiAv7+/zk9HW2QvbaF2WJfy8nK0adMGLVq0MHldZ2dnFBcXQy6X81peKpXC2dmZ17KjR4/GzZs3MX/+fJSWliIwMBC7d+/WVCxKSkrg4PDX6dTw8HB8+eWXmDt3LubMmYOnn34aO3bsQI8ePUxqE8ca8hvHDEJDQxESEoJVq1YBqP1J06ZNGyQmJmL27Nk6y48ePRoPHz7Ev/71L8288PBw9OrVC1lZWUb3V1FRAXd3d5SXl9v0G9le2gHYT1uoHdbFXtphLoKXcYT6SUMIIWIieLIX6icNIYSIieDJHgASExMNnonOz8/XmTdy5EiMHDmyXvuSyWRISUnR2y3KlthLOwD7aQu1w7rYSzvMRfCaPSGEkMYn+BW0hBBCGh8le0IIEQFK9oQQIgJ2meztZchkU9qxdu1a9O/fHx4eHvDw8EBUVJTRdluKqf8Ptc2bN4PjOM1l5UIztR337t1DQkICfH19IZPJ0KlTJ5t8bwFARkYGOnfuDBcXF/j7+2P69OmoqqqyULS6Dh48iJiYGPj5+YHjOF5jY+Xn56Nv376QyWTo2LEjsrOzGz1Oq8LszObNm5lUKmUbNmxgp06dYpMnT2bNmzdnZWVlepf/6aefmEQiYcuWLWOnT59mc+fOZU5OTuzEiRMWjlybqe0YN24cy8zMZIWFhezMmTNswoQJzN3dnV29etXCkWsztR1qxcXFrHXr1qx///5s2LBhlgm2Dqa2o7q6mgUHB7MhQ4awQ4cOseLiYpafn8+KioosHLkuU9uSk5PDZDIZy8nJYcXFxWzPnj3M19eXTZ8+3cKR/yU3N5d98MEHbNu2bQwA2759e53LX7x4kTVp0oQlJSWx06dPs1WrVjGJRMJ2795tmYCtgN0l+5CQEJaQkKB5rFQqmZ+fH0tLS9O7/KhRo9jQoUO15oWGhrIpU6Y0apzGmNqOJykUCtasWTP22WefNVaIvNSnHQqFgoWHh7N169axuLg4q0j2prZjzZo1rH379kwul1sqRN5MbUtCQgJ74YUXtOYlJSWxfv36NWqcfPFJ9jNnzmTdu3fXmjd69GgWHR3diJFZF7sq4wh5Fxhzqk87nvTw4UPU1NTUa1wQc6lvOxYtWgQvLy9MnDjREmEaVZ92fPfddwgLC0NCQgK8vb3Ro0cPpKamQmni/UrNrT5tCQ8Px7FjxzSlnosXLyI3NxdDhgyxSMzmYI2fc0uziouqzMUSQyZbQn3a8aRZs2bBz89P5w1uSfVpx6FDh7B+/XoUFRVZIEJ+6tOOixcvYv/+/Xj99deRm5uL8+fP45133kFNTQ1SUlIsEbZe9WnLuHHjcOvWLTz33HNgjEGhUGDq1KmYM2eOJUI2C0Of84qKCjx69AguLi4CRWY5dnVkT2otXboUmzdvxvbt23mPxGcN7t+/j9jYWKxduxaenp5Ch9MgKpUKXl5e+PTTTxEUFITRo0fjgw8+4DVYn7XJz89HamoqVq9ejePHj2Pbtm3YtWsXFi9eLHRoxAR2dWQv5F1gzKk+7VBbvnw5li5din379qFXr16NGaZRprbjwoULuHTpEmJiYjTzVKraG0c4Ojri3Llz6NChQ+MGrUd9/h++vr5wcnKCRCLRzOvatStKS0shl8t5j31ubvVpy7x58xAbG4tJkyYBAHr27InKykq89dZb+OCDD7TGrrJWhj7nbm5uojiqB+zsyP7xu8Coqe8CY+iuLuq7wDyuPneBMaf6tAMAli1bhsWLF2P37t0IDg62RKh1MrUdXbp0wYkTJ1BUVKSZXn75ZURGRqKoqAj+/v6WDF+jPv+Pfv364fz585ovKwD4/fff4evrK1iiB+rXlocPH+okdPWXGLOR0Vas8XNucUKfITa3zZs3M5lMxrKzs9np06fZW2+9xZo3b85KS0sZY4zFxsay2bNna5b/6aefmKOjI1u+fDk7c+YMS0lJsZqul6a0Y+nSpUwqlbKtW7ey69eva6b79+8L1QTGmOnteJK19MYxtR0lJSWsWbNmLDExkZ07d47t3LmTeXl5sSVLlgjVBA1T25KSksKaNWvG/u///o9dvHiR/fDDD6xDhw5s1KhRQjWB3b9/nxUWFrLCwkIGgKWnp7PCwkJ2+fJlxhhjs2fPZrGxsZrl1V0vZ8yYwc6cOcMyMzOp66U9WLVqFWvTpg2TSqUsJCSE/fzzz5rnBgwYwOLi4rSW/+qrr1inTp2YVCpl3bt3Z7t27bJwxPqZ0o62bdsyADpTSkqK5QN/gqn/j8dZS7JnzPR2HD58mIWGhjKZTMbat2/P/vGPfzCFQmHhqPUzpS01NTVswYIFrEOHDszZ2Zn5+/uzd955h929e9fygf/XgQMH9L7f1XHHxcWxAQMG6KwTGBjIpFIpa9++Pdu4caPF4xYSjXpJCCEiYFc1e0IIIfpRsieEEBGgZE8IISJAyZ4QQkSAkj0hhIgAJXtCCBEBSvaEECIClOwJIUQEKNkTQogIULInhBARoGRPCCEiQMme2K2bN2/Cx8cHqampmnmHDx+GVCrVGe6WEHtHA6ERu5abm4vhw4fj8OHD6Ny5MwIDAzFs2DCkp6cLHRohFkXJnti9hIQE7Nu3D8HBwThx4gSOHj0KmUwmdFiEWBQle2L3Hj16hB49euDKlSs4duwYevbsKXRIhFgc1eyJ3btw4QL+/PNPqFQqXLp0SehwCBEEHdkTuyaXyxESEoLAwEB07twZGRkZOHHiBLy8vIQOjRCLomRP7NqMGTOwdetW/Pbbb3B1dcWAAQPg7u6OnTt3Ch0aIRZFZRxit/Lz85GRkYFNmzbBzc0NDg4O2LRpE3788UesWbNG6PAIsSg6sieEEBGgI3tCCBEBSvaEECIClOwJIUQEKNkTQogIULInhBARoGRPCCEiQMmeEEJEgJI9IYSIACV7QggRAUr2hBAiApTsCSFEBCjZE0KICPw/yUlC5ckMIRYAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Predicted u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('Analytical u(x, y, t) - 2D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_analytical.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5962.262251,
   "end_time": "2025-02-25T01:53:03.272504",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-25T00:13:41.010253",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
