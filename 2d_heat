{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95b183de",
   "metadata": {
    "papermill": {
     "duration": 0.004161,
     "end_time": "2025-03-02T21:02:52.975987",
     "exception": false,
     "start_time": "2025-03-02T21:02:52.971826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bc6dcc38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:02:52.984555Z",
     "iopub.status.busy": "2025-03-02T21:02:52.984003Z",
     "iopub.status.idle": "2025-03-02T21:02:56.386974Z",
     "shell.execute_reply": "2025-03-02T21:02:56.386277Z"
    },
    "papermill": {
     "duration": 3.409343,
     "end_time": "2025-03-02T21:02:56.388899",
     "exception": false,
     "start_time": "2025-03-02T21:02:52.979556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b3043d72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:02:56.398111Z",
     "iopub.status.busy": "2025-03-02T21:02:56.397755Z",
     "iopub.status.idle": "2025-03-02T21:02:56.412760Z",
     "shell.execute_reply": "2025-03-02T21:02:56.411976Z"
    },
    "papermill": {
     "duration": 0.021509,
     "end_time": "2025-03-02T21:02:56.414354",
     "exception": false,
     "start_time": "2025-03-02T21:02:56.392845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "98009ffd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:02:56.421926Z",
     "iopub.status.busy": "2025-03-02T21:02:56.421632Z",
     "iopub.status.idle": "2025-03-02T21:02:56.425198Z",
     "shell.execute_reply": "2025-03-02T21:02:56.424560Z"
    },
    "papermill": {
     "duration": 0.008973,
     "end_time": "2025-03-02T21:02:56.426641",
     "exception": false,
     "start_time": "2025-03-02T21:02:56.417668",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3a80cc85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:02:56.434169Z",
     "iopub.status.busy": "2025-03-02T21:02:56.433930Z",
     "iopub.status.idle": "2025-03-02T21:02:56.513264Z",
     "shell.execute_reply": "2025-03-02T21:02:56.512363Z"
    },
    "papermill": {
     "duration": 0.084892,
     "end_time": "2025-03-02T21:02:56.514905",
     "exception": false,
     "start_time": "2025-03-02T21:02:56.430013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5b8b876",
   "metadata": {
    "papermill": {
     "duration": 0.003265,
     "end_time": "2025-03-02T21:02:56.521671",
     "exception": false,
     "start_time": "2025-03-02T21:02:56.518406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3be7bc13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:02:56.529701Z",
     "iopub.status.busy": "2025-03-02T21:02:56.529075Z",
     "iopub.status.idle": "2025-03-02T21:02:56.737918Z",
     "shell.execute_reply": "2025-03-02T21:02:56.737160Z"
    },
    "papermill": {
     "duration": 0.215122,
     "end_time": "2025-03-02T21:02:56.740122",
     "exception": false,
     "start_time": "2025-03-02T21:02:56.525000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d8c8edb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:02:56.751542Z",
     "iopub.status.busy": "2025-03-02T21:02:56.751265Z",
     "iopub.status.idle": "2025-03-02T21:02:58.084424Z",
     "shell.execute_reply": "2025-03-02T21:02:58.083215Z"
    },
    "papermill": {
     "duration": 1.34202,
     "end_time": "2025-03-02T21:02:58.087536",
     "exception": false,
     "start_time": "2025-03-02T21:02:56.745516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "04286573",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:02:58.102565Z",
     "iopub.status.busy": "2025-03-02T21:02:58.101786Z",
     "iopub.status.idle": "2025-03-02T21:02:58.106303Z",
     "shell.execute_reply": "2025-03-02T21:02:58.105368Z"
    },
    "papermill": {
     "duration": 0.012985,
     "end_time": "2025-03-02T21:02:58.108608",
     "exception": false,
     "start_time": "2025-03-02T21:02:58.095623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "67bb05be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:02:58.124987Z",
     "iopub.status.busy": "2025-03-02T21:02:58.123520Z",
     "iopub.status.idle": "2025-03-02T21:30:30.962588Z",
     "shell.execute_reply": "2025-03-02T21:30:30.961648Z"
    },
    "papermill": {
     "duration": 1652.849364,
     "end_time": "2025-03-02T21:30:30.964878",
     "exception": false,
     "start_time": "2025-03-02T21:02:58.115514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/3000 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 3000/3000 [27:32<00:00,  1.82it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(3000)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc =  torch.mean((u_bc_x_min) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 4* torch.mean((bc_y_max-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 100*loss_res + 5*loss_ic + 10*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "60c647dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:30:31.226622Z",
     "iopub.status.busy": "2025-03-02T21:30:31.226323Z",
     "iopub.status.idle": "2025-03-02T21:30:31.241482Z",
     "shell.execute_reply": "2025-03-02T21:30:31.240643Z"
    },
    "papermill": {
     "duration": 0.147507,
     "end_time": "2025-03-02T21:30:31.243135",
     "exception": false,
     "start_time": "2025-03-02T21:30:31.095628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000097, Loss_IC: 0.054955, loss_bc: 0.012969\n",
      "Train Loss: 0.068022\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fc5e8f4",
   "metadata": {
    "papermill": {
     "duration": 0.127938,
     "end_time": "2025-03-02T21:30:31.498252",
     "exception": false,
     "start_time": "2025-03-02T21:30:31.370314",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a32ef07e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:30:31.754163Z",
     "iopub.status.busy": "2025-03-02T21:30:31.753883Z",
     "iopub.status.idle": "2025-03-02T21:30:31.757678Z",
     "shell.execute_reply": "2025-03-02T21:30:31.756894Z"
    },
    "papermill": {
     "duration": 0.134193,
     "end_time": "2025-03-02T21:30:31.759245",
     "exception": false,
     "start_time": "2025-03-02T21:30:31.625052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# #optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9a471369",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:30:32.053363Z",
     "iopub.status.busy": "2025-03-02T21:30:32.052703Z",
     "iopub.status.idle": "2025-03-02T21:30:32.059046Z",
     "shell.execute_reply": "2025-03-02T21:30:32.058016Z"
    },
    "papermill": {
     "duration": 0.173214,
     "end_time": "2025-03-02T21:30:32.060683",
     "exception": false,
     "start_time": "2025-03-02T21:30:31.887469",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(600)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c841afff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:30:32.317818Z",
     "iopub.status.busy": "2025-03-02T21:30:32.317475Z",
     "iopub.status.idle": "2025-03-02T21:30:32.330972Z",
     "shell.execute_reply": "2025-03-02T21:30:32.330088Z"
    },
    "papermill": {
     "duration": 0.142872,
     "end_time": "2025-03-02T21:30:32.332562",
     "exception": false,
     "start_time": "2025-03-02T21:30:32.189690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 14.882813\n",
      "Train Loss: 15.565549\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "62e34f47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:30:32.587134Z",
     "iopub.status.busy": "2025-03-02T21:30:32.586565Z",
     "iopub.status.idle": "2025-03-02T21:30:32.598623Z",
     "shell.execute_reply": "2025-03-02T21:30:32.597744Z"
    },
    "papermill": {
     "duration": 0.141178,
     "end_time": "2025-03-02T21:30:32.600175",
     "exception": false,
     "start_time": "2025-03-02T21:30:32.458997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000097, Loss_IC: 0.054955, loss_bc: 0.012969\n",
      "Train Loss: 0.068022\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9133a32c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:30:32.856505Z",
     "iopub.status.busy": "2025-03-02T21:30:32.855999Z",
     "iopub.status.idle": "2025-03-02T21:30:33.166908Z",
     "shell.execute_reply": "2025-03-02T21:30:33.166141Z"
    },
    "papermill": {
     "duration": 0.441648,
     "end_time": "2025-03-02T21:30:33.168666",
     "exception": false,
     "start_time": "2025-03-02T21:30:32.727018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7a122676",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:30:33.424970Z",
     "iopub.status.busy": "2025-03-02T21:30:33.424660Z",
     "iopub.status.idle": "2025-03-02T21:30:33.428177Z",
     "shell.execute_reply": "2025-03-02T21:30:33.427518Z"
    },
    "papermill": {
     "duration": 0.132596,
     "end_time": "2025-03-02T21:30:33.429601",
     "exception": false,
     "start_time": "2025-03-02T21:30:33.297005",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "76f2c0b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T21:30:33.683964Z",
     "iopub.status.busy": "2025-03-02T21:30:33.683640Z",
     "iopub.status.idle": "2025-03-02T21:30:34.721649Z",
     "shell.execute_reply": "2025-03-02T21:30:34.720987Z"
    },
    "papermill": {
     "duration": 1.167489,
     "end_time": "2025-03-02T21:30:34.723453",
     "exception": false,
     "start_time": "2025-03-02T21:30:33.555964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1665.478352,
   "end_time": "2025-03-02T21:30:36.011649",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-02T21:02:50.533297",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
