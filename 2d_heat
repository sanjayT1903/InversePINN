{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0132fb78",
   "metadata": {
    "papermill": {
     "duration": 0.004372,
     "end_time": "2025-03-08T04:40:37.687384",
     "exception": false,
     "start_time": "2025-03-08T04:40:37.683012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "47fccdec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:40:37.696758Z",
     "iopub.status.busy": "2025-03-08T04:40:37.695926Z",
     "iopub.status.idle": "2025-03-08T04:40:41.193673Z",
     "shell.execute_reply": "2025-03-08T04:40:41.192907Z"
    },
    "papermill": {
     "duration": 3.504787,
     "end_time": "2025-03-08T04:40:41.195831",
     "exception": false,
     "start_time": "2025-03-08T04:40:37.691044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "# os.environ['XLA_USE_BF16']=\"1\"\n",
    "# os.environ['XLA_TENSOR_ALLOCATOR_MAXSIZE'] = '100000000'\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "# # for TPU\n",
    "# import torch_xla as xla\n",
    "# import torch_xla.core.xla_model as xm\n",
    "# import torch_xla.runtime as xmR\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b3e02a03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:40:41.204890Z",
     "iopub.status.busy": "2025-03-08T04:40:41.204483Z",
     "iopub.status.idle": "2025-03-08T04:40:41.220640Z",
     "shell.execute_reply": "2025-03-08T04:40:41.219858Z"
    },
    "papermill": {
     "duration": 0.022371,
     "end_time": "2025-03-08T04:40:41.222227",
     "exception": false,
     "start_time": "2025-03-08T04:40:41.199856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(3, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, y, t):\n",
    "        src = torch.cat((x,y,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "44d4df48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:40:41.230699Z",
     "iopub.status.busy": "2025-03-08T04:40:41.230434Z",
     "iopub.status.idle": "2025-03-08T04:40:41.234375Z",
     "shell.execute_reply": "2025-03-08T04:40:41.233496Z"
    },
    "papermill": {
     "duration": 0.00989,
     "end_time": "2025-03-08T04:40:41.235966",
     "exception": false,
     "start_time": "2025-03-08T04:40:41.226076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "dim = 37\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c184e21c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:40:41.243996Z",
     "iopub.status.busy": "2025-03-08T04:40:41.243720Z",
     "iopub.status.idle": "2025-03-08T04:40:41.308872Z",
     "shell.execute_reply": "2025-03-08T04:40:41.307886Z"
    },
    "papermill": {
     "duration": 0.070848,
     "end_time": "2025-03-08T04:40:41.310508",
     "exception": false,
     "start_time": "2025-03-08T04:40:41.239660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "dim=23\n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a30d0e15",
   "metadata": {
    "papermill": {
     "duration": 0.003538,
     "end_time": "2025-03-08T04:40:41.318245",
     "exception": false,
     "start_time": "2025-03-08T04:40:41.314707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f1a383bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:40:41.327288Z",
     "iopub.status.busy": "2025-03-08T04:40:41.326668Z",
     "iopub.status.idle": "2025-03-08T04:40:41.547841Z",
     "shell.execute_reply": "2025-03-08T04:40:41.547066Z"
    },
    "papermill": {
     "duration": 0.228054,
     "end_time": "2025-03-08T04:40:41.549922",
     "exception": false,
     "start_time": "2025-03-08T04:40:41.321868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data_3d([0, 1],[0, 1], [0.0,1],dim, dim,dim)\n",
    "\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=2, step=step_size)\n",
    "b_left = make_time_sequence(b_left, num_step=2, step=step_size)\n",
    "b_right = make_time_sequence(b_right, num_step=2, step=step_size)\n",
    "b_upper = make_time_sequence(b_upper, num_step=2, step=step_size)\n",
    "b_lower = make_time_sequence(b_lower, num_step=2, step=step_size)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "# Extract the (x, y, t) components\n",
    "x_res, y_res, t_res = res[:, :, 0:1], res[:, :, 1:2], res[:, :, 2:3]\n",
    "x_left, y_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2], b_left[:, :, 2:3]\n",
    "x_right, y_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2], b_right[:, :, 2:3]\n",
    "x_upper, y_upper, t_upper = b_upper[:, :, 0:1], b_upper[:, :, 1:2], b_upper[:, :, 2:3]\n",
    "x_lower, y_lower, t_lower = b_lower[:, :, 0:1], b_lower[:, :, 1:2], b_lower[:, :, 2:3]\n",
    "\n",
    "# print(t_left)\n",
    "# print(t_right)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9c96bee4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:40:41.561195Z",
     "iopub.status.busy": "2025-03-08T04:40:41.560346Z",
     "iopub.status.idle": "2025-03-08T04:40:42.874666Z",
     "shell.execute_reply": "2025-03-08T04:40:42.873537Z"
    },
    "papermill": {
     "duration": 1.322523,
     "end_time": "2025-03-08T04:40:42.877351",
     "exception": false,
     "start_time": "2025-03-08T04:40:41.554828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=3, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453593\n",
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "model.to(device)\n",
    "#optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#Need to save model parameters before procesing -> keep attention layers in memory etc\n",
    "optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))\n",
    "print(next(model.parameters()).device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "da6faa57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:40:42.887323Z",
     "iopub.status.busy": "2025-03-08T04:40:42.886600Z",
     "iopub.status.idle": "2025-03-08T04:40:42.890279Z",
     "shell.execute_reply": "2025-03-08T04:40:42.889508Z"
    },
    "papermill": {
     "duration": 0.010406,
     "end_time": "2025-03-08T04:40:42.891882",
     "exception": false,
     "start_time": "2025-03-08T04:40:42.881476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import gc\n",
    "#print(t_upper)\n",
    "# model.cpu()\n",
    "# del model\n",
    "# gc.collect()\n",
    "# torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "df8c245f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:40:42.900641Z",
     "iopub.status.busy": "2025-03-08T04:40:42.900380Z",
     "iopub.status.idle": "2025-03-08T04:51:56.295602Z",
     "shell.execute_reply": "2025-03-08T04:51:56.294371Z"
    },
    "papermill": {
     "duration": 673.402078,
     "end_time": "2025-03-08T04:51:56.297760",
     "exception": false,
     "start_time": "2025-03-08T04:40:42.895682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of res: torch.Size([12167, 2, 3])\n",
      "Shape of b_left: torch.Size([483, 2, 3])\n",
      "Shape of b_right: torch.Size([483, 2, 3])\n",
      "Shape of b_upper: torch.Size([483, 2, 3])\n",
      "Shape of b_lower: torch.Size([483, 2, 3])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1200 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      "100%|██████████| 1200/1200 [11:13<00:00,  1.78it/s]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "teck = []\n",
    "print(\"Shape of res:\", res.shape)\n",
    "print(\"Shape of b_left:\", b_left.shape)\n",
    "print(\"Shape of b_right:\", b_right.shape)\n",
    "print(\"Shape of b_upper:\", b_upper.shape)\n",
    "print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# a = 0.4  # Thermal diffusivity\n",
    "# L = 1  # Length of the bar\n",
    "# n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "# t_ic = torch.zeros_like(x_res)\n",
    "# bc_help = torch.ones_like(x_res)\n",
    "for i in tqdm(range(1200)):\n",
    "    k+=1\n",
    "\n",
    "    def closure():\n",
    "        \n",
    "        t_ic = torch.zeros_like(t_res, device=device)\n",
    "        bc_help = torch.ones_like(x_res, device=device)\n",
    "        bc_zero = torch.zeros_like(x_res, device=device)\n",
    "        #print(t_non_zero)\n",
    "        # Forward pass to calculate predictions\n",
    "        pred_res = model(x_res, y_res, t_res)\n",
    "        pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "        # print(x_res.shape)\n",
    "        # print(y_res.shape)\n",
    "        # print(t_ic[:,0].shape)\n",
    "        # print(t_ic.shape)\n",
    "        # Calculate boundary condition predictions without tracking gradients\n",
    "        #print(t_upper)\n",
    "        bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "        # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "        bc_y_min = model(x_lower, y_lower, t_lower)  # (x, 0, t)\n",
    "        \n",
    "        # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "        bc_x_min = model(x_left, y_left, t_left)  # (0, y, t)\n",
    "        \n",
    "        # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "        bc_x_max = model(x_right, y_right, t_right)  # (1, y, t)\n",
    "        \n",
    "        u_bc_x_max = torch.autograd.grad(\n",
    "            bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "\n",
    "        u_bc_x_min = torch.autograd.grad(\n",
    "            bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_min = torch.autograd.grad(\n",
    "            bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        \n",
    "        u_bc_y_max = torch.autograd.grad(\n",
    "            bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "            retain_graph=True, create_graph=True, allow_unused=True\n",
    "        )[0]\n",
    "        #print(u_bc_x_max)\n",
    "        #print(bc_x_max)\n",
    "        #if k == 1: \n",
    "                #print(bc_x_min)\n",
    "\n",
    "        # Derivatives for the PDE residual\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Residual loss for the 2D heat equation\n",
    "        alpha = a\n",
    "        loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "        # Initial condition loss\n",
    "        loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "        # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "        loss_bc =  torch.mean((u_bc_x_min) ** 2) + torch.mean((u_bc_x_max ) ** 2)   + torch.mean((u_bc_y_min)**2) \n",
    "        loss_bc += 4* torch.mean((bc_y_max-1) ** 2)\n",
    "        #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "        #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 60*loss_res + 5*loss_ic + 10*loss_bc \n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "456b6303",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:51:56.432942Z",
     "iopub.status.busy": "2025-03-08T04:51:56.431937Z",
     "iopub.status.idle": "2025-03-08T04:51:56.451727Z",
     "shell.execute_reply": "2025-03-08T04:51:56.450614Z"
    },
    "papermill": {
     "duration": 0.087322,
     "end_time": "2025-03-08T04:51:56.453620",
     "exception": false,
     "start_time": "2025-03-08T04:51:56.366298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000395, Loss_IC: 0.078075, loss_bc: 0.014266\n",
      "Train Loss: 0.092736\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ce4e204",
   "metadata": {
    "papermill": {
     "duration": 0.061608,
     "end_time": "2025-03-08T04:51:56.578645",
     "exception": false,
     "start_time": "2025-03-08T04:51:56.517037",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5f774d4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:51:56.700674Z",
     "iopub.status.busy": "2025-03-08T04:51:56.700308Z",
     "iopub.status.idle": "2025-03-08T04:51:56.704784Z",
     "shell.execute_reply": "2025-03-08T04:51:56.703824Z"
    },
    "papermill": {
     "duration": 0.066995,
     "end_time": "2025-03-08T04:51:56.706624",
     "exception": false,
     "start_time": "2025-03-08T04:51:56.639629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2)\n",
    "\n",
    "# # Load saved parameters\n",
    "# model.load_state_dict(torch.load(\"./1dreaction_pinnsformer.pt\", map_location=device))\n",
    "\n",
    "# # Move model to the correct device\n",
    "# model.to(device)\n",
    "# #optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9254496b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:51:56.827941Z",
     "iopub.status.busy": "2025-03-08T04:51:56.827268Z",
     "iopub.status.idle": "2025-03-08T04:51:56.834428Z",
     "shell.execute_reply": "2025-03-08T04:51:56.833443Z"
    },
    "papermill": {
     "duration": 0.071098,
     "end_time": "2025-03-08T04:51:56.836302",
     "exception": false,
     "start_time": "2025-03-08T04:51:56.765204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# #print(x_res)\n",
    "\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "# teck = []\n",
    "# print(\"Shape of res:\", res.shape)\n",
    "# print(\"Shape of b_left:\", b_left.shape)\n",
    "# print(\"Shape of b_right:\", b_right.shape)\n",
    "# print(\"Shape of b_upper:\", b_upper.shape)\n",
    "# print(\"Shape of b_lower:\", b_lower.shape)\n",
    "# # a = 0.4  # Thermal diffusivity\n",
    "# # L = 1  # Length of the bar\n",
    "# # n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# k= 0 \n",
    "# # t_ic = torch.zeros_like(x_res)\n",
    "# # bc_help = torch.ones_like(x_res)\n",
    "# for i in tqdm(range(600)):\n",
    "#     k+=1\n",
    "\n",
    "#     def closure():\n",
    "        \n",
    "#         t_ic = torch.zeros_like(t_res, device=device)\n",
    "#         bc_help = torch.ones_like(x_res, device=device)\n",
    "#         bc_zero = torch.zeros_like(x_res, device=device)\n",
    "#         #print(t_non_zero)\n",
    "#         # Forward pass to calculate predictions\n",
    "#         pred_res = model(x_res, y_res, t_res)\n",
    "#         pred_ic = model(x_res, y_res, t_ic)\n",
    "\n",
    "        \n",
    "#         # print(x_res.shape)\n",
    "#         # print(y_res.shape)\n",
    "#         # print(t_ic[:,0].shape)\n",
    "#         # print(t_ic.shape)\n",
    "#         # Calculate boundary condition predictions without tracking gradients\n",
    "#         #print(t_upper)\n",
    "#         bc_y_max = model(x_upper, y_upper, t_upper)  # (x, 1, t)\n",
    "\n",
    "#         # Boundary conditions for x_max (fixed x = L, variable y and t)\n",
    "#         bc_y_min = model(x_lower, y_lower, t_lower)  # (L, y, t)\n",
    "        \n",
    "#         # Boundary conditions for y_min (fixed y = 0, variable x and t)\n",
    "#         bc_x_min = model(x_left, y_left, t_left)  # (x, 0, t)\n",
    "        \n",
    "#         # Boundary conditions for x_min (fixed x = 0, variable y and t)\n",
    "#         bc_x_max = model(x_right, y_right, t_right)  # (0, y, t)\n",
    "        \n",
    "#         u_bc_x_max = torch.autograd.grad(\n",
    "#             bc_x_max, x_right, grad_outputs=torch.ones_like(bc_x_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "\n",
    "#         u_bc_x_min = torch.autograd.grad(\n",
    "#             bc_x_min, x_left, grad_outputs=torch.ones_like(bc_x_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_min = torch.autograd.grad(\n",
    "#             bc_y_min, y_lower, grad_outputs=torch.ones_like(bc_y_min, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "        \n",
    "#         u_bc_y_max = torch.autograd.grad(\n",
    "#             bc_y_max, y_upper, grad_outputs=torch.ones_like(bc_y_max, device=device),\n",
    "#             retain_graph=True, create_graph=True, allow_unused=True\n",
    "#         )[0]\n",
    "#         #print(u_bc_x_max)\n",
    "#         #print(bc_x_max)\n",
    "#         #if k == 1: \n",
    "#                 #print(bc_x_min)\n",
    "\n",
    "#         # Derivatives for the PDE residual\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_y = torch.autograd.grad(pred_res, y_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_yy = torch.autograd.grad(u_y, y_res, grad_outputs=torch.ones_like(u_y, device=device), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res, device=device), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Residual loss for the 2D heat equation\n",
    "#         alpha = a\n",
    "#         loss_res = torch.mean((u_t - alpha * (u_xx + u_yy)) ** 2)\n",
    "        \n",
    "#         # Initial condition loss\n",
    "#         loss_ic = torch.mean(pred_ic ** 2)\n",
    "        \n",
    "#         # Boundary condition loss calculated without gradient tracking\n",
    "        \n",
    "#         loss_bc = torch.mean((u_bc_y_max) ** 2) + torch.mean((u_bc_x_max ) ** 2) + torch.mean((u_bc_y_min)**2) \n",
    "#         loss_bc += 100* torch.mean((bc_x_min-1) ** 2)\n",
    "#         #teck.append(torch.mean((bc_x_min-1) ** 2))\n",
    "        \n",
    "      \n",
    "#         #loss_bc_heat = torch.mean( (bc_x_min-1) ** 2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 30*loss_res + 10*loss_ic + 3*loss_bc \n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "#         return loss\n",
    "\n",
    "#     optim.step(closure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "20c59a33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:51:56.961330Z",
     "iopub.status.busy": "2025-03-08T04:51:56.960949Z",
     "iopub.status.idle": "2025-03-08T04:51:56.976275Z",
     "shell.execute_reply": "2025-03-08T04:51:56.975215Z"
    },
    "papermill": {
     "duration": 0.079189,
     "end_time": "2025-03-08T04:51:56.978245",
     "exception": false,
     "start_time": "2025-03-08T04:51:56.899056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.023972, Loss_IC: 0.658763, loss_bc: 14.882813\n",
      "Train Loss: 15.565549\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[0][0], loss_track[0][1], loss_track[0][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[0])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3f5ff8cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:51:57.102376Z",
     "iopub.status.busy": "2025-03-08T04:51:57.101151Z",
     "iopub.status.idle": "2025-03-08T04:51:57.117005Z",
     "shell.execute_reply": "2025-03-08T04:51:57.115925Z"
    },
    "papermill": {
     "duration": 0.078971,
     "end_time": "2025-03-08T04:51:57.118836",
     "exception": false,
     "start_time": "2025-03-08T04:51:57.039865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000395, Loss_IC: 0.078075, loss_bc: 0.014266\n",
      "Train Loss: 0.092736\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')\n",
    "#print(teck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a2faea42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:51:57.241568Z",
     "iopub.status.busy": "2025-03-08T04:51:57.240861Z",
     "iopub.status.idle": "2025-03-08T04:51:57.612990Z",
     "shell.execute_reply": "2025-03-08T04:51:57.611917Z"
    },
    "papermill": {
     "duration": 0.435519,
     "end_time": "2025-03-08T04:51:57.614810",
     "exception": false,
     "start_time": "2025-03-08T04:51:57.179291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "32d60985",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:51:57.744242Z",
     "iopub.status.busy": "2025-03-08T04:51:57.743498Z",
     "iopub.status.idle": "2025-03-08T04:51:57.747894Z",
     "shell.execute_reply": "2025-03-08T04:51:57.746990Z"
    },
    "papermill": {
     "duration": 0.071198,
     "end_time": "2025-03-08T04:51:57.749677",
     "exception": false,
     "start_time": "2025-03-08T04:51:57.678479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(torch.cuda.memory_summary(device=device))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8fdd1fc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-08T04:51:57.876809Z",
     "iopub.status.busy": "2025-03-08T04:51:57.876368Z",
     "iopub.status.idle": "2025-03-08T04:51:59.113313Z",
     "shell.execute_reply": "2025-03-08T04:51:59.112302Z"
    },
    "papermill": {
     "duration": 1.302099,
     "end_time": "2025-03-08T04:51:59.115074",
     "exception": false,
     "start_time": "2025-03-08T04:51:57.812975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "L=1\n",
    "dim = 51\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], dim, dim, dim) #dim\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=2, step=1e-3) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "x_test, y_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2], res_test[:,:,2:3]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, y_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 19x19x19 grid (space and time)\n",
    "pred = pred.reshape(dim, dim, dim)\n",
    "\n",
    "# Define analytical solution for the 2D heat equation\n",
    "# u(x, y, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L) * sin(m * pi * y / L)\n",
    "def u_ana(x, y, t, alpha=0.4, L=1, n=1, m=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L) * np.sin(m * np.pi * y / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data_3d([0, L], [0, L], [0, 1], 101, 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the 2D heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1], res_test[:,2])\n",
    "\n",
    "# Reshape the analytical solution to fit the 19x19x19 grid\n",
    "u = u.reshape(101, 101, 101)\n",
    "\n",
    "# # Compute relative errors (L1 and L2)\n",
    "# rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "# rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "# print('Relative L1 error: {:4f}'.format(rl1))\n",
    "# print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x, y, t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 1], extent=[0, L, 0, 1], aspect='auto', cmap='hot')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=1')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred[:, :, 0], extent=[0, L, 0, 1], aspect='auto', cmap='hot')  # Fix one time step for visualization\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.title('2D Heat t=0')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./2dheat_pinnsformer_pred_2.png')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 685.499249,
   "end_time": "2025-03-08T04:52:00.599246",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-08T04:40:35.099997",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
