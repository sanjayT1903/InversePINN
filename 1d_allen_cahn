{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":194069625,"sourceType":"kernelVersion"}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport torch\nimport torch.nn as nn\nimport matplotlib.pyplot as plt\nimport random\nfrom torch.optim import LBFGS\nfrom tqdm import tqdm\n\nfrom utility_py import *\n\nclass PINNs(nn.Module):\n    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n        super(PINNs, self).__init__()\n\n        layers = []\n        for i in range(num_layer-1):\n            if i == 0:\n                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n                layers.append(nn.Tanh())\n            else:\n                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n                layers.append(nn.Tanh())\n\n        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n\n        self.linear = nn.Sequential(*layers)\n\n    def forward(self, x, t):\n        src = torch.cat((x,t), dim=-1)\n        return self.linear(src)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-05T22:44:03.873892Z","iopub.execute_input":"2024-10-05T22:44:03.874318Z","iopub.status.idle":"2024-10-05T22:44:03.884007Z","shell.execute_reply.started":"2024-10-05T22:44:03.874266Z","shell.execute_reply":"2024-10-05T22:44:03.882973Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"# implementation of PINNsformer\n# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n# link: https://arxiv.org/abs/2307.11833\n# @article{zhao2023pinnsformer,\n#   title={PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks},\n#   author={Zhao, Leo Zhiyuan and Ding, Xueying and Prakash, B Aditya},\n#   journal={arXiv preprint arXiv:2307.11833},\n#   year={2023}\n# }\n\nimport pdb\n\n#from utility_py import get_clones\n\nclass WaveAct(nn.Module):\n    def __init__(self):\n        super(WaveAct, self).__init__() \n        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n\n    def forward(self, x):\n        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n\nclass FeedForward(nn.Module):\n    def __init__(self, d_model, d_ff=256):\n        super(FeedForward, self).__init__() \n        self.linear = nn.Sequential(*[\n            nn.Linear(d_model, d_ff),\n            WaveAct(),\n            nn.Linear(d_ff, d_ff),\n            WaveAct(),\n            nn.Linear(d_ff, d_model)\n        ])\n\n    def forward(self, x):\n        return self.linear(x)\n\n\nclass EncoderLayer(nn.Module):\n    def __init__(self, d_model, heads):\n        super(EncoderLayer, self).__init__()\n\n        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n        self.ff = FeedForward(d_model)\n        self.act1 = WaveAct()\n        self.act2 = WaveAct()\n        \n    def forward(self, x):\n        x2 = self.act1(x)\n        # pdb.set_trace()\n        x = x + self.attn(x2,x2,x2)[0]\n        x2 = self.act2(x)\n        x = x + self.ff(x2)\n        return x\n\n\nclass DecoderLayer(nn.Module):\n    def __init__(self, d_model, heads):\n        super(DecoderLayer, self).__init__()\n\n        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n        self.ff = FeedForward(d_model)\n        self.act1 = WaveAct()\n        self.act2 = WaveAct()\n\n    def forward(self, x, e_outputs): \n        x2 = self.act1(x)\n        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n        x2 = self.act2(x)\n        x = x + self.ff(x2)\n        return x\n\n\nclass Encoder(nn.Module):\n    def __init__(self, d_model, N, heads):\n        super(Encoder, self).__init__()\n        self.N = N\n        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n        self.act = WaveAct()\n\n    def forward(self, x):\n        for i in range(self.N):\n            x = self.layers[i](x)\n        return self.act(x)\n\nclass Decoder(nn.Module):\n    def __init__(self, d_model, N, heads):\n        super(Decoder, self).__init__()\n        self.N = N\n        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n        self.act = WaveAct()\n        \n    def forward(self, x, e_outputs):\n        for i in range(self.N):\n            x = self.layers[i](x, e_outputs)\n        return self.act(x)\n\n\n\nclass PINNsformer(nn.Module):\n    def __init__(self, d_out, d_model, d_hidden, N, heads):\n        super(PINNsformer, self).__init__()\n\n        self.linear_emb = nn.Linear(2, d_model)\n\n        self.encoder = Encoder(d_model, N, heads)\n        self.decoder = Decoder(d_model, N, heads)\n        self.linear_out = nn.Sequential(*[\n            nn.Linear(d_model, d_hidden),\n            WaveAct(),\n            nn.Linear(d_hidden, d_hidden),\n            WaveAct(),\n            nn.Linear(d_hidden, d_out)\n        ])\n\n    def forward(self, x, t):\n        src = torch.cat((x,t), dim=-1)\n        src = self.linear_emb(src)\n\n        e_outputs = self.encoder(src)\n        d_output = self.decoder(src, e_outputs)\n        output = self.linear_out(d_output)\n        # pdb.set_trace()\n        # raise Exception('stop')\n        return output","metadata":{"execution":{"iopub.status.busy":"2024-10-05T22:44:03.888908Z","iopub.execute_input":"2024-10-05T22:44:03.889222Z","iopub.status.idle":"2024-10-05T22:44:03.912894Z","shell.execute_reply.started":"2024-10-05T22:44:03.889189Z","shell.execute_reply":"2024-10-05T22:44:03.911899Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"gamma_2_AC = 4\ngamma_1 = 0.0001\n","metadata":{"execution":{"iopub.status.busy":"2024-10-05T22:44:03.915069Z","iopub.execute_input":"2024-10-05T22:44:03.915426Z","iopub.status.idle":"2024-10-05T22:44:03.929629Z","shell.execute_reply.started":"2024-10-05T22:44:03.915393Z","shell.execute_reply":"2024-10-05T22:44:03.928475Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"seed = 1\nnp.random.seed(seed)\nrandom.seed(seed)\ntorch.manual_seed(seed)\ntorch.cuda.manual_seed(seed)\ntorch.cuda.is_available() \n\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\nprint(device)\nstep_size = 1e-4","metadata":{"execution":{"iopub.status.busy":"2024-10-05T22:44:03.930832Z","iopub.execute_input":"2024-10-05T22:44:03.931110Z","iopub.status.idle":"2024-10-05T22:44:03.941088Z","shell.execute_reply.started":"2024-10-05T22:44:03.931078Z","shell.execute_reply":"2024-10-05T22:44:03.940269Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"cuda:0\n","output_type":"stream"}]},{"cell_type":"code","source":"\nres, b_left, b_right, b_upper, b_lower = get_data([-1, 1], [0, 1], 51, 51)\nres_test, _, _, _, _ = get_data([-1, 1], [0, 1], 101, 101)\n\n# Define the initial condition for u(x, 0)\n#def u_init(x):\n   \n    #return np.sin(n * np.pi * x / L)\n#print(res[:, 0])\n\n# Apply the initial condition to the spatial points at t=0\n#init_cond = u_init(res[:, 0])  # Assuming t=0 corresponds to the first time point\n\n# Extend time sequence\nres = make_time_sequence(res, num_step=5, step=1e-4)\nb_left = make_time_sequence(b_left, num_step=5, step=1e-4)\nb_right = make_time_sequence(b_right, num_step=5, step=1e-4)\nb_upper = make_time_sequence(b_upper, num_step=5, step=1e-4)\nb_lower = make_time_sequence(b_lower, num_step=5, step=1e-4)\nres_test = make_time_sequence(res_test, num_step=5, step=1e-4)\nres_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n\n# Convert to PyTorch tensors\nres = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\nb_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\nb_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\nb_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\nb_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n\n# Initial condition as tensor\n#init_cond = torch.tensor(init_cond, dtype=torch.float32).to(device)\n\n# Separate spatial (x) and temporal (t) components\nx_res, t_res = res[:, :, 0:1], res[:, :, 1:2]\nx_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2]\nx_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2]\nx_upper, t_upper = b_upper[:,:,0:1], b_upper[:,:,1:2]\nx_lower, t_lower = b_lower[:,:,0:1], b_lower[:,:,1:2]\n\n\n# Initialize model weights\ndef init_weights(m):\n    if isinstance(m, nn.Linear):\n        torch.nn.init.xavier_uniform_(m.weight)\n        m.bias.data.fill_(0.01)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-05T22:44:03.942223Z","iopub.execute_input":"2024-10-05T22:44:03.942564Z","iopub.status.idle":"2024-10-05T22:44:03.959454Z","shell.execute_reply.started":"2024-10-05T22:44:03.942530Z","shell.execute_reply":"2024-10-05T22:44:03.958660Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\nimport torch.optim as optimer\nmodel.apply(init_weights)\noptim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n#optim = optimer.Adam(model.parameters(), lr=1e-4)\n\nprint(model)\nprint(get_n_params(model))","metadata":{"execution":{"iopub.status.busy":"2024-10-05T22:44:03.962597Z","iopub.execute_input":"2024-10-05T22:44:03.963402Z","iopub.status.idle":"2024-10-05T22:44:03.986938Z","shell.execute_reply.started":"2024-10-05T22:44:03.963367Z","shell.execute_reply":"2024-10-05T22:44:03.986005Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"PINNsformer(\n  (linear_emb): Linear(in_features=2, out_features=32, bias=True)\n  (encoder): Encoder(\n    (layers): ModuleList(\n      (0): EncoderLayer(\n        (attn): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n        )\n        (ff): FeedForward(\n          (linear): Sequential(\n            (0): Linear(in_features=32, out_features=256, bias=True)\n            (1): WaveAct()\n            (2): Linear(in_features=256, out_features=256, bias=True)\n            (3): WaveAct()\n            (4): Linear(in_features=256, out_features=32, bias=True)\n          )\n        )\n        (act1): WaveAct()\n        (act2): WaveAct()\n      )\n    )\n    (act): WaveAct()\n  )\n  (decoder): Decoder(\n    (layers): ModuleList(\n      (0): DecoderLayer(\n        (attn): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n        )\n        (ff): FeedForward(\n          (linear): Sequential(\n            (0): Linear(in_features=32, out_features=256, bias=True)\n            (1): WaveAct()\n            (2): Linear(in_features=256, out_features=256, bias=True)\n            (3): WaveAct()\n            (4): Linear(in_features=256, out_features=32, bias=True)\n          )\n        )\n        (act1): WaveAct()\n        (act2): WaveAct()\n      )\n    )\n    (act): WaveAct()\n  )\n  (linear_out): Sequential(\n    (0): Linear(in_features=32, out_features=512, bias=True)\n    (1): WaveAct()\n    (2): Linear(in_features=512, out_features=512, bias=True)\n    (3): WaveAct()\n    (4): Linear(in_features=512, out_features=1, bias=True)\n  )\n)\n453561\n","output_type":"stream"}]},{"cell_type":"code","source":"def get_minibatch(data, batch_index, num_batches=1):\n    \"\"\"\n    Splits the data into `num_batches` parts and returns the part corresponding to `batch_index`.\n    \n    Args:\n    - data: Tensor of shape (N, *, *) where N is the number of data points (could be res, b_left, b_right, etc.)\n    - batch_index: Index of the batch to return (between 0 and num_batches-1)\n    - num_batches: Total number of batches to split the data into (default: 5)\n\n    Returns:\n    - A subset of the data corresponding to the specified batch.\n    \"\"\"\n    total_size = data.size(0)\n    batch_size = total_size // num_batches\n    start_idx = batch_index * batch_size\n    end_idx = start_idx + batch_size\n\n    # Ensure we get all remaining data for the last batch\n    if batch_index == num_batches - 1:\n        end_idx = total_size\n\n    return data[start_idx:end_idx]","metadata":{"execution":{"iopub.status.busy":"2024-10-05T22:44:03.988101Z","iopub.execute_input":"2024-10-05T22:44:03.988469Z","iopub.status.idle":"2024-10-05T22:44:03.994432Z","shell.execute_reply.started":"2024-10-05T22:44:03.988427Z","shell.execute_reply":"2024-10-05T22:44:03.993664Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"#print(x_res)\nimport random \nlist1 = [0]\nrandom.choice(list1)\ndef check_nan(tensor, name):\n    if torch.isnan(tensor).any():\n        print(f\"NaNs detected in {name}\")\nloss_track = []\n\n#t_ic = torch.zeros_like(x_right_batch)\nk=0\nbatch_index = 0\nx_res_batch = get_minibatch(x_res, batch_index)\nt_res_batch = get_minibatch(t_res, batch_index)\n\nx_left_batch = get_minibatch(x_left, batch_index)\nt_left_batch = get_minibatch(t_left, batch_index)\nx_right_batch = get_minibatch(x_right, batch_index)            \nt_right_batch = get_minibatch(t_right, batch_index)\n            \nx_upper_batch = get_minibatch(x_upper, batch_index)\nt_upper_batch = get_minibatch(t_upper, batch_index)\nx_lower_batch = get_minibatch(x_lower, batch_index)\nt_lower_batch = get_minibatch(t_lower, batch_index)\nt_ic = torch.zeros_like(x_right_batch)\nfor i in tqdm(range(1500)):\n    k+=1\n    if k == 200:\n        \n#             batch_index = random.choice(list1)\n#             print(batch_index)\n#             batch_index +=1\n#             x_res_batch = get_minibatch(x_res, batch_index)\n#             t_res_batch = get_minibatch(t_res, batch_index)\n\n#             x_left_batch = get_minibatch(x_left, batch_index)\n#             t_left_batch = get_minibatch(t_left, batch_index)\n#             x_right_batch = get_minibatch(x_right, batch_index)            \n#             t_right_batch = get_minibatch(t_right, batch_index)\n\n#             x_upper_batch = get_minibatch(x_upper, batch_index)\n#             t_upper_batch = get_minibatch(t_upper, batch_index)\n#             x_lower_batch = get_minibatch(x_lower, batch_index)\n#             t_lower_batch = get_minibatch(t_lower, batch_index)\n            print(\"progress\")\n            k=0\n    def closure():\n        t_ic = torch.zeros_like(x_right_batch)\n        pred_res = model(x_res_batch, t_res_batch)\n        pred_left = model(x_left_batch, t_left_batch) #  Left boundary of the spatial domain (x=0) over all times.\n        pred_right = model(x_right_batch, t_right_batch) # t_right is 1\n        #print(x_right_batch)\n        pred_ic = model(x_right_batch,t_ic )\n        #print(pred_ic)\n        #return\n        pred_upper = model(x_upper_batch, t_upper_batch) #  All spatial points at the final time step (x=1).\n        pred_lower = model(x_lower_batch, t_lower_batch) #  All spatial points at the initial time step (x=-1).\n        pred_res_t0 = pred_res[:, 0, :]\n        #print(t_lower_batch) #LOWER BATCH IS X=-1 Higher is X=1\n#         print(t_right_batch)\n\n\n        u_x = torch.autograd.grad(pred_res, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n        u_xx = torch.autograd.grad(u_x, x_res_batch, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n        u_t = torch.autograd.grad(pred_res, t_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n\n#         u_x_left = torch.autograd.grad(pred_left, x_left_batch, grad_outputs=torch.ones_like(pred_left), retain_graph=True, create_graph=True)[0]\n#         u_x_right = torch.autograd.grad(pred_right, x_right_batch, grad_outputs=torch.ones_like(pred_right), retain_graph=True, create_graph=True)[0]\n\n        # Compute u_x at x = -1 and x = 1\n        u_x_lower = torch.autograd.grad(pred_lower, x_lower_batch, grad_outputs=torch.ones_like(pred_lower), retain_graph=True, create_graph=True)[0]\n        u_x_upper = torch.autograd.grad(pred_upper, x_upper_batch, grad_outputs=torch.ones_like(pred_upper), retain_graph=True, create_graph=True)[0]\n\n        \n        check_nan(u_x, 'u_x')\n        check_nan(u_xx, 'u_xx')\n        check_nan(u_t, 'u_t')\n        check_nan(pred_res, 'pred_res')\n        check_nan(pred_ic, 'pred_ic')\n        check_nan(pred_upper, 'pred_upper')\n        check_nan(pred_lower, 'pred_lower')\n       \n        #alpha =a   # thermal diffusivity (can be modified)\n        #1. PDE LOSS eesidual\n        loss_res =torch.mean((u_t - gamma_1 * u_xx + gamma_2_AC * (pred_res**3 - pred_res))**2)\n\n        #2. Loss for initial condition\n        #print(pred_ic)\n        initial_condition = (x_right_batch**2) * torch.sin(2*torch.pi * x_right_batch)\n        #initial_condition = (x_right_batch**2) * torch.cos(torch.pi * x_right_batch)\n        loss_ic = torch.mean((pred_ic-initial_condition) ** 2)\n        \n        \n        # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n        loss_bc_1 = torch.mean((pred_upper - pred_lower) ** 2)\n        loss_bc_2 = torch.mean((u_x_lower - u_x_upper) ** 2)\n        \n        #loss_bc_2 =  torch.mean((pred_left-pred_right) ** 2) \n        loss_bc = torch.mean((loss_bc_1 + loss_bc_2)**2)\n        \n        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n\n        loss = 10*loss_res + 100*loss_ic + loss_bc\n        #print(loss)\n        #print(loss_track[-1])\n        optim.zero_grad()\n        loss.backward()\n        \n        return loss\n    \n    optim.step(closure)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-05T22:44:03.995591Z","iopub.execute_input":"2024-10-05T22:44:03.996076Z","iopub.status.idle":"2024-10-05T23:16:47.049017Z","shell.execute_reply.started":"2024-10-05T22:44:03.996039Z","shell.execute_reply":"2024-10-05T23:16:47.048078Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stderr","text":" 15%|█▌        | 199/1300 [13:24<1:11:51,  3.92s/it]","output_type":"stream"},{"name":"stdout","text":"progress\n","output_type":"stream"},{"name":"stderr","text":" 31%|███       | 399/1300 [17:10<15:32,  1.04s/it]  ","output_type":"stream"},{"name":"stdout","text":"progress\n","output_type":"stream"},{"name":"stderr","text":" 46%|████▌     | 599/1300 [20:37<12:03,  1.03s/it]","output_type":"stream"},{"name":"stdout","text":"progress\n","output_type":"stream"},{"name":"stderr","text":" 61%|██████▏   | 799/1300 [24:04<08:36,  1.03s/it]","output_type":"stream"},{"name":"stdout","text":"progress\n","output_type":"stream"},{"name":"stderr","text":" 77%|███████▋  | 999/1300 [27:31<05:13,  1.04s/it]","output_type":"stream"},{"name":"stdout","text":"progress\n","output_type":"stream"},{"name":"stderr","text":" 92%|█████████▏| 1199/1300 [30:58<01:44,  1.04s/it]","output_type":"stream"},{"name":"stdout","text":"progress\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 1300/1300 [32:43<00:00,  1.51s/it]\n","output_type":"stream"}]},{"cell_type":"code","source":"print(f\"Length of loss_track: {len(loss_track)}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-05T23:16:47.050594Z","iopub.execute_input":"2024-10-05T23:16:47.051079Z","iopub.status.idle":"2024-10-05T23:16:47.056195Z","shell.execute_reply.started":"2024-10-05T23:16:47.051035Z","shell.execute_reply":"2024-10-05T23:16:47.055240Z"},"trusted":true},"execution_count":51,"outputs":[{"name":"stdout","text":"Length of loss_track: 11154\n","output_type":"stream"}]},{"cell_type":"code","source":"#print(loss_track)","metadata":{"execution":{"iopub.status.busy":"2024-10-05T23:16:47.057284Z","iopub.execute_input":"2024-10-05T23:16:47.057566Z","iopub.status.idle":"2024-10-05T23:16:47.068520Z","shell.execute_reply.started":"2024-10-05T23:16:47.057536Z","shell.execute_reply":"2024-10-05T23:16:47.067788Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"code","source":"print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\nprint('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n\ntorch.save(model.state_dict(), './1dreaction_pinnsformer.pt')","metadata":{"execution":{"iopub.status.busy":"2024-10-05T23:16:47.069633Z","iopub.execute_input":"2024-10-05T23:16:47.070008Z","iopub.status.idle":"2024-10-05T23:16:47.089003Z","shell.execute_reply.started":"2024-10-05T23:16:47.069964Z","shell.execute_reply":"2024-10-05T23:16:47.088171Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"Loss Res: 0.007242, Loss_IC: 0.000416, loss_bc: 0.000670\nTrain Loss: 0.008328\n","output_type":"stream"}]},{"cell_type":"code","source":"\n\n# Convert loss_track to a NumPy array for easier slicing\nloss_track = np.array(loss_track)\n\n# Extract each loss component\nresidual_loss = loss_track[:, 0]\nboundary_condition_loss = loss_track[:, 2]\ninitial_condition_loss = loss_track[:, 1]\n\n# Plot loss components\nplt.figure(figsize=(12, 6))\nplt.plot(residual_loss, label='Residual Loss', color='r')\nplt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\nplt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\nplt.xlabel('Iteration')\nplt.ylabel('Loss')\nplt.title('Loss Components During Optimization')\nplt.legend()\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-05T23:16:47.090029Z","iopub.execute_input":"2024-10-05T23:16:47.090323Z","iopub.status.idle":"2024-10-05T23:16:47.375455Z","shell.execute_reply.started":"2024-10-05T23:16:47.090290Z","shell.execute_reply":"2024-10-05T23:16:47.374492Z"},"trusted":true},"execution_count":54,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAA+kAAAIjCAYAAAB/OVoZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACDeElEQVR4nOzdZ3wU1QLG4XfSG0loISCht9CRJkVA6SCKiFhQigoqICIIiqhgRVAQlW4BLCiWC1gQiVRFBAJGAQFBqpDQSSA92bkfYhaWJJhANjsk/+f+9mb3zNmZMzsnmHfPzBnDNE1TAAAAAADA5dxc3QAAAAAAAJCBkA4AAAAAgEUQ0gEAAAAAsAhCOgAAAAAAFkFIBwAAAADAIgjpAAAAAABYBCEdAAAAAACLIKQDAAAAAGARhHQAAAAAACyCkA4AACzFMAxNmDDB1c0oMAcOHJBhGJo/f36+rXPNmjUyDENr1qzJt3VaebsAUJgQ0gHgGjV//nwZhqHIyEhXNyVXoqKidN999yksLEze3t4qUaKEOnTooHnz5ik9Pd3VzbvmzZw50ykhL/Ph7e2tMmXKqF27dnr11Vd14sSJfNuW1Zw6dUqjR49WzZo15ePjoxIlSqhz58769ttvr2q9Cxcu1LRp0/KnkS6W3/0NAHCBYZqm6epGAADybv78+Ro4cKA2b96sJk2auLo5l/Xee+/pkUceUZkyZXT//ferevXqOnfunFauXKnvvvtOL7/8sp555hlXN/OaVrduXZUqVSrfRjDXrFmjm266ScOHD1fTpk2Vnp6uEydO6JdfftE333yjoKAgff7557r55pvzZXsXS0pKkoeHhzw8PPJ93f9l9+7dat++vU6cOKGBAweqSZMmOnv2rD755BNFRUXpySef1Ouvv35F677lllu0fft2HThwwKHcNE0lJyfL09NT7u7u+bAXks1mU0pKiry8vOTmlv9jMjn1N2dvFwCKgoL/rx8AoEj59ddf9cgjj6hFixZatmyZihUrZl82YsQIRUZGavv27S5sIS7nxhtvVO/evR3Kfv/9d3Xq1El33HGH/vzzT5UtW/aqt5MZ7nx8fOTj43PV67sSqamp6t27t86cOaN169apefPm9mVPPPGE+vbtqzfeeENNmjTRXXfdlW/bNQwj3/fZzc3NJZ+jq7YLAIUJX3ECQCH322+/qWvXrgoMDFRAQIDat2+vX3/91aFOamqqXnjhBVWvXl0+Pj4qWbKkWrdurYiICHudmJgYDRw4UOXLl5e3t7fKli2r2267Lcuo4KVeeOEFGYahTz75xCGgZ2rSpIkGDBhgfx0fH69Ro0bZT4uvWbOm3njjDV164pdhGBo2bJi++OIL1a5dW76+vmrRooW2bdsmSZozZ46qVasmHx8ftWvXLks727Vrp7p162rLli1q2bKlfH19VblyZc2ePTtLG48fP64HH3xQZcqUkY+Pjxo0aKAFCxY41Mm8rviNN97Q3LlzVbVqVXl7e6tp06bavHlzlnXu2rVLvXv3VokSJeTj46MmTZro66+/dqiTeUnD+vXrNXLkSJUuXVr+/v66/fbbHU43r1Spknbs2KG1a9faT09v166dpNwd27xq0KCBpk2bprNnz2r69On28gEDBqhSpUpZ6k+YMEGGYTiUZR6/Tz75RHXq1JG3t7eWL19uX3bxNemZ79+7d68GDBig4OBgBQUFaeDAgUpISHBYb2JiooYPH65SpUqpWLFiuvXWW3XkyJFcXef+1Vdfafv27Xr66acdArokubu7a86cOQoODnZYT+ZlAYsWLdIzzzyj0NBQ+fv769Zbb9Xhw4ft9dq1a6fvvvtOBw8etB+jzM8qu2vSBwwYoICAAB06dEi33HKLAgICdN1112nGjBmSpG3btunmm2+Wv7+/KlasqIULFzq099JrwzP7UnaPzL4iSfPmzdPNN9+skJAQeXt7q3bt2po1a5bDui/X33K6Jv2LL75Q48aN5evrq1KlSum+++7TkSNHHOpk7vORI0fUs2dPBQQEqHTp0nryySe5JAZAkcJIOgAUYjt27NCNN96owMBAjRkzRp6enpozZ47atWuntWvX2oPIhAkTNHHiRD300ENq1qyZ4uLiFBkZqa1bt6pjx46SpDvuuEM7duzQY489pkqVKun48eOKiIjQoUOHsg1mkpSQkKCVK1eqTZs2qlChwn+21zRN3XrrrVq9erUefPBBNWzYUD/88INGjx6tI0eO6M0333So/9NPP+nrr7/W0KFDJUkTJ07ULbfcojFjxmjmzJkaMmSIzpw5o8mTJ+uBBx7QqlWrHN5/5swZdevWTX369NE999yjzz//XI8++qi8vLz0wAMPSMoIfe3atdPevXs1bNgwVa5cWV988YUGDBigs2fP6vHHH3dY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8eJ5+nIQAK51hHQAgNq0aaO///5bH3zwgerWrav33ntP119/vd577z17nREjRuivv/7SxIkT5ePjo+eee07h4eH67bffclxvtWrV5OHhYZ/MLb/ldLuqnMrNArjr6H9t22azSZKefPJJRUREZPu4NFRezf7k5theidTUVP31118Obb00OGbKadKvi0dtc8PZxzU8PFyxsbE6dOhQjnUyv+DIyxkAV8oZ/XvTpk16/PHH9dBDD2nw4MEOy/7++2+1b99eJ0+e1NSpU/Xdd98pIiJCTzzxhKQLfdeZ8usWdABwLSOkA0AhVbp0afn5+Wn37t1Zlu3atUtubm4OI84lSpTQwIED9emnn+rw4cOqX79+ltmwq1atqlGjRmnFihXavn27UlJSNGXKlBzb4Ofnp5tvvlnr1q1zmOk6JxUrVtTRo0ezjGbu2rXLvjw/HT16VPHx8Q5lf/31lyTZT6OvWLGi9uzZkyWgXGmbMi898PT0VIcOHbJ9XMnodE4BWcrdsc2rL7/8UomJiercubO9rHjx4jp79myWurk5LT8/VKxYUTabTfv373co37t3b67ef8stt0iSPvzww2yXx8XFaenSpapVq1aWL1IuvZzANE3t3bvX4XKMyx2jgnDixAn17t1bDRs2tM8Sf7FvvvlGycnJ+vrrr/Xwww+rW7du6tChQ7ZfpuR2XzJ/P7L7d2j37t35/jsNAIUBIR0ACil3d3d16tRJS5cudTjl9tixY1q4cKFat25tPx391KlTDu8NCAhQtWrVlJycLCljlvakpCSHOlWrVlWxYsXsdXIyfvx4maap+++/X+fPn8+yfMuWLfbbmXXr1k3p6ekOt/WSpDfffFOGYahr16652/lcSktL05w5c+yvU1JSNGfOHJUuXVqNGze2tykmJsY+k3rm+9555x0FBASobdu2edpmSEiI2rVrpzlz5ig6OjrL8otvrZYX/v7+2Qbk/zq2V+L333/XiBEjVLx4cfuM31JGn4iNjXU4nT46OlqLFy++4m3lReYXBjNnznQof+edd3L1/t69e6t27dp67bXXFBkZ6bDMZrPp0Ucf1ZkzZ+yXJVzsww8/dPhy6csvv1R0dLRDn/X397+iU8bzQ3p6uu6++26lpKToq6++kpeXV5Y6maPYF4/Ix8bGat68eVnq5tTfLtWkSROFhIRo9uzZDn3u+++/186d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7tDWrVvVqVMn9ezZUy1btsx2Wzt37lTz5s0dyjLDf14cO3ZMzz77rNasWaPjx48rPT1dCQkJOnToUJ7XlVM7W7Ro4TD63apVK50/f17//POPGjRooPbt26tevXrq3LmzOnXqpN69e6t48eIqUaKEBgwYoM6dO6tjx47q0KGD+vTpo7Jly+ZL25D/uCbdqr74Qh533aWKK1a4uiUAAAC41hlGxinnrnjk8bRqf39/VatWTQ0aNNAHH3ygjRs36v3335cknf/3i4bvvvtOUVFR9seff/5pvy69a9euOnjwoJ544gkdPXpU7du315NPPnnFH52bm5vMS66rT01NdXjdv39/RUVF6a233tIvv/yiqKgolSxZUikpKVe83bxwd3dXRESEvv/+e9WuXVvvvPOOatasqf3790uS5s2bpw0bNqhly5ZatGiRatSooV9//bVA2oa8I6RbXR4n2gAAAAAKCzc3Nz3zzDN69tlnlZiYqNq1a8vb21uHDh1StWrVHB5hYWH295UuXVr9+/fXxx9/rGnTpmnu3LnZrj88PFybNm1yKLs0vJYuXVoxMTEOQf3S+6yvX79ew4cPV7du3VSnTh15e3vr5MmTV7n3ju3csGGDQxvWr1+vYsWKqXz58pIkwzDUqlUrvfDCC/rtt9/k5eWlxYsX2+s3atRIY8eO1S+//KK6detq4cKF+dY+5C9CulUxkQMAAACgO++8U+7u7poxY4aKFSumJ598Uk888YQWLFigv//+W1u3btU777yjBQsWSJKef/55LV26VHv37tWOHTv07bff5ngN9iOPPKI9e/Zo9OjR2r17txYuXKj58+c71GnXrp1OnDihyZMn6++//9aMGTP0/fffO9SpXr26PvroI+3cuVMbN25U37595evrm+d9jY2NdThDICoqSocPH9aQIUN0+PBhPfbYY9q1a5eWLl2q8ePHa+TIkXJzc9PGjRv16quvKjIyUocOHdL//vc/nThxQuHh4dq/f7/Gjh2rDRs26ODBg1qxYoX27NnDdekWRki3OIORdAAAABRhHh4eGjZsmCZPnqz4+Hi99NJLeu655zRx4kSFh4erS5cu+u6771S5cmVJkpeXl8aOHav69eurTZs2cnd312effZbtuitUqKCvvvpKS5YsUYMGDTR79my9+uqrDnXCw8M1c+ZMzZgxQw0aNNCmTZuynD7//vvv68yZM7r++ut1//33a/jw4QoJCcnzvq5Zs0aNGjVyeLzwwgu67rrrtGzZMm3atEkNGjTQI488ogcffFDPPvusJCkwMFDr1q1Tt27dVKNGDT377LOaMmWKunbtKj8/P+3atUt33HGHatSoocGDB2vo0KF6+OGH89w+FAzDvPQCi0IuLi5OQUFBio2NVWBgoKubk7OXX5aee04HOnXSdd9+K09PT1e3CIVIamqqli1bpm7dutG3kO/oX3AW+hacqbD1r6SkJO3fv1+VK1eWj4+Pq5tT5NlsNsXFxSkwMFBuboyTFlaX+73LSw6lh1hd0foOBQAAAACKNEK6VXFNOgAAAAAUOYR0AAAAAAAsgpBuVYykAwAAAECRQ0i3OGZ3BwAAAICig5BuVYykAwAAAECRQ0i3OkbSAQAAAKDIIKRbFSPpAAAAAFDkuDSkT5w4UU2bNlWxYsUUEhKinj17avfu3Zd9z/z582UYhsPj0hvFAwAAAABwLXJpSF+7dq2GDh2qX3/9VREREUpNTVWnTp0UHx9/2fcFBgYqOjra/jh48GABtbgA/TuSzsRxAAAAgDUcOHBAhmEoKirK1U0pcGvWrJFhGDp79qykjMHT4ODg/3yfYRhasmSJU9tW2Lg0pC9fvlwDBgxQnTp11KBBA82fP1+HDh3Sli1bLvs+wzAUGhpqf5QpU6aAWlyAON0dAAAARcyAAQMczpgtWbKkunTpoj/++MPVTbOMr776Su3atVNQUJACAgJUv359vfjiizp9+nSBtuOuu+7SX3/9ZX89YcIENWzYMEu96Ohode3a1altye0XBtcKD1c34GKxsbGSpBIlSly23vnz51WxYkXZbDZdf/31evXVV1WnTp1s6yYnJys5Odn+Oi4uTpKUmpqq1NTUfGp5/nNLT5e7JJmmpduJa1Nmn6JvwRnoX3AW+hacqbD1r9TUVJmmKZvNJpvN5urm5JppmurcubM++OADSVJMTIyee+453XLLLTpw4IBrGyfZP8u8fq7mv2fHmqappKQkeXl5XdH2n332WU2ePFkjRozQyy+/rHLlymnPnj2aM2eOPvzwQw0fPvyK1psbl+67t7e3vL297eWZ+3jp5xISEpJtubPa5ko2m03mv/nN3d3dYVle/m2xTEi32WwaMWKEWrVqpbp16+ZYr2bNmvrggw9Uv359xcbG6o033lDLli21Y8cOlS9fPkv9iRMn6oUXXshSvmLFCvn5+eXrPuSnart3K/Nrh4iICJe2BYUXfQvORP+Cs9C34EyFpX95eHgoNDRU58+fV0pKikzTVEJagkva4ufhJyOXZ4lmhpvMv9OrVKmiYcOGqVu3btq3b59KlSolSdqxY4fGjh2rzZs3y9fXV7feeqtefvllBQQESJJuueUW1atXTxMnTrSvu2/fvgoKCtLMmTMlSfXr11f//v21f/9+LV26VEFBQXryySc1YMAA+3u2bNmiJ554Qn/99ZfCw8M1atQoSVJ8fLzi4uKUnp6uESNGaN26dTp+/LjKly+vBx98UI888oh9HUOGDFFsbKwaNWqk999/X15eXurbt68WL16sDRs2OOz/jTfeqC5dumjcuHFZPpstW7Zo4sSJmjhxosP6mzdvrubNmys2NtY+IPn+++9r+vTpOnLkiCpWrKhRo0bp7rvvtr+nePHieuutt7RixQqtWrVKZcuW1UsvvaRu3brZ66xYsULPPPOMjhw5oiZNmuiee+6RJJ07d05ubm5auHChxo4dq4MHD2rhwoV68cUXJckeTmfMmKF7771XxYsX18cff6zu3bvn6thlfl433HCDZsyYoZSUFPXq1UsTJ06Up6dntv0mKSlJpmna9/9Shw8f1lNPPaV169bJzc1N7du316RJk+xfIGzbtk3PPPOMoqKiZBiGqlSpojfffFONGjXSoUOHNGbMGP36669KTU1VhQoV9MILL6hTp05ZtpOSkqLExEStW7dOaWlpDssSEnL/+2eZkD506FBt375dP//882XrtWjRQi1atLC/btmypcLDwzVnzhy99NJLWeqPHTtWI0eOtL+Oi4tTWFiYOnXqpMDAwPzbgXzmtnOn/XnHjh1z7JDAlUhNTVVERAR9C05B/4Kz0LfgTIWtfyUlJenw4cMKCAiQj4+P4lPiVX5S1gGtghD3VJz8vfxzVdfT01MeHh72v9PPnz+vJUuWqFq1aqpUqZLc3NwUHx+vO++8UzfccIM2btyo48ePa/DgwRo3bpzmzZsnKeNLCi8vL4e/9z08POTp6Wkvc3Nz08yZM/Xiiy/q+eef11dffaVRo0apc+fOqlmzps6fP6977rlHHTp00CeffKL9+/friSeekCT5+/srMDBQqampqly5sh577DGVLFlSv/zyix555BFVqlRJffr0se/TunXrVKxYMf3www8yDENBQUGaNGmSdu/eraZNm0qSfvvtN+3YsUOLFy/ONqcsXbpUAQEBeuKJJ7Lto5nvWbx4scaOHas333xT7du313fffadhw4apevXquummm+z1X3/9db322muaOnWqpk+frocfflj79+9XiRIldPjwYfXr109DhgzRoEGDFBkZqdGjR0uSihUrpsDAQPn4+MgwDAUGBqp///76+++/9cMPP2jFihWSpKCgIPn6+kqSfH19FRgYmKtj5+npqZ9//llhYWFatWqV9u7dq3vuuUdNmzbVoEGDsu03F7flUjabTf369VNAQIBWr16ttLQ0PfbYYxo8eLBWrVolSXr00UfVsGFDzZkzR+7u7oqKilJwcLACAwM1duxYpaena+3atfL399eff/6pwMDAbLeVlJQkX19ftWnTJsvk5jl9gZAdS4T0YcOG6dtvv9W6deuyHQ2/HE9PTzVq1Eh79+7NdnnmaRjZvc/S/wB7XDg0lm8rrln0LTgT/QvOQt+CMxWW/pWeni7DMOTm5mZ/uEpetm8Yhr777jt7AIqPj1fZsmX17bffyuPfv48/++wzJSUl6aOPPpK/f0b4nz59unr06KHJkyfb56vK3P+L131pWbdu3TR06FBJ0tNPP61p06Zp7dq1Cg8P12effSabzaYPPvhAPj4+qlevno4ePapHH33Uvk/e3t72EWRJqlq1qjZu3Kgvv/zSPnJtGIb8/f319ttvq1SpUvbtd+7cWQsWLFDz5s0lSQsWLFDbtm1VrVq1bD+bvXv3qkqVKtlmm4tNnTpVAwYMsO9XrVq1tHHjRk2dOlXt27e31xswYID69u0rKePs43feeUeRkZHq0qWL5syZo6pVq2rq1KmSpPDwcO3YsUOTJk3K0qfc3Nzk7++vYsWKycPDQ+XKlcvSpsz6uTl2hmGoePHimjFjhtzd3VW7dm11795dq1ev1sMPP5ztPl/clkutXLlS27Zt0/79+xUWFiZJ+vDDD1WnTh1t2bJFTZs21aFDhzR69GjVrl1bUsbZ25kOHz6sO+64Qw0aNJCkHI9P5vYNw8j235G8/Lvi0pBumqYee+wxLV68WGvWrFHlypXzvI709HRt27bN4dSMwoTZ3QEAAHC1/Dz9dH7seZdtOy9uuukmzZo1S5J05swZzZw5U127dtWmTZtUsWJF7dy5Uw0aNLCHPElq1aqVbDabdu/enadJpevXr29/njk59fHjxyVJO3fuVP369R1GRC8+ozfTjBkz9MEHH+jQoUNKTExUSkpKlgnU6tatm+U69EGDBumBBx7Q1KlT7aePv/nmmzm21cxlLti5c6cGDx7sUNaqVSu99dZbDmUX73vmmQEX73vmlweZstv3vMrtsatTp47DNd1ly5bVtm3brnibYWFh9oAuSbVr11ZwcLB27typpk2bauTIkXrooYf00UcfqUOHDrrzzjtVtWpVSdLw4cP16KOPasWKFerQoYPuuOMOh8/OGVw6u/vQoUP18ccfa+HChSpWrJhiYmIUExOjxMREe51+/fpp7Nix9tcvvviiVqxYoX379mnr1q267777dPDgQT300EOu2AXnYXZ3AAAA5BPDMOTv5e+SR26vR8/k7++vatWqqVq1amratKnee+89xcfH69133831Otzc3LKE2uwm7rp0dNMwjDxNPvbZZ5/pySef1IMPPqgVK1YoKipKAwcOVEpKSpZ9ulSPHj3k7e2txYsX65tvvlFqaqp69+6d47Zq1Kihffv25dvkhle7785U0G2bMGGCduzYoe7du2vVqlWqXbu2Fi9eLEl66KGHtG/fPt1///3atm2bmjRponfeecdpbZFcHNJnzZql2NhYtWvXTmXLlrU/Fi1aZK9z6NAhRUdH21+fOXNGgwYNUnh4uLp166a4uDj98ssv9lMTCh1G0gEAAFCEZZ6injmQFx4ert9//13x8fH2OuvXr5ebm5v9NOXSpUs7ZIj09HRt3749T9sNDw/XH3/8oaSkJHvZr7/+6lBn/fr1atmypYYMGaJGjRqpWrVq+vvvv3O1fg8PD/Xv31/z5s3TvHnzdPfdd9uv4c7Ovffeq/Pnz9snvrtU5v3Lw8PDtX79+iztzEteCg8P16ZNmxzKLt33S3l5eSk9Pf0/1/tfxy6/hYeH6/Dhwzp8+LC97M8//9TZs2cdPpMaNWroiSee0IoVK9SrVy/7NfKSFBYWpkceeUT/+9//NGrUqDx9YXQlXH66+39Zs2aNw+s333zzsqeBFBqMpAMAAKAISk5OVkxMjKSMAbrp06fr/Pnz6tGjh6SMWdrHjx+v/v37a8KECTpx4oQee+wx3X///fbTpW+++WaNHDlS3333nf3a6swQm1v33nuvxo0bp0GDBmns2LE6cOCA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"},"metadata":{}}]},{"cell_type":"code","source":"\n# Move the tensor to CPU and detach it from the computation graph before using NumPy\n# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\nx_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2]\nprint(res.shape)\nprint(x_test.shape)\nprint(x_res.shape)\n\n# Predict using the model\nwith torch.no_grad():\n    pred = model(x_test, t_test)[:, 0:1]\n    pred = pred.cpu().detach().numpy()  # Move to CPU before converting to NumPy\n\n# Reshape the prediction to fit 101x101 grid (space and time)\npred = pred.reshape(101, 101)\n\n# Visualization of predicted solution u(x,t)\nplt.figure(figsize=(4, 3))\nplt.imshow(pred, extent=[0, 1, -1, 1], aspect='auto')\nplt.xlabel('t')\nplt.ylabel('x')\nplt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\nplt.colorbar()\nplt.tight_layout()\nplt.savefig('./1dheat_pinnsformer_pred.png')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-05T23:16:47.376848Z","iopub.execute_input":"2024-10-05T23:16:47.377252Z","iopub.status.idle":"2024-10-05T23:16:47.969158Z","shell.execute_reply.started":"2024-10-05T23:16:47.377196Z","shell.execute_reply":"2024-10-05T23:16:47.968199Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stdout","text":"torch.Size([2601, 5, 2])\ntorch.Size([10201, 5, 1])\ntorch.Size([2601, 5, 1])\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 400x300 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Move the tensor to CPU and detach it from the computation graph before using NumPy\n# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\nx_test, t_test = res_test[:, :, 0:1], res_test[:, :, 1:2]\nprint(res.shape)\nprint(x_test.shape)\nprint(x_res.shape)\n\n# Predict using the model\nwith torch.no_grad():\n    pred = model(x_test, t_test)[:, 0:1]\n    pred = pred.cpu().detach().numpy()  # Move to CPU before converting to NumPy\n\n# Reshape the prediction to fit 101x101 grid (space and time)\npred = pred.reshape(101, 101)\n\n# Rotate the prediction 90 degrees to the left\npred = np.rot90(pred, k=1)  # k=1 rotates 90 degrees counterclockwise\n\n# Visualization of predicted solution u(x,t)\nplt.figure(figsize=(4, 3))\nplt.imshow(pred, extent=[0, 1, -1, 1], aspect='auto')\nplt.xlabel('t')\nplt.ylabel('x')\nplt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\nplt.colorbar()\nplt.tight_layout()\nplt.savefig('./1dheat_pinnsformer_pred_rotated.png')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-05T23:16:47.970319Z","iopub.execute_input":"2024-10-05T23:16:47.970620Z","iopub.status.idle":"2024-10-05T23:16:48.552393Z","shell.execute_reply.started":"2024-10-05T23:16:47.970587Z","shell.execute_reply":"2024-10-05T23:16:48.551483Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"torch.Size([2601, 5, 2])\ntorch.Size([10201, 5, 1])\ntorch.Size([2601, 5, 1])\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 400x300 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport torch\nimport matplotlib.pyplot as plt\n\n# Create the x grid (spatial domain) and select specific time steps for visualization\nx_values = np.linspace(-1, 1, 101)  # Spatial domain from -1 to 1 with 101 points\ntime_steps = [0.0, 0.25, 0.75, 1.0]  # The time steps you want to visualize\ntime_steps = [0.0] \n# Plot the predicted solutions at specific time steps\nfig, axes = plt.subplots(1, 4, figsize=(16, 4), sharey=True)\n\nfor idx, t in enumerate(time_steps):\n    # Extract the prediction for the current time step 't'\n    x_test_tensor = torch.tensor(x_values, dtype=torch.float32).unsqueeze(1).to(device)\n    t_test_tensor = torch.tensor(np.full_like(x_values, t), dtype=torch.float32).unsqueeze(1).to(device)\n\n    with torch.no_grad():\n        pred_u = model(x_test_tensor, t_test_tensor).cpu().numpy()  # Predicted u(x, t) from the model\n        print(pred_u)\n        print(x_test_tensor.shape)\n        print(t_test_tensor)\n    # Plotting predicted solutions only\n    axes[idx].plot(x_values, pred_u, 'r--', label='Prediction')  # Predicted solution in red dashed line\n    axes[idx].set_title(f'$t={t}$')\n    axes[idx].set_xlabel('$x$')\n    axes[idx].set_xlim([-1, 1])\n    axes[idx].set_ylim([-1, 1])\n    axes[idx].legend()\n\naxes[0].set_ylabel('$u(t,x)$')\n\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-05T23:18:08.841517Z","iopub.execute_input":"2024-10-05T23:18:08.841970Z","iopub.status.idle":"2024-10-05T23:18:09.649066Z","shell.execute_reply.started":"2024-10-05T23:18:08.841927Z","shell.execute_reply":"2024-10-05T23:18:09.648062Z"},"trusted":true},"execution_count":58,"outputs":[{"name":"stdout","text":"[[-3.6638346 ]\n [-3.579464  ]\n [-3.494864  ]\n [-3.4100564 ]\n [-3.3250504 ]\n [-3.2398624 ]\n [-3.1544945 ]\n [-3.0689478 ]\n [-2.9832501 ]\n [-2.8973868 ]\n [-2.8113797 ]\n [-2.7252247 ]\n [-2.6389384 ]\n [-2.5525107 ]\n [-2.4659615 ]\n [-2.3792849 ]\n [-2.2925043 ]\n [-2.2055993 ]\n [-2.1185923 ]\n [-2.0314775 ]\n [-1.9442648 ]\n [-1.8569574 ]\n [-1.7695643 ]\n [-1.6820794 ]\n [-1.5945246 ]\n [-1.5068935 ]\n [-1.4191958 ]\n [-1.3314416 ]\n [-1.2436329 ]\n [-1.1557796 ]\n [-1.0678873 ]\n [-0.97997874]\n [-0.892046  ]\n [-0.80410725]\n [-0.7161762 ]\n [-0.6282593 ]\n [-0.5403678 ]\n [-0.45253053]\n [-0.36474165]\n [-0.27702865]\n [-0.18940362]\n [-0.10188756]\n [-0.0144851 ]\n [ 0.07276889]\n [ 0.15985942]\n [ 0.24676707]\n [ 0.33347085]\n [ 0.4199424 ]\n [ 0.50617415]\n [ 0.5921231 ]\n [ 0.6777756 ]\n [ 0.7630976 ]\n [ 0.84807557]\n [ 0.9326712 ]\n [ 1.0168519 ]\n [ 1.1006104 ]\n [ 1.1838953 ]\n [ 1.266687  ]\n [ 1.34895   ]\n [ 1.4306564 ]\n [ 1.5117781 ]\n [ 1.5922753 ]\n [ 1.6721212 ]\n [ 1.7512791 ]\n [ 1.8297266 ]\n [ 1.9074203 ]\n [ 1.9843367 ]\n [ 2.0604281 ]\n [ 2.1356802 ]\n [ 2.2100525 ]\n [ 2.2835112 ]\n [ 2.3560228 ]\n [ 2.4275699 ]\n [ 2.4981081 ]\n [ 2.5676079 ]\n [ 2.636047  ]\n [ 2.7033958 ]\n [ 2.7696228 ]\n [ 2.8347082 ]\n [ 2.8986154 ]\n [ 2.9613292 ]\n [ 3.0228243 ]\n [ 3.0830724 ]\n [ 3.142063  ]\n [ 3.1997628 ]\n [ 3.2561655 ]\n [ 3.311251  ]\n [ 3.3649962 ]\n [ 3.4173994 ]\n [ 3.468443  ]\n [ 3.5181134 ]\n [ 3.5664055 ]\n [ 3.6133137 ]\n [ 3.658822  ]\n [ 3.7029402 ]\n [ 3.7456503 ]\n [ 3.7869687 ]\n [ 3.8268847 ]\n [ 3.8654022 ]\n [ 3.9025216 ]\n [ 3.9382584 ]]\ntorch.Size([101, 1])\ntensor([[0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.],\n        [0.]], device='cuda:0')\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1600x400 with 4 Axes>","image/png":""},"metadata":{}}]}]}