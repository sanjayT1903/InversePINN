{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b3fd455d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T22:43:41.954633Z",
     "iopub.status.busy": "2024-09-29T22:43:41.954217Z",
     "iopub.status.idle": "2024-09-29T22:43:45.060315Z",
     "shell.execute_reply": "2024-09-29T22:43:45.059504Z"
    },
    "papermill": {
     "duration": 3.11581,
     "end_time": "2024-09-29T22:43:45.062638",
     "exception": false,
     "start_time": "2024-09-29T22:43:41.946828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "35ee2c59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T22:43:45.073993Z",
     "iopub.status.busy": "2024-09-29T22:43:45.073601Z",
     "iopub.status.idle": "2024-09-29T22:43:45.095907Z",
     "shell.execute_reply": "2024-09-29T22:43:45.095076Z"
    },
    "papermill": {
     "duration": 0.030127,
     "end_time": "2024-09-29T22:43:45.097792",
     "exception": false,
     "start_time": "2024-09-29T22:43:45.067665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "# @article{zhao2023pinnsformer,\n",
    "#   title={PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks},\n",
    "#   author={Zhao, Leo Zhiyuan and Ding, Xueying and Prakash, B Aditya},\n",
    "#   journal={arXiv preprint arXiv:2307.11833},\n",
    "#   year={2023}\n",
    "# }\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(2, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        # pdb.set_trace()\n",
    "        # raise Exception('stop')\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "245e5af9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T22:43:45.108310Z",
     "iopub.status.busy": "2024-09-29T22:43:45.107568Z",
     "iopub.status.idle": "2024-09-29T22:43:45.111497Z",
     "shell.execute_reply": "2024-09-29T22:43:45.110672Z"
    },
    "papermill": {
     "duration": 0.011076,
     "end_time": "2024-09-29T22:43:45.113368",
     "exception": false,
     "start_time": "2024-09-29T22:43:45.102292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "gamma_2_AC = 4\n",
    "gamma_1 = 0.0001\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e574c874",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T22:43:45.124204Z",
     "iopub.status.busy": "2024-09-29T22:43:45.123296Z",
     "iopub.status.idle": "2024-09-29T22:43:45.186092Z",
     "shell.execute_reply": "2024-09-29T22:43:45.185109Z"
    },
    "papermill": {
     "duration": 0.070043,
     "end_time": "2024-09-29T22:43:45.188087",
     "exception": false,
     "start_time": "2024-09-29T22:43:45.118044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f52de274",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T22:43:45.198800Z",
     "iopub.status.busy": "2024-09-29T22:43:45.198017Z",
     "iopub.status.idle": "2024-09-29T22:43:45.396636Z",
     "shell.execute_reply": "2024-09-29T22:43:45.395637Z"
    },
    "papermill": {
     "duration": 0.206549,
     "end_time": "2024-09-29T22:43:45.399248",
     "exception": false,
     "start_time": "2024-09-29T22:43:45.192699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data([-1, 1], [0, 1], 51, 51)\n",
    "res_test, _, _, _, _ = get_data([-1, 1], [0, 1], 101, 101)\n",
    "\n",
    "# Define the initial condition for u(x, 0)\n",
    "#def u_init(x):\n",
    "   \n",
    "    #return np.sin(n * np.pi * x / L)\n",
    "#print(res[:, 0])\n",
    "\n",
    "# Apply the initial condition to the spatial points at t=0\n",
    "#init_cond = u_init(res[:, 0])  # Assuming t=0 corresponds to the first time point\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=5, step=1e-4)\n",
    "b_left = make_time_sequence(b_left, num_step=5, step=1e-4)\n",
    "b_right = make_time_sequence(b_right, num_step=5, step=1e-4)\n",
    "b_upper = make_time_sequence(b_upper, num_step=5, step=1e-4)\n",
    "b_lower = make_time_sequence(b_lower, num_step=5, step=1e-4)\n",
    "res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Initial condition as tensor\n",
    "#init_cond = torch.tensor(init_cond, dtype=torch.float32).to(device)\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "x_res, t_res = res[:, :, 0:1], res[:, :, 1:2]\n",
    "x_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2]\n",
    "x_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2]\n",
    "x_upper, t_upper = b_upper[:,:,0:1], b_upper[:,:,1:2]\n",
    "x_lower, t_lower = b_lower[:,:,0:1], b_lower[:,:,1:2]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ef12ac2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T22:43:45.411924Z",
     "iopub.status.busy": "2024-09-29T22:43:45.411406Z",
     "iopub.status.idle": "2024-09-29T22:43:46.716800Z",
     "shell.execute_reply": "2024-09-29T22:43:46.715631Z"
    },
    "papermill": {
     "duration": 1.314277,
     "end_time": "2024-09-29T22:43:46.719297",
     "exception": false,
     "start_time": "2024-09-29T22:43:45.405020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=2, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453561\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "32399ccd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T22:43:46.730678Z",
     "iopub.status.busy": "2024-09-29T22:43:46.730231Z",
     "iopub.status.idle": "2024-09-29T22:43:46.736074Z",
     "shell.execute_reply": "2024-09-29T22:43:46.735230Z"
    },
    "papermill": {
     "duration": 0.013326,
     "end_time": "2024-09-29T22:43:46.737894",
     "exception": false,
     "start_time": "2024-09-29T22:43:46.724568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_minibatch(data, batch_index, num_batches=1):\n",
    "    \"\"\"\n",
    "    Splits the data into `num_batches` parts and returns the part corresponding to `batch_index`.\n",
    "    \n",
    "    Args:\n",
    "    - data: Tensor of shape (N, *, *) where N is the number of data points (could be res, b_left, b_right, etc.)\n",
    "    - batch_index: Index of the batch to return (between 0 and num_batches-1)\n",
    "    - num_batches: Total number of batches to split the data into (default: 5)\n",
    "\n",
    "    Returns:\n",
    "    - A subset of the data corresponding to the specified batch.\n",
    "    \"\"\"\n",
    "    total_size = data.size(0)\n",
    "    batch_size = total_size // num_batches\n",
    "    start_idx = batch_index * batch_size\n",
    "    end_idx = start_idx + batch_size\n",
    "\n",
    "    # Ensure we get all remaining data for the last batch\n",
    "    if batch_index == num_batches - 1:\n",
    "        end_idx = total_size\n",
    "\n",
    "    return data[start_idx:end_idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7f4d35ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T22:43:46.748504Z",
     "iopub.status.busy": "2024-09-29T22:43:46.748117Z",
     "iopub.status.idle": "2024-09-29T23:30:46.565309Z",
     "shell.execute_reply": "2024-09-29T23:30:46.564332Z"
    },
    "papermill": {
     "duration": 2819.825186,
     "end_time": "2024-09-29T23:30:46.567658",
     "exception": false,
     "start_time": "2024-09-29T22:43:46.742472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1200 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      " 17%|█▋        | 199/1200 [13:24<1:05:03,  3.90s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 33%|███▎      | 399/1200 [26:06<50:54,  3.81s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 50%|████▉     | 599/1200 [36:46<10:12,  1.02s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 67%|██████▋   | 799/1200 [40:10<06:49,  1.02s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 83%|████████▎ | 999/1200 [43:34<03:24,  1.02s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████▉| 1199/1200 [46:58<00:01,  1.02s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1200/1200 [46:59<00:00,  2.35s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "import random \n",
    "list1 = [0]\n",
    "random.choice(list1)\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "\n",
    "#t_ic = torch.zeros_like(x_right_batch)\n",
    "k=0\n",
    "batch_index = 0\n",
    "x_res_batch = get_minibatch(x_res, batch_index)\n",
    "t_res_batch = get_minibatch(t_res, batch_index)\n",
    "\n",
    "x_left_batch = get_minibatch(x_left, batch_index)\n",
    "t_left_batch = get_minibatch(t_left, batch_index)\n",
    "x_right_batch = get_minibatch(x_right, batch_index)            \n",
    "t_right_batch = get_minibatch(t_right, batch_index)\n",
    "            \n",
    "x_upper_batch = get_minibatch(x_upper, batch_index)\n",
    "t_upper_batch = get_minibatch(t_upper, batch_index)\n",
    "x_lower_batch = get_minibatch(x_lower, batch_index)\n",
    "t_lower_batch = get_minibatch(t_lower, batch_index)\n",
    "t_ic = torch.zeros_like(x_right_batch)\n",
    "for i in tqdm(range(1200)):\n",
    "    k+=1\n",
    "    if k == 200:\n",
    "        \n",
    "#             batch_index = random.choice(list1)\n",
    "#             print(batch_index)\n",
    "#             batch_index +=1\n",
    "#             x_res_batch = get_minibatch(x_res, batch_index)\n",
    "#             t_res_batch = get_minibatch(t_res, batch_index)\n",
    "\n",
    "#             x_left_batch = get_minibatch(x_left, batch_index)\n",
    "#             t_left_batch = get_minibatch(t_left, batch_index)\n",
    "#             x_right_batch = get_minibatch(x_right, batch_index)            \n",
    "#             t_right_batch = get_minibatch(t_right, batch_index)\n",
    "\n",
    "#             x_upper_batch = get_minibatch(x_upper, batch_index)\n",
    "#             t_upper_batch = get_minibatch(t_upper, batch_index)\n",
    "#             x_lower_batch = get_minibatch(x_lower, batch_index)\n",
    "#             t_lower_batch = get_minibatch(t_lower, batch_index)\n",
    "            print(\"progress\")\n",
    "            k=0\n",
    "    def closure():\n",
    "        t_ic = torch.zeros_like(x_right_batch)\n",
    "        pred_res = model(x_res_batch, t_res_batch)\n",
    "        pred_left = model(x_left_batch, t_left_batch) #  Left boundary of the spatial domain (x=0) over all times.\n",
    "        pred_right = model(x_right_batch, t_right_batch) # t_right is 1\n",
    "        #print(x_right_batch)\n",
    "        pred_ic = model(x_right_batch,t_ic )\n",
    "        #print(pred_ic)\n",
    "        #return\n",
    "        pred_upper = model(x_upper_batch, t_upper_batch) #  All spatial points at the final time step (x=1).\n",
    "        pred_lower = model(x_lower_batch, t_lower_batch) #  All spatial points at the initial time step (x=-1).\n",
    "        pred_res_t0 = pred_res[:, 0, :]\n",
    "        #print(t_lower_batch) #LOWER BATCH IS X=-1 Higher is X=1\n",
    "#         print(t_right_batch)\n",
    "\n",
    "\n",
    "        u_x = torch.autograd.grad(pred_res, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res_batch, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         u_x_left = torch.autograd.grad(pred_left, x_left_batch, grad_outputs=torch.ones_like(pred_left), retain_graph=True, create_graph=True)[0]\n",
    "#         u_x_right = torch.autograd.grad(pred_right, x_right_batch, grad_outputs=torch.ones_like(pred_right), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Compute u_x at x = -1 and x = 1\n",
    "        u_x_lower = torch.autograd.grad(pred_lower, x_lower_batch, grad_outputs=torch.ones_like(pred_lower), retain_graph=True, create_graph=True)[0]\n",
    "        u_x_upper = torch.autograd.grad(pred_upper, x_upper_batch, grad_outputs=torch.ones_like(pred_upper), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        \n",
    "        check_nan(u_x, 'u_x')\n",
    "        check_nan(u_xx, 'u_xx')\n",
    "        check_nan(u_t, 'u_t')\n",
    "        check_nan(pred_res, 'pred_res')\n",
    "        check_nan(pred_ic, 'pred_ic')\n",
    "        check_nan(pred_upper, 'pred_upper')\n",
    "        check_nan(pred_lower, 'pred_lower')\n",
    "       \n",
    "        #alpha =a   # thermal diffusivity (can be modified)\n",
    "        #1. PDE LOSS eesidual\n",
    "        loss_res =torch.mean((u_t - gamma_1 * u_xx + gamma_2_AC * (pred_res**3 - pred_res))**2)\n",
    "\n",
    "        #2. Loss for initial condition\n",
    "        #print(pred_ic)\n",
    "        initial_condition = (x_right_batch**2) * torch.sin(2*torch.pi * x_right_batch)\n",
    "        #initial_condition = (x_right_batch**2) * torch.cos(torch.pi * x_right_batch)\n",
    "        loss_ic = torch.mean((pred_ic-initial_condition) ** 2)\n",
    "        \n",
    "        \n",
    "        # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "        loss_bc_1 = torch.mean((pred_upper - pred_lower) ** 2)\n",
    "        loss_bc_2 = torch.mean((u_x_lower - u_x_upper) ** 2)\n",
    "        \n",
    "        #loss_bc_2 =  torch.mean((pred_left-pred_right) ** 2) \n",
    "        loss_bc = torch.mean((loss_bc_1 + loss_bc_2)**2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 10*loss_res + 100*loss_ic + loss_bc\n",
    "        #print(loss)\n",
    "        #print(loss_track[-1])\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        \n",
    "        return loss\n",
    "    \n",
    "    optim.step(closure)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1719373c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T23:30:46.773156Z",
     "iopub.status.busy": "2024-09-29T23:30:46.772310Z",
     "iopub.status.idle": "2024-09-29T23:30:46.777466Z",
     "shell.execute_reply": "2024-09-29T23:30:46.776544Z"
    },
    "papermill": {
     "duration": 0.108809,
     "end_time": "2024-09-29T23:30:46.779429",
     "exception": false,
     "start_time": "2024-09-29T23:30:46.670620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of loss_track: 15935\n"
     ]
    }
   ],
   "source": [
    "print(f\"Length of loss_track: {len(loss_track)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "38dfbd7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T23:30:46.974216Z",
     "iopub.status.busy": "2024-09-29T23:30:46.973439Z",
     "iopub.status.idle": "2024-09-29T23:30:46.978286Z",
     "shell.execute_reply": "2024-09-29T23:30:46.977163Z"
    },
    "papermill": {
     "duration": 0.105862,
     "end_time": "2024-09-29T23:30:46.980916",
     "exception": false,
     "start_time": "2024-09-29T23:30:46.875054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print(loss_track)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c4f0275a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T23:30:47.195569Z",
     "iopub.status.busy": "2024-09-29T23:30:47.195185Z",
     "iopub.status.idle": "2024-09-29T23:30:47.211894Z",
     "shell.execute_reply": "2024-09-29T23:30:47.210938Z"
    },
    "papermill": {
     "duration": 0.133933,
     "end_time": "2024-09-29T23:30:47.213912",
     "exception": false,
     "start_time": "2024-09-29T23:30:47.079979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000196, Loss_IC: 0.000007, loss_bc: 0.000000\n",
      "Train Loss: 0.000203\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0ba95c48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T23:30:47.408206Z",
     "iopub.status.busy": "2024-09-29T23:30:47.407841Z",
     "iopub.status.idle": "2024-09-29T23:30:47.803523Z",
     "shell.execute_reply": "2024-09-29T23:30:47.802656Z"
    },
    "papermill": {
     "duration": 0.49561,
     "end_time": "2024-09-29T23:30:47.805766",
     "exception": false,
     "start_time": "2024-09-29T23:30:47.310156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "228db203",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T23:30:48.001564Z",
     "iopub.status.busy": "2024-09-29T23:30:48.001193Z",
     "iopub.status.idle": "2024-09-29T23:30:48.709801Z",
     "shell.execute_reply": "2024-09-29T23:30:48.708924Z"
    },
    "papermill": {
     "duration": 0.808502,
     "end_time": "2024-09-29T23:30:48.712195",
     "exception": false,
     "start_time": "2024-09-29T23:30:47.903693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2601, 5, 2])\n",
      "torch.Size([10201, 5, 1])\n",
      "torch.Size([2601, 5, 1])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2]\n",
    "print(res.shape)\n",
    "print(x_test.shape)\n",
    "print(x_res.shape)\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()  # Move to CPU before converting to NumPy\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "# Visualization of predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred.png')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "53c8c567",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T23:30:48.908578Z",
     "iopub.status.busy": "2024-09-29T23:30:48.907743Z",
     "iopub.status.idle": "2024-09-29T23:30:49.492534Z",
     "shell.execute_reply": "2024-09-29T23:30:49.491593Z"
    },
    "papermill": {
     "duration": 0.685382,
     "end_time": "2024-09-29T23:30:49.494447",
     "exception": false,
     "start_time": "2024-09-29T23:30:48.809065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2601, 5, 2])\n",
      "torch.Size([10201, 5, 1])\n",
      "torch.Size([2601, 5, 1])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:, :, 0:1], res_test[:, :, 1:2]\n",
    "print(res.shape)\n",
    "print(x_test.shape)\n",
    "print(x_res.shape)\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()  # Move to CPU before converting to NumPy\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "# Rotate the prediction 90 degrees to the left\n",
    "pred = np.rot90(pred, k=1)  # k=1 rotates 90 degrees counterclockwise\n",
    "\n",
    "# Visualization of predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred_rotated.png')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "989712c8",
   "metadata": {
    "papermill": {
     "duration": 0.098016,
     "end_time": "2024-09-29T23:30:49.691511",
     "exception": false,
     "start_time": "2024-09-29T23:30:49.593495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2831.757948,
   "end_time": "2024-09-29T23:30:51.012627",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-29T22:43:39.254679",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
