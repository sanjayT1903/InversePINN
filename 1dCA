{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c9bc2525",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T19:32:41.541149Z",
     "iopub.status.busy": "2024-10-16T19:32:41.539954Z",
     "iopub.status.idle": "2024-10-16T19:32:45.218466Z",
     "shell.execute_reply": "2024-10-16T19:32:45.217238Z"
    },
    "papermill": {
     "duration": 3.689535,
     "end_time": "2024-10-16T19:32:45.221042",
     "exception": false,
     "start_time": "2024-10-16T19:32:41.531507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cfd6dcf7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T19:32:45.238087Z",
     "iopub.status.busy": "2024-10-16T19:32:45.237209Z",
     "iopub.status.idle": "2024-10-16T19:32:45.270387Z",
     "shell.execute_reply": "2024-10-16T19:32:45.269222Z"
    },
    "papermill": {
     "duration": 0.045378,
     "end_time": "2024-10-16T19:32:45.273543",
     "exception": false,
     "start_time": "2024-10-16T19:32:45.228165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "# @article{zhao2023pinnsformer,\n",
    "#   title={PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks},\n",
    "#   author={Zhao, Leo Zhiyuan and Ding, Xueying and Prakash, B Aditya},\n",
    "#   journal={arXiv preprint arXiv:2307.11833},\n",
    "#   year={2023}\n",
    "# }\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(2, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        # pdb.set_trace()\n",
    "        # raise Exception('stop')\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eabf63e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T19:32:45.293304Z",
     "iopub.status.busy": "2024-10-16T19:32:45.292014Z",
     "iopub.status.idle": "2024-10-16T19:32:45.298912Z",
     "shell.execute_reply": "2024-10-16T19:32:45.297725Z"
    },
    "papermill": {
     "duration": 0.019051,
     "end_time": "2024-10-16T19:32:45.301694",
     "exception": false,
     "start_time": "2024-10-16T19:32:45.282643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1e-05\n"
     ]
    }
   ],
   "source": [
    "gamma_2_AC = 0.01\n",
    "gamma_1 = 10e-6\n",
    "print(gamma_1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "80a73cb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T19:32:45.316793Z",
     "iopub.status.busy": "2024-10-16T19:32:45.315839Z",
     "iopub.status.idle": "2024-10-16T19:32:45.388321Z",
     "shell.execute_reply": "2024-10-16T19:32:45.387129Z"
    },
    "papermill": {
     "duration": 0.082797,
     "end_time": "2024-10-16T19:32:45.391128",
     "exception": false,
     "start_time": "2024-10-16T19:32:45.308331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c49ac8c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T19:32:45.412624Z",
     "iopub.status.busy": "2024-10-16T19:32:45.412090Z",
     "iopub.status.idle": "2024-10-16T19:32:45.635568Z",
     "shell.execute_reply": "2024-10-16T19:32:45.634009Z"
    },
    "papermill": {
     "duration": 0.236837,
     "end_time": "2024-10-16T19:32:45.638682",
     "exception": false,
     "start_time": "2024-10-16T19:32:45.401845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data([-1, 1], [0, 1], 51, 51)\n",
    "res_test, _, _, _, _ = get_data([-1, 1], [0, 1], 101, 101)\n",
    "\n",
    "# Define the initial condition for u(x, 0)\n",
    "#def u_init(x):\n",
    "   \n",
    "    #return np.sin(n * np.pi * x / L)\n",
    "#print(res[:, 0])\n",
    "\n",
    "# Apply the initial condition to the spatial points at t=0\n",
    "#init_cond = u_init(res[:, 0])  # Assuming t=0 corresponds to the first time point\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=5, step=1e-4)\n",
    "b_left = make_time_sequence(b_left, num_step=5, step=1e-4)\n",
    "b_right = make_time_sequence(b_right, num_step=5, step=1e-4)\n",
    "b_upper = make_time_sequence(b_upper, num_step=5, step=1e-4)\n",
    "b_lower = make_time_sequence(b_lower, num_step=5, step=1e-4)\n",
    "res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Initial condition as tensor\n",
    "#init_cond = torch.tensor(init_cond, dtype=torch.float32).to(device)\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "x_res, t_res = res[:, :, 0:1], res[:, :, 1:2]\n",
    "x_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2]\n",
    "x_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2]\n",
    "x_upper, t_upper = b_upper[:,:,0:1], b_upper[:,:,1:2]\n",
    "x_lower, t_lower = b_lower[:,:,0:1], b_lower[:,:,1:2]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "53819870",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T19:32:45.656799Z",
     "iopub.status.busy": "2024-10-16T19:32:45.655852Z",
     "iopub.status.idle": "2024-10-16T19:32:47.135407Z",
     "shell.execute_reply": "2024-10-16T19:32:47.133817Z"
    },
    "papermill": {
     "duration": 1.491082,
     "end_time": "2024-10-16T19:32:47.137925",
     "exception": false,
     "start_time": "2024-10-16T19:32:45.646843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=2, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453561\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "37fba9cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T19:32:47.152627Z",
     "iopub.status.busy": "2024-10-16T19:32:47.152114Z",
     "iopub.status.idle": "2024-10-16T19:32:47.158853Z",
     "shell.execute_reply": "2024-10-16T19:32:47.157815Z"
    },
    "papermill": {
     "duration": 0.016792,
     "end_time": "2024-10-16T19:32:47.161374",
     "exception": false,
     "start_time": "2024-10-16T19:32:47.144582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_minibatch(data, batch_index, num_batches=1):\n",
    "    \"\"\"\n",
    "    Splits the data into `num_batches` parts and returns the part corresponding to `batch_index`.\n",
    "    \n",
    "    Args:\n",
    "    - data: Tensor of shape (N, *, *) where N is the number of data points (could be res, b_left, b_right, etc.)\n",
    "    - batch_index: Index of the batch to return (between 0 and num_batches-1)\n",
    "    - num_batches: Total number of batches to split the data into (default: 5)\n",
    "\n",
    "    Returns:\n",
    "    - A subset of the data corresponding to the specified batch.\n",
    "    \"\"\"\n",
    "    total_size = data.size(0)\n",
    "    batch_size = total_size // num_batches\n",
    "    start_idx = batch_index * batch_size\n",
    "    end_idx = start_idx + batch_size\n",
    "\n",
    "    # Ensure we get all remaining data for the last batch\n",
    "    if batch_index == num_batches - 1:\n",
    "        end_idx = total_size\n",
    "\n",
    "    return data[start_idx:end_idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "76a724bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T19:32:47.175573Z",
     "iopub.status.busy": "2024-10-16T19:32:47.175233Z",
     "iopub.status.idle": "2024-10-16T21:58:59.053131Z",
     "shell.execute_reply": "2024-10-16T21:58:59.052100Z"
    },
    "papermill": {
     "duration": 8771.930848,
     "end_time": "2024-10-16T21:58:59.098673",
     "exception": false,
     "start_time": "2024-10-16T19:32:47.167825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/450 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      " 44%|████▍     | 199/450 [1:04:21<1:18:20, 18.73s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 89%|████████▊ | 399/450 [2:09:29<16:48, 19.78s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 450/450 [2:26:11<00:00, 19.49s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "loss_recorder=[]\n",
    "import random \n",
    "list1 = [0]\n",
    "random.choice(list1)\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "\n",
    "#t_ic = torch.zeros_like(x_right_batch)\n",
    "k=0\n",
    "batch_index = 0\n",
    "x_res_batch = get_minibatch(x_res, batch_index)\n",
    "t_res_batch = get_minibatch(t_res, batch_index)\n",
    "\n",
    "x_left_batch = get_minibatch(x_left, batch_index)\n",
    "t_left_batch = get_minibatch(t_left, batch_index)\n",
    "x_right_batch = get_minibatch(x_right, batch_index)            \n",
    "t_right_batch = get_minibatch(t_right, batch_index)\n",
    "            \n",
    "x_upper_batch = get_minibatch(x_upper, batch_index)\n",
    "t_upper_batch = get_minibatch(t_upper, batch_index)\n",
    "x_lower_batch = get_minibatch(x_lower, batch_index)\n",
    "t_lower_batch = get_minibatch(t_lower, batch_index)\n",
    "t_ic = torch.zeros_like(x_right_batch)\n",
    "error_finish = False\n",
    "error_finish_threshold = .0005\n",
    "for i in tqdm(range(450)):\n",
    "    k+=1\n",
    "    if k % 200==0:\n",
    "        \n",
    "            print(\"progress\")\n",
    "            loss_recorder.append('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "            \n",
    "    def closure():\n",
    "        t_ic = torch.zeros_like(x_right_batch)\n",
    "        pred_res = model(x_res_batch, t_res_batch)\n",
    "        pred_left = model(x_left_batch, t_left_batch) #  Left boundary of the spatial domain (x=0) over all times.\n",
    "        pred_right = model(x_right_batch, t_right_batch) # t_right is 1\n",
    "        #print(x_right_batch)\n",
    "        pred_ic = model(x_right_batch,t_ic )\n",
    "        #print(pred_ic)\n",
    "        #return\n",
    "        pred_upper = model(x_upper_batch, t_upper_batch) #  All spatial points at the final time step (x=1).\n",
    "        pred_lower = model(x_lower_batch, t_lower_batch) #  All spatial points at the initial time step (x=-1).\n",
    "        pred_res_t0 = pred_res[:, 0, :]\n",
    "        #print(t_lower_batch) #LOWER BATCH IS X=-1 Higher is X=1\n",
    "#         print(t_right_batch)\n",
    "\n",
    "\n",
    "        u_x = torch.autograd.grad(pred_res, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res_batch, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         u_x_left = torch.autograd.grad(pred_left, x_left_batch, grad_outputs=torch.ones_like(pred_left), retain_graph=True, create_graph=True)[0]\n",
    "#         u_x_right = torch.autograd.grad(pred_right, x_right_batch, grad_outputs=torch.ones_like(pred_right), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Compute u_x at x = -1 and x = 1\n",
    "        u_x_lower = torch.autograd.grad(pred_lower, x_lower_batch, grad_outputs=torch.ones_like(pred_lower), retain_graph=True, create_graph=True)[0]\n",
    "        u_x_upper = torch.autograd.grad(pred_upper, x_upper_batch, grad_outputs=torch.ones_like(pred_upper), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        \n",
    "        check_nan(u_x, 'u_x')\n",
    "        check_nan(u_xx, 'u_xx')\n",
    "        check_nan(u_t, 'u_t')\n",
    "        check_nan(pred_res, 'pred_res')\n",
    "        check_nan(pred_ic, 'pred_ic')\n",
    "        check_nan(pred_upper, 'pred_upper')\n",
    "        check_nan(pred_lower, 'pred_lower')\n",
    "       \n",
    "        #alpha =a   # thermal diffusivity (can be modified)\n",
    "        #1. PDE LOSS eesidual\n",
    "        # Compute the first Laplacian (second derivative) of u\n",
    "        v = - u_xx\n",
    "\n",
    "        # Update the first PDE for u using the new variable v\n",
    "        interm = gamma_2_AC * (pred_res**3 - pred_res) + gamma_1 * v\n",
    "        interm_x = torch.autograd.grad(interm, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "        interm_xx = torch.autograd.grad(interm_x, x_res_batch, grad_outputs=torch.ones_like(interm_x), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Compute the loss with the updated system\n",
    "        loss_res = torch.mean((u_t - interm_xx)**2)\n",
    "\n",
    "        # Second PDE for v\n",
    "        v_loss = torch.mean((v + u_xx)**2)\n",
    "\n",
    "        #2. Loss for initial condition\n",
    "        #print(pred_ic)\n",
    "        initial_condition = -1 * torch.cos(2*torch.pi * x_right_batch)\n",
    "        #initial_condition = (x_right_batch**2) * torch.cos(torch.pi * x_right_batch)\n",
    "        loss_ic = torch.mean((pred_ic-initial_condition) ** 2)\n",
    "        \n",
    "        \n",
    "        # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "        loss_bc_1 = torch.mean((pred_upper - pred_lower) ** 2)\n",
    "        loss_bc_2 = torch.mean((u_x_lower - u_x_upper) ** 2)\n",
    "        \n",
    "        #loss_bc_2 =  torch.mean((pred_left-pred_right) ** 2) \n",
    "        loss_bc = torch.mean((loss_bc_1 + loss_bc_2)**2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), v_loss.item(),  loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        if k < 1000:\n",
    "            loss = 10*loss_res + 10*v_loss + 100*loss_ic + loss_bc\n",
    "        else:\n",
    "            loss = 100*loss_res+ 100*v_loss  + 100*loss_ic + loss_bc\n",
    "        if k ==1000:\n",
    "            print(\"Changing the Loss Function\")\n",
    "        #print(loss)\n",
    "        #print(loss_track[-1])\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        \n",
    "        if loss_res <= error_finish_threshold and loss_ic<= error_finish_threshold and loss_bc<= error_finish_threshold:\n",
    "            error_finish = True\n",
    "        \n",
    "        return loss\n",
    "    if error_finish:\n",
    "        print(\"finish early\")\n",
    "        print(\"Iteration end on\")\n",
    "        print(k)\n",
    "        break\n",
    "    else:\n",
    "        optim.step(closure)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3368041d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T21:58:59.190072Z",
     "iopub.status.busy": "2024-10-16T21:58:59.189373Z",
     "iopub.status.idle": "2024-10-16T21:58:59.194496Z",
     "shell.execute_reply": "2024-10-16T21:58:59.193614Z"
    },
    "papermill": {
     "duration": 0.054687,
     "end_time": "2024-10-16T21:58:59.196484",
     "exception": false,
     "start_time": "2024-10-16T21:58:59.141797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of loss_track: 9806\n"
     ]
    }
   ],
   "source": [
    "print(f\"Length of loss_track: {len(loss_track)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e26b4a59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T21:58:59.281382Z",
     "iopub.status.busy": "2024-10-16T21:58:59.281031Z",
     "iopub.status.idle": "2024-10-16T21:58:59.288884Z",
     "shell.execute_reply": "2024-10-16T21:58:59.288071Z"
    },
    "papermill": {
     "duration": 0.053174,
     "end_time": "2024-10-16T21:58:59.290893",
     "exception": false,
     "start_time": "2024-10-16T21:58:59.237719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "# import random \n",
    "# list1 = [0]\n",
    "# random.choice(list1)\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "\n",
    "# #t_ic = torch.zeros_like(x_right_batch)\n",
    "# k=0\n",
    "# batch_index = 0\n",
    "# x_res_batch = get_minibatch(x_res, batch_index)\n",
    "# t_res_batch = get_minibatch(t_res, batch_index)\n",
    "\n",
    "# x_left_batch = get_minibatch(x_left, batch_index)\n",
    "# t_left_batch = get_minibatch(t_left, batch_index)\n",
    "# x_right_batch = get_minibatch(x_right, batch_index)            \n",
    "# t_right_batch = get_minibatch(t_right, batch_index)\n",
    "            \n",
    "# x_upper_batch = get_minibatch(x_upper, batch_index)\n",
    "# t_upper_batch = get_minibatch(t_upper, batch_index)\n",
    "# x_lower_batch = get_minibatch(x_lower, batch_index)\n",
    "# t_lower_batch = get_minibatch(t_lower, batch_index)\n",
    "# t_ic = torch.zeros_like(x_right_batch)\n",
    "# for i in tqdm(range(10)):\n",
    "#     k+=1\n",
    "#     if k == 200:\n",
    "    \n",
    "#             print(\"progress\")\n",
    "#             k=0\n",
    "#     def closure():\n",
    "#         t_ic = torch.zeros_like(x_right_batch)\n",
    "#         pred_res = model(x_res_batch, t_res_batch)\n",
    "#         pred_left = model(x_left_batch, t_left_batch) #  Left boundary of the spatial domain (x=0) over all times.\n",
    "#         pred_right = model(x_right_batch, t_right_batch) # t_right is 1\n",
    "#         #print(x_right_batch)\n",
    "#         pred_ic = model(x_right_batch,t_ic )\n",
    "#         #print(pred_ic)\n",
    "#         #return\n",
    "#         pred_upper = model(x_upper_batch, t_upper_batch) #  All spatial points at the final time step (x=1).\n",
    "#         pred_lower = model(x_lower_batch, t_lower_batch) #  All spatial points at the initial time step (x=-1).\n",
    "#         pred_res_t0 = pred_res[:, 0, :]\n",
    "#         #print(t_lower_batch) #LOWER BATCH IS X=-1 Higher is X=1\n",
    "# #         print(t_right_batch)\n",
    "\n",
    "\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res_batch, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "# #         u_x_left = torch.autograd.grad(pred_left, x_left_batch, grad_outputs=torch.ones_like(pred_left), retain_graph=True, create_graph=True)[0]\n",
    "# #         u_x_right = torch.autograd.grad(pred_right, x_right_batch, grad_outputs=torch.ones_like(pred_right), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Compute u_x at x = -1 and x = 1\n",
    "#         u_x_lower = torch.autograd.grad(pred_lower, x_lower_batch, grad_outputs=torch.ones_like(pred_lower), retain_graph=True, create_graph=True)[0]\n",
    "#         u_x_upper = torch.autograd.grad(pred_upper, x_upper_batch, grad_outputs=torch.ones_like(pred_upper), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        \n",
    "#         check_nan(u_x, 'u_x')\n",
    "#         check_nan(u_xx, 'u_xx')\n",
    "#         check_nan(u_t, 'u_t')\n",
    "#         check_nan(pred_res, 'pred_res')\n",
    "#         check_nan(pred_ic, 'pred_ic')\n",
    "#         check_nan(pred_upper, 'pred_upper')\n",
    "#         check_nan(pred_lower, 'pred_lower')\n",
    "       \n",
    "#         #alpha =a   # thermal diffusivity (can be modified)\n",
    "#         #1. PDE LOSS eesidual\n",
    "#         loss_res =torch.mean((u_t - gamma_1 * u_xx + gamma_2_AC * (pred_res**3 - pred_res))**2)\n",
    "\n",
    "#         #2. Loss for initial condition\n",
    "#         #print(pred_ic)\n",
    "#         initial_condition = (x_right_batch**2) * torch.sin(2*torch.pi * x_right_batch)\n",
    "#         #initial_condition = (x_right_batch**2) * torch.cos(torch.pi * x_right_batch)\n",
    "#         loss_ic = torch.mean((pred_ic-initial_condition) ** 2)\n",
    "        \n",
    "        \n",
    "#         # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "#         loss_bc_1 = torch.mean((pred_upper - pred_lower) ** 2)\n",
    "#         loss_bc_2 = torch.mean((u_x_lower - u_x_upper) ** 2)\n",
    "        \n",
    "#         #loss_bc_2 =  torch.mean((pred_left-pred_right) ** 2) \n",
    "#         loss_bc = torch.mean((loss_bc_1 + loss_bc_2)**2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 10*loss_res + 100*loss_ic + loss_bc\n",
    "#         #print(loss)\n",
    "#         #print(loss_track[-1])\n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "        \n",
    "#         return loss\n",
    "    \n",
    "#     optim.step(closure)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8793c95a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T21:58:59.378866Z",
     "iopub.status.busy": "2024-10-16T21:58:59.378474Z",
     "iopub.status.idle": "2024-10-16T21:58:59.396939Z",
     "shell.execute_reply": "2024-10-16T21:58:59.396102Z"
    },
    "papermill": {
     "duration": 0.064676,
     "end_time": "2024-10-16T21:58:59.399073",
     "exception": false,
     "start_time": "2024-10-16T21:58:59.334397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000165, Loss_mu: 0.000000, Loss_IC: 0.000003, loss_bc: 0.000021\n",
      "Train Loss: 0.000188\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_mu: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2], loss_track[-1][3]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ba3de138",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T21:58:59.488037Z",
     "iopub.status.busy": "2024-10-16T21:58:59.487632Z",
     "iopub.status.idle": "2024-10-16T21:58:59.950574Z",
     "shell.execute_reply": "2024-10-16T21:58:59.949507Z"
    },
    "papermill": {
     "duration": 0.510658,
     "end_time": "2024-10-16T21:58:59.952892",
     "exception": false,
     "start_time": "2024-10-16T21:58:59.442234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "initial_condition_loss = loss_track[:, 2]\n",
    "mu_decouple_loss = loss_track[:, 1]\n",
    "boundary_condition_loss = loss_track[:, 3]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.plot(mu_decouple_loss, label='Decouple Loss', color='y')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "\n",
    "plt.show()\n",
    "plt.savefig('./1dCALoss.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d6e14f9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T21:59:00.052645Z",
     "iopub.status.busy": "2024-10-16T21:59:00.051744Z",
     "iopub.status.idle": "2024-10-16T21:59:00.704419Z",
     "shell.execute_reply": "2024-10-16T21:59:00.703405Z"
    },
    "papermill": {
     "duration": 0.705357,
     "end_time": "2024-10-16T21:59:00.706843",
     "exception": false,
     "start_time": "2024-10-16T21:59:00.001486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2601, 5, 2])\n",
      "torch.Size([10201, 5, 1])\n",
      "torch.Size([2601, 5, 1])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2]\n",
    "print(res.shape)\n",
    "print(x_test.shape)\n",
    "print(x_res.shape)\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()  # Move to CPU before converting to NumPy\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "# Visualization of predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred.png')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9500b01b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T21:59:00.798278Z",
     "iopub.status.busy": "2024-10-16T21:59:00.797866Z",
     "iopub.status.idle": "2024-10-16T21:59:01.551253Z",
     "shell.execute_reply": "2024-10-16T21:59:01.550344Z"
    },
    "papermill": {
     "duration": 0.801999,
     "end_time": "2024-10-16T21:59:01.553370",
     "exception": false,
     "start_time": "2024-10-16T21:59:00.751371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2601, 5, 2])\n",
      "torch.Size([10201, 5, 1])\n",
      "torch.Size([2601, 5, 1])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:, :, 0:1], res_test[:, :, 1:2]\n",
    "print(res.shape)\n",
    "print(x_test.shape)\n",
    "print(x_res.shape)\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()  # Move to CPU before converting to NumPy\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "# Rotate the prediction 90 degrees to the left\n",
    "pred = np.rot90(pred, k=1)  # k=1 rotates 90 degrees counterclockwise\n",
    "\n",
    "# Visualization of predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred_rotated.png')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7faf98c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T21:59:01.647309Z",
     "iopub.status.busy": "2024-10-16T21:59:01.646475Z",
     "iopub.status.idle": "2024-10-16T21:59:02.700096Z",
     "shell.execute_reply": "2024-10-16T21:59:02.699037Z"
    },
    "papermill": {
     "duration": 1.103261,
     "end_time": "2024-10-16T21:59:02.702595",
     "exception": false,
     "start_time": "2024-10-16T21:59:01.599334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x400 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create the x grid (spatial domain) and select specific time steps for visualization\n",
    "x_values = np.linspace(-1, 1, 101)  # Spatial domain from -1 to 1 with 101 points\n",
    "time_steps = [0.0, 0.25, 0.75, 1.0]  # The time steps you want to visualize\n",
    "time_steps = [0.0] \n",
    "# Plot the predicted solutions at specific time steps\n",
    "fig, axes = plt.subplots(1, 4, figsize=(16, 4), sharey=True)\n",
    "\n",
    "for idx, t in enumerate(time_steps):\n",
    "    # Extract the prediction for the current time step 't'\n",
    "    x_test_tensor = torch.tensor(x_values, dtype=torch.float32).unsqueeze(1).to(device)\n",
    "    t_test_tensor = torch.tensor(np.full_like(x_values, t), dtype=torch.float32).unsqueeze(1).to(device)\n",
    "\n",
    "    with torch.no_grad():\n",
    "        pred_u = model(x_test_tensor, t_test_tensor).cpu().numpy()  # Predicted u(x, t) from the model\n",
    "#         print(pred_u)\n",
    "#         print(x_test_tensor.shape)\n",
    "#         print(t_test_tensor)\n",
    "    # Plotting predicted solutions only\n",
    "    axes[idx].plot(x_values, pred_u, 'r--', label='Prediction')  # Predicted solution in red dashed line\n",
    "    axes[idx].set_title(f'$t={t}$')\n",
    "    axes[idx].set_xlabel('$x$')\n",
    "    axes[idx].set_xlim([-1, 1])\n",
    "    axes[idx].set_ylim([-1, 1])\n",
    "    axes[idx].legend()\n",
    "\n",
    "axes[0].set_ylabel('$u(t,x)$')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1668d40c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T21:59:02.802321Z",
     "iopub.status.busy": "2024-10-16T21:59:02.801905Z",
     "iopub.status.idle": "2024-10-16T21:59:04.157445Z",
     "shell.execute_reply": "2024-10-16T21:59:04.156457Z"
    },
    "papermill": {
     "duration": 1.407752,
     "end_time": "2024-10-16T21:59:04.159896",
     "exception": false,
     "start_time": "2024-10-16T21:59:02.752144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy.io import loadmat\n",
    "def gen_testdata():\n",
    "    data = loadmat(\"/kaggle/input/allen-cahn/Allen_Cahn.mat\")\n",
    "\n",
    "    t = data[\"t\"]\n",
    "    x = data[\"x\"]\n",
    "    u = data[\"u\"]\n",
    "\n",
    "    dt = dx = 0.01\n",
    "    xx, tt = np.meshgrid(x, t)\n",
    "    X = np.vstack((np.ravel(xx), np.ravel(tt))).T\n",
    "    y = u.flatten()[:, None]\n",
    "    return X, y\n",
    "\n",
    "X, y_true = gen_testdata()\n",
    "\n",
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(X, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3145624d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T21:59:04.257689Z",
     "iopub.status.busy": "2024-10-16T21:59:04.256851Z",
     "iopub.status.idle": "2024-10-16T21:59:04.262004Z",
     "shell.execute_reply": "2024-10-16T21:59:04.261052Z"
    },
    "papermill": {
     "duration": 0.055616,
     "end_time": "2024-10-16T21:59:04.264751",
     "exception": false,
     "start_time": "2024-10-16T21:59:04.209135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Loss Res: 0.001584, Loss_IC: 0.000000, loss_bc: 0.000029', 'Loss Res: 0.000277, Loss_IC: 0.000000, loss_bc: 0.000004']\n"
     ]
    }
   ],
   "source": [
    "print(loss_recorder)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5827901,
     "sourceId": 9563008,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30787,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8787.323951,
   "end_time": "2024-10-16T21:59:05.736783",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-16T19:32:38.412832",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
