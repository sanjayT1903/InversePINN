{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b4e67165",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T02:49:38.459914Z",
     "iopub.status.busy": "2024-10-16T02:49:38.459518Z",
     "iopub.status.idle": "2024-10-16T02:49:41.610220Z",
     "shell.execute_reply": "2024-10-16T02:49:41.609240Z"
    },
    "papermill": {
     "duration": 3.160506,
     "end_time": "2024-10-16T02:49:41.612666",
     "exception": false,
     "start_time": "2024-10-16T02:49:38.452160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3e7b3a00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T02:49:41.625750Z",
     "iopub.status.busy": "2024-10-16T02:49:41.624838Z",
     "iopub.status.idle": "2024-10-16T02:49:41.649141Z",
     "shell.execute_reply": "2024-10-16T02:49:41.648240Z"
    },
    "papermill": {
     "duration": 0.03289,
     "end_time": "2024-10-16T02:49:41.651262",
     "exception": false,
     "start_time": "2024-10-16T02:49:41.618372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "# @article{zhao2023pinnsformer,\n",
    "#   title={PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks},\n",
    "#   author={Zhao, Leo Zhiyuan and Ding, Xueying and Prakash, B Aditya},\n",
    "#   journal={arXiv preprint arXiv:2307.11833},\n",
    "#   year={2023}\n",
    "# }\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(2, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        # pdb.set_trace()\n",
    "        # raise Exception('stop')\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "952f1267",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T02:49:41.663559Z",
     "iopub.status.busy": "2024-10-16T02:49:41.662921Z",
     "iopub.status.idle": "2024-10-16T02:49:41.667855Z",
     "shell.execute_reply": "2024-10-16T02:49:41.666961Z"
    },
    "papermill": {
     "duration": 0.013451,
     "end_time": "2024-10-16T02:49:41.670137",
     "exception": false,
     "start_time": "2024-10-16T02:49:41.656686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1e-05\n"
     ]
    }
   ],
   "source": [
    "gamma_2_AC = 0.01\n",
    "gamma_1 = 10e-6\n",
    "print(gamma_1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d4ec6b06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T02:49:41.682049Z",
     "iopub.status.busy": "2024-10-16T02:49:41.681701Z",
     "iopub.status.idle": "2024-10-16T02:49:41.747532Z",
     "shell.execute_reply": "2024-10-16T02:49:41.746397Z"
    },
    "papermill": {
     "duration": 0.074491,
     "end_time": "2024-10-16T02:49:41.749912",
     "exception": false,
     "start_time": "2024-10-16T02:49:41.675421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "26920eb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T02:49:41.763128Z",
     "iopub.status.busy": "2024-10-16T02:49:41.762787Z",
     "iopub.status.idle": "2024-10-16T02:49:41.960013Z",
     "shell.execute_reply": "2024-10-16T02:49:41.959029Z"
    },
    "papermill": {
     "duration": 0.206347,
     "end_time": "2024-10-16T02:49:41.962820",
     "exception": false,
     "start_time": "2024-10-16T02:49:41.756473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data([-1, 1], [0, 1], 51, 51)\n",
    "res_test, _, _, _, _ = get_data([-1, 1], [0, 1], 101, 101)\n",
    "\n",
    "# Define the initial condition for u(x, 0)\n",
    "#def u_init(x):\n",
    "   \n",
    "    #return np.sin(n * np.pi * x / L)\n",
    "#print(res[:, 0])\n",
    "\n",
    "# Apply the initial condition to the spatial points at t=0\n",
    "#init_cond = u_init(res[:, 0])  # Assuming t=0 corresponds to the first time point\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=5, step=1e-4)\n",
    "b_left = make_time_sequence(b_left, num_step=5, step=1e-4)\n",
    "b_right = make_time_sequence(b_right, num_step=5, step=1e-4)\n",
    "b_upper = make_time_sequence(b_upper, num_step=5, step=1e-4)\n",
    "b_lower = make_time_sequence(b_lower, num_step=5, step=1e-4)\n",
    "res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Initial condition as tensor\n",
    "#init_cond = torch.tensor(init_cond, dtype=torch.float32).to(device)\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "x_res, t_res = res[:, :, 0:1], res[:, :, 1:2]\n",
    "x_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2]\n",
    "x_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2]\n",
    "x_upper, t_upper = b_upper[:,:,0:1], b_upper[:,:,1:2]\n",
    "x_lower, t_lower = b_lower[:,:,0:1], b_lower[:,:,1:2]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b5ff29e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T02:49:41.977621Z",
     "iopub.status.busy": "2024-10-16T02:49:41.976768Z",
     "iopub.status.idle": "2024-10-16T02:49:43.347584Z",
     "shell.execute_reply": "2024-10-16T02:49:43.345791Z"
    },
    "papermill": {
     "duration": 1.381561,
     "end_time": "2024-10-16T02:49:43.351040",
     "exception": false,
     "start_time": "2024-10-16T02:49:41.969479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=2, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453561\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "83da3156",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T02:49:43.365946Z",
     "iopub.status.busy": "2024-10-16T02:49:43.365280Z",
     "iopub.status.idle": "2024-10-16T02:49:43.372849Z",
     "shell.execute_reply": "2024-10-16T02:49:43.371955Z"
    },
    "papermill": {
     "duration": 0.017567,
     "end_time": "2024-10-16T02:49:43.374865",
     "exception": false,
     "start_time": "2024-10-16T02:49:43.357298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_minibatch(data, batch_index, num_batches=1):\n",
    "    \"\"\"\n",
    "    Splits the data into `num_batches` parts and returns the part corresponding to `batch_index`.\n",
    "    \n",
    "    Args:\n",
    "    - data: Tensor of shape (N, *, *) where N is the number of data points (could be res, b_left, b_right, etc.)\n",
    "    - batch_index: Index of the batch to return (between 0 and num_batches-1)\n",
    "    - num_batches: Total number of batches to split the data into (default: 5)\n",
    "\n",
    "    Returns:\n",
    "    - A subset of the data corresponding to the specified batch.\n",
    "    \"\"\"\n",
    "    total_size = data.size(0)\n",
    "    batch_size = total_size // num_batches\n",
    "    start_idx = batch_index * batch_size\n",
    "    end_idx = start_idx + batch_size\n",
    "\n",
    "    # Ensure we get all remaining data for the last batch\n",
    "    if batch_index == num_batches - 1:\n",
    "        end_idx = total_size\n",
    "\n",
    "    return data[start_idx:end_idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cdfc5a95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T02:49:43.389291Z",
     "iopub.status.busy": "2024-10-16T02:49:43.388960Z",
     "iopub.status.idle": "2024-10-16T06:16:45.464277Z",
     "shell.execute_reply": "2024-10-16T06:16:45.463275Z"
    },
    "papermill": {
     "duration": 12422.084352,
     "end_time": "2024-10-16T06:16:45.466497",
     "exception": false,
     "start_time": "2024-10-16T02:49:43.382145",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1000 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      " 20%|█▉        | 199/1000 [1:04:04<4:10:19, 18.75s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 40%|███▉      | 399/1000 [2:08:43<3:16:43, 19.64s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 60%|█████▉    | 599/1000 [2:51:28<35:17,  5.28s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 80%|███████▉  | 799/1000 [3:09:04<17:39,  5.27s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████▉| 999/1000 [3:26:39<00:05,  5.27s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n",
      "Changing the Loss Function\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1000/1000 [3:27:02<00:00, 12.42s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "loss_recorder=[]\n",
    "import random \n",
    "list1 = [0]\n",
    "random.choice(list1)\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "\n",
    "#t_ic = torch.zeros_like(x_right_batch)\n",
    "k=0\n",
    "batch_index = 0\n",
    "x_res_batch = get_minibatch(x_res, batch_index)\n",
    "t_res_batch = get_minibatch(t_res, batch_index)\n",
    "\n",
    "x_left_batch = get_minibatch(x_left, batch_index)\n",
    "t_left_batch = get_minibatch(t_left, batch_index)\n",
    "x_right_batch = get_minibatch(x_right, batch_index)            \n",
    "t_right_batch = get_minibatch(t_right, batch_index)\n",
    "            \n",
    "x_upper_batch = get_minibatch(x_upper, batch_index)\n",
    "t_upper_batch = get_minibatch(t_upper, batch_index)\n",
    "x_lower_batch = get_minibatch(x_lower, batch_index)\n",
    "t_lower_batch = get_minibatch(t_lower, batch_index)\n",
    "t_ic = torch.zeros_like(x_right_batch)\n",
    "error_finish = False\n",
    "error_finish_threshold = .0005\n",
    "for i in tqdm(range(1000)):\n",
    "    k+=1\n",
    "    if k % 200==0:\n",
    "        \n",
    "            print(\"progress\")\n",
    "            loss_recorder.append('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "            \n",
    "    def closure():\n",
    "        t_ic = torch.zeros_like(x_right_batch)\n",
    "        pred_res = model(x_res_batch, t_res_batch)\n",
    "        pred_left = model(x_left_batch, t_left_batch) #  Left boundary of the spatial domain (x=0) over all times.\n",
    "        pred_right = model(x_right_batch, t_right_batch) # t_right is 1\n",
    "        #print(x_right_batch)\n",
    "        pred_ic = model(x_right_batch,t_ic )\n",
    "        #print(pred_ic)\n",
    "        #return\n",
    "        pred_upper = model(x_upper_batch, t_upper_batch) #  All spatial points at the final time step (x=1).\n",
    "        pred_lower = model(x_lower_batch, t_lower_batch) #  All spatial points at the initial time step (x=-1).\n",
    "        pred_res_t0 = pred_res[:, 0, :]\n",
    "        #print(t_lower_batch) #LOWER BATCH IS X=-1 Higher is X=1\n",
    "#         print(t_right_batch)\n",
    "\n",
    "\n",
    "        u_x = torch.autograd.grad(pred_res, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res_batch, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         u_x_left = torch.autograd.grad(pred_left, x_left_batch, grad_outputs=torch.ones_like(pred_left), retain_graph=True, create_graph=True)[0]\n",
    "#         u_x_right = torch.autograd.grad(pred_right, x_right_batch, grad_outputs=torch.ones_like(pred_right), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Compute u_x at x = -1 and x = 1\n",
    "        u_x_lower = torch.autograd.grad(pred_lower, x_lower_batch, grad_outputs=torch.ones_like(pred_lower), retain_graph=True, create_graph=True)[0]\n",
    "        u_x_upper = torch.autograd.grad(pred_upper, x_upper_batch, grad_outputs=torch.ones_like(pred_upper), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        \n",
    "        check_nan(u_x, 'u_x')\n",
    "        check_nan(u_xx, 'u_xx')\n",
    "        check_nan(u_t, 'u_t')\n",
    "        check_nan(pred_res, 'pred_res')\n",
    "        check_nan(pred_ic, 'pred_ic')\n",
    "        check_nan(pred_upper, 'pred_upper')\n",
    "        check_nan(pred_lower, 'pred_lower')\n",
    "       \n",
    "        #alpha =a   # thermal diffusivity (can be modified)\n",
    "        #1. PDE LOSS eesidual\n",
    "        # Compute the first Laplacian (second derivative) of u\n",
    "        v = - u_xx\n",
    "\n",
    "        # Update the first PDE for u using the new variable v\n",
    "        interm = gamma_2_AC * (pred_res**3 - pred_res) + gamma_1 * v\n",
    "        interm_x = torch.autograd.grad(interm, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "        interm_xx = torch.autograd.grad(interm_x, x_res_batch, grad_outputs=torch.ones_like(interm_x), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Compute the loss with the updated system\n",
    "        loss_res = torch.mean((u_t - interm_xx)**2)\n",
    "\n",
    "        # Second PDE for v\n",
    "        v_loss = torch.mean((v + u_xx)**2)\n",
    "\n",
    "        #2. Loss for initial condition\n",
    "        #print(pred_ic)\n",
    "        initial_condition = -1 * torch.cos(2*torch.pi * x_right_batch)\n",
    "        #initial_condition = (x_right_batch**2) * torch.cos(torch.pi * x_right_batch)\n",
    "        loss_ic = torch.mean((pred_ic-initial_condition) ** 2)\n",
    "        \n",
    "        \n",
    "        # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "        loss_bc_1 = torch.mean((pred_upper - pred_lower) ** 2)\n",
    "        loss_bc_2 = torch.mean((u_x_lower - u_x_upper) ** 2)\n",
    "        \n",
    "        #loss_bc_2 =  torch.mean((pred_left-pred_right) ** 2) \n",
    "        loss_bc = torch.mean((loss_bc_1 + loss_bc_2)**2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), v_loss.item(),  loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        if k < 1000:\n",
    "            loss = 10*loss_res + 10*v_loss + 100*loss_ic + loss_bc\n",
    "        else:\n",
    "            loss = 100*loss_res+ 100*v_loss  + 100*loss_ic + loss_bc\n",
    "        if k ==1000:\n",
    "            print(\"Changing the Loss Function\")\n",
    "        #print(loss)\n",
    "        #print(loss_track[-1])\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        \n",
    "        if loss_res <= error_finish_threshold and loss_ic<= error_finish_threshold and loss_bc<= error_finish_threshold:\n",
    "            error_finish = True\n",
    "        \n",
    "        return loss\n",
    "    if error_finish:\n",
    "        print(\"finish early\")\n",
    "        print(\"Iteration end on\")\n",
    "        print(k)\n",
    "        break\n",
    "    else:\n",
    "        optim.step(closure)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7ffdcca9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T06:16:45.639730Z",
     "iopub.status.busy": "2024-10-16T06:16:45.639328Z",
     "iopub.status.idle": "2024-10-16T06:16:45.644720Z",
     "shell.execute_reply": "2024-10-16T06:16:45.643722Z"
    },
    "papermill": {
     "duration": 0.095759,
     "end_time": "2024-10-16T06:16:45.647245",
     "exception": false,
     "start_time": "2024-10-16T06:16:45.551486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of loss_track: 14002\n"
     ]
    }
   ],
   "source": [
    "print(f\"Length of loss_track: {len(loss_track)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6a6205b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T06:16:45.822433Z",
     "iopub.status.busy": "2024-10-16T06:16:45.822070Z",
     "iopub.status.idle": "2024-10-16T06:16:45.829719Z",
     "shell.execute_reply": "2024-10-16T06:16:45.828786Z"
    },
    "papermill": {
     "duration": 0.097266,
     "end_time": "2024-10-16T06:16:45.831709",
     "exception": false,
     "start_time": "2024-10-16T06:16:45.734443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "# import random \n",
    "# list1 = [0]\n",
    "# random.choice(list1)\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "\n",
    "# #t_ic = torch.zeros_like(x_right_batch)\n",
    "# k=0\n",
    "# batch_index = 0\n",
    "# x_res_batch = get_minibatch(x_res, batch_index)\n",
    "# t_res_batch = get_minibatch(t_res, batch_index)\n",
    "\n",
    "# x_left_batch = get_minibatch(x_left, batch_index)\n",
    "# t_left_batch = get_minibatch(t_left, batch_index)\n",
    "# x_right_batch = get_minibatch(x_right, batch_index)            \n",
    "# t_right_batch = get_minibatch(t_right, batch_index)\n",
    "            \n",
    "# x_upper_batch = get_minibatch(x_upper, batch_index)\n",
    "# t_upper_batch = get_minibatch(t_upper, batch_index)\n",
    "# x_lower_batch = get_minibatch(x_lower, batch_index)\n",
    "# t_lower_batch = get_minibatch(t_lower, batch_index)\n",
    "# t_ic = torch.zeros_like(x_right_batch)\n",
    "# for i in tqdm(range(10)):\n",
    "#     k+=1\n",
    "#     if k == 200:\n",
    "    \n",
    "#             print(\"progress\")\n",
    "#             k=0\n",
    "#     def closure():\n",
    "#         t_ic = torch.zeros_like(x_right_batch)\n",
    "#         pred_res = model(x_res_batch, t_res_batch)\n",
    "#         pred_left = model(x_left_batch, t_left_batch) #  Left boundary of the spatial domain (x=0) over all times.\n",
    "#         pred_right = model(x_right_batch, t_right_batch) # t_right is 1\n",
    "#         #print(x_right_batch)\n",
    "#         pred_ic = model(x_right_batch,t_ic )\n",
    "#         #print(pred_ic)\n",
    "#         #return\n",
    "#         pred_upper = model(x_upper_batch, t_upper_batch) #  All spatial points at the final time step (x=1).\n",
    "#         pred_lower = model(x_lower_batch, t_lower_batch) #  All spatial points at the initial time step (x=-1).\n",
    "#         pred_res_t0 = pred_res[:, 0, :]\n",
    "#         #print(t_lower_batch) #LOWER BATCH IS X=-1 Higher is X=1\n",
    "# #         print(t_right_batch)\n",
    "\n",
    "\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res_batch, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "# #         u_x_left = torch.autograd.grad(pred_left, x_left_batch, grad_outputs=torch.ones_like(pred_left), retain_graph=True, create_graph=True)[0]\n",
    "# #         u_x_right = torch.autograd.grad(pred_right, x_right_batch, grad_outputs=torch.ones_like(pred_right), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Compute u_x at x = -1 and x = 1\n",
    "#         u_x_lower = torch.autograd.grad(pred_lower, x_lower_batch, grad_outputs=torch.ones_like(pred_lower), retain_graph=True, create_graph=True)[0]\n",
    "#         u_x_upper = torch.autograd.grad(pred_upper, x_upper_batch, grad_outputs=torch.ones_like(pred_upper), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        \n",
    "#         check_nan(u_x, 'u_x')\n",
    "#         check_nan(u_xx, 'u_xx')\n",
    "#         check_nan(u_t, 'u_t')\n",
    "#         check_nan(pred_res, 'pred_res')\n",
    "#         check_nan(pred_ic, 'pred_ic')\n",
    "#         check_nan(pred_upper, 'pred_upper')\n",
    "#         check_nan(pred_lower, 'pred_lower')\n",
    "       \n",
    "#         #alpha =a   # thermal diffusivity (can be modified)\n",
    "#         #1. PDE LOSS eesidual\n",
    "#         loss_res =torch.mean((u_t - gamma_1 * u_xx + gamma_2_AC * (pred_res**3 - pred_res))**2)\n",
    "\n",
    "#         #2. Loss for initial condition\n",
    "#         #print(pred_ic)\n",
    "#         initial_condition = (x_right_batch**2) * torch.sin(2*torch.pi * x_right_batch)\n",
    "#         #initial_condition = (x_right_batch**2) * torch.cos(torch.pi * x_right_batch)\n",
    "#         loss_ic = torch.mean((pred_ic-initial_condition) ** 2)\n",
    "        \n",
    "        \n",
    "#         # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "#         loss_bc_1 = torch.mean((pred_upper - pred_lower) ** 2)\n",
    "#         loss_bc_2 = torch.mean((u_x_lower - u_x_upper) ** 2)\n",
    "        \n",
    "#         #loss_bc_2 =  torch.mean((pred_left-pred_right) ** 2) \n",
    "#         loss_bc = torch.mean((loss_bc_1 + loss_bc_2)**2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 10*loss_res + 100*loss_ic + loss_bc\n",
    "#         #print(loss)\n",
    "#         #print(loss_track[-1])\n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "        \n",
    "#         return loss\n",
    "    \n",
    "#     optim.step(closure)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "29c87594",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T06:16:46.005242Z",
     "iopub.status.busy": "2024-10-16T06:16:46.004546Z",
     "iopub.status.idle": "2024-10-16T06:16:46.022798Z",
     "shell.execute_reply": "2024-10-16T06:16:46.021737Z"
    },
    "papermill": {
     "duration": 0.107149,
     "end_time": "2024-10-16T06:16:46.024795",
     "exception": false,
     "start_time": "2024-10-16T06:16:45.917646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000097, Loss_mu: 0.000000, Loss_IC: 0.000003, loss_bc: 0.000017\n",
      "Train Loss: 0.000117\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_mu: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2], loss_track[-1][3]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "37608eb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T06:16:46.202413Z",
     "iopub.status.busy": "2024-10-16T06:16:46.201553Z",
     "iopub.status.idle": "2024-10-16T06:16:46.583547Z",
     "shell.execute_reply": "2024-10-16T06:16:46.582603Z"
    },
    "papermill": {
     "duration": 0.47326,
     "end_time": "2024-10-16T06:16:46.585715",
     "exception": false,
     "start_time": "2024-10-16T06:16:46.112455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "initial_condition_loss = loss_track[:, 2]\n",
    "mu_decouple_loss = loss_track[:, 1]\n",
    "boundary_condition_loss = loss_track[:, 3]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.plot(mu_decouple_loss, label='Decouple Loss', color='y')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "\n",
    "plt.show()\n",
    "plt.savefig('./1dCALoss.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f4794e41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T06:16:46.764035Z",
     "iopub.status.busy": "2024-10-16T06:16:46.763608Z",
     "iopub.status.idle": "2024-10-16T06:16:47.340548Z",
     "shell.execute_reply": "2024-10-16T06:16:47.339569Z"
    },
    "papermill": {
     "duration": 0.669905,
     "end_time": "2024-10-16T06:16:47.342642",
     "exception": false,
     "start_time": "2024-10-16T06:16:46.672737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2601, 5, 2])\n",
      "torch.Size([10201, 5, 1])\n",
      "torch.Size([2601, 5, 1])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2]\n",
    "print(res.shape)\n",
    "print(x_test.shape)\n",
    "print(x_res.shape)\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()  # Move to CPU before converting to NumPy\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "# Visualization of predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred.png')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5abbdb1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T06:16:47.519039Z",
     "iopub.status.busy": "2024-10-16T06:16:47.518284Z",
     "iopub.status.idle": "2024-10-16T06:16:47.972199Z",
     "shell.execute_reply": "2024-10-16T06:16:47.971269Z"
    },
    "papermill": {
     "duration": 0.544496,
     "end_time": "2024-10-16T06:16:47.974230",
     "exception": false,
     "start_time": "2024-10-16T06:16:47.429734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2601, 5, 2])\n",
      "torch.Size([10201, 5, 1])\n",
      "torch.Size([2601, 5, 1])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:, :, 0:1], res_test[:, :, 1:2]\n",
    "print(res.shape)\n",
    "print(x_test.shape)\n",
    "print(x_res.shape)\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()  # Move to CPU before converting to NumPy\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "# Rotate the prediction 90 degrees to the left\n",
    "pred = np.rot90(pred, k=1)  # k=1 rotates 90 degrees counterclockwise\n",
    "\n",
    "# Visualization of predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred_rotated.png')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0cdf1f9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T06:16:48.207309Z",
     "iopub.status.busy": "2024-10-16T06:16:48.206435Z",
     "iopub.status.idle": "2024-10-16T06:16:48.954373Z",
     "shell.execute_reply": "2024-10-16T06:16:48.953400Z"
    },
    "papermill": {
     "duration": 0.83887,
     "end_time": "2024-10-16T06:16:48.956476",
     "exception": false,
     "start_time": "2024-10-16T06:16:48.117606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x400 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create the x grid (spatial domain) and select specific time steps for visualization\n",
    "x_values = np.linspace(-1, 1, 101)  # Spatial domain from -1 to 1 with 101 points\n",
    "time_steps = [0.0, 0.25, 0.75, 1.0]  # The time steps you want to visualize\n",
    "time_steps = [0.0] \n",
    "# Plot the predicted solutions at specific time steps\n",
    "fig, axes = plt.subplots(1, 4, figsize=(16, 4), sharey=True)\n",
    "\n",
    "for idx, t in enumerate(time_steps):\n",
    "    # Extract the prediction for the current time step 't'\n",
    "    x_test_tensor = torch.tensor(x_values, dtype=torch.float32).unsqueeze(1).to(device)\n",
    "    t_test_tensor = torch.tensor(np.full_like(x_values, t), dtype=torch.float32).unsqueeze(1).to(device)\n",
    "\n",
    "    with torch.no_grad():\n",
    "        pred_u = model(x_test_tensor, t_test_tensor).cpu().numpy()  # Predicted u(x, t) from the model\n",
    "#         print(pred_u)\n",
    "#         print(x_test_tensor.shape)\n",
    "#         print(t_test_tensor)\n",
    "    # Plotting predicted solutions only\n",
    "    axes[idx].plot(x_values, pred_u, 'r--', label='Prediction')  # Predicted solution in red dashed line\n",
    "    axes[idx].set_title(f'$t={t}$')\n",
    "    axes[idx].set_xlabel('$x$')\n",
    "    axes[idx].set_xlim([-1, 1])\n",
    "    axes[idx].set_ylim([-1, 1])\n",
    "    axes[idx].legend()\n",
    "\n",
    "axes[0].set_ylabel('$u(t,x)$')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1380a112",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T06:16:49.133355Z",
     "iopub.status.busy": "2024-10-16T06:16:49.132943Z",
     "iopub.status.idle": "2024-10-16T06:16:50.383109Z",
     "shell.execute_reply": "2024-10-16T06:16:50.381912Z"
    },
    "papermill": {
     "duration": 1.341421,
     "end_time": "2024-10-16T06:16:50.385524",
     "exception": false,
     "start_time": "2024-10-16T06:16:49.044103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEiCAYAAAACg5K6AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABmDElEQVR4nO2deZwUxRn3f929M3sAi9yHLqcHyiGCQsADjSgRxHjjEQTfKCSiRjCvgNeKF6JEUaKiJvEEUaJ4QYyAmIjyGg82oiIGWQWRXUVkl3OP6Xr/mKme6uqqPmZmd3an6/f54E5XV/dUjzPPfOfXTz2lEUIIlJSUlJRySnq2B6CkpKSklHmp4K6kpKSUg1LBXUlJSSkHpYK7kpKSUg5KBXclJSWlHJQK7kpKSko5KBXclZSUlHJQKrgrKSkp5aBUcFdSUlLKQeVEcO/RowcmTpxobb/zzjvQNA3vvPNO1sbEix9jpnTVVVfhtNNOy/h5eS1YsADdunVDTU1Ngz9XU9NTTz0FTdPwzTffWG0nn3wyTj755KyNKdOaOHEiWrZsme1hNHk1xdgiU9rBnb7x6b+CggIcfvjhuPrqq1FZWZmJMTaali9fjttuuy3bw/Ct8vJy/OUvf8GNN96YsXPefffdeOWVVxztEydORG1tLR577LGMPRfV9u3bMWPGDJxyyilo1aqV64enR48e1ntN13UcdNBB6N+/PyZNmoQPPvggpecfMmQINE3Do48+msZVNK6qq6sxa9YsHH300WjZsiUKCwvRr18/TJ8+Hd9//322hycVDY6yf4sXL872EAEAjzzyCJ566qlsDyMt5WXqRLfffjt69uyJAwcOYM2aNXj00UexfPlyfPbZZygqKsrU0/jSSSedhP379yMajQY6bvny5Xj44YebTYB/8MEH0bNnT5xyyikZO+fdd9+N888/H2effbatvaCgABMmTMD999+Pa665BpqmZew5N27ciDlz5uCwww5D//79sXbtWtf+AwcOxPXXXw8A2L17NzZs2IAlS5bgiSeewNSpU3H//ff7fu7//e9/+PDDD9GjRw8sXLgQv//979O6lsbQ5s2bMXLkSGzZsgUXXHABJk2ahGg0ik8//RR//etfsXTpUnz11VfZHqarrr32Whx33HGO9mHDhmVhNE498sgjaN++vePXdqqxJRvKWHA/44wzcOyxxwIArrjiCrRr1w73338/Xn31VVx88cXCY/bu3YsWLVpkagiWdF1HQUFBxs/blFRXV4eFCxfid7/7XaM954UXXoh7770Xq1evxi9/+cuMnXfw4MH46aef0LZtW/z973/HBRdc4Nr/4IMPxm9+8xtb25w5c3DJJZfggQcewGGHHeY7SD/33HPo2LEj/vSnP+H888/HN998gx49eqR6KQ2u+vp6nHvuuaisrMQ777yDE044wbb/rrvuwpw5c7I0Ov868cQTcf7552d7GIHVnGJLg3nu9MNfXl4OIOnpff311xg9ejRatWqFSy+9FABgmibmzZuHvn37oqCgAJ06dcLkyZPx888/285JCMGdd96JQw45BEVFRTjllFPw+eefO55b5ot98MEHGD16NNq0aYMWLVpgwIABePDBB63xPfzwwwBg+5lIlekxiiQb9zfffANN02w/E9esWYMdO3Zg5MiRtr4TJkxAQUEBNmzYYGsfNWoU2rRp4/qTXdM07N27F08//bR1/Sy5DB48GG3btsWrr77q63r8qlWrVmjbtm1a5ygsLMSzzz6Ltm3b4q677oLfYqeLFi3C+eefjzPPPBOtW7fGokWLUh5DTU0NSktLceihhyI/Px8lJSW44YYbHPcpNE3D1VdfjVdeeQX9+vVDfn4++vbtizfffNPzOV566SX897//xU033eQI7ABQXFyMu+66y9p+9913ccEFF6Bbt27WmKZOnYr9+/cLz79t2zacffbZaNmyJTp06IA//vGPiMVi1n76Xpw7dy4ef/xx9O7dG/n5+TjuuOPw4Ycf+n2pfKmmpgZTp05Fhw4d0KpVK5x11ln47rvvoGma7df1xIkThV/It912m+MX5pNPPolf/vKX6NixI/Lz83HUUUc57LgePXrg888/x7/+9S/rc0Dvr8g+o0uWLMHgwYNRWFiI9u3b4ze/+Q22bdtm60NjoNdrnClljNx5ff311wCAdu3aWW319fUYNWoUTjjhBMydO9eyayZPnoynnnoKl19+Oa699lqUl5fjz3/+M9atW4f33nsPkUgEAHDrrbfizjvvxOjRozF69Gh88sknOP3001FbW+s5nhUrVuDMM89Ely5d8Ic//AGdO3fGhg0b8MYbb+APf/gDJk+ejO+//x4rVqzAs88+6zi+McYYRO+//z40TcMxxxxja3/wwQfx9ttvY8KECVi7di0Mw8Bjjz2Gt956C88++yy6du0qPeezzz6LK664AkOGDMGkSZMAAL1797b1GTRoEN57772MXkum1LJlS5xzzjn461//ii+++AJ9+/Z17f/BBx9g06ZNePLJJxGNRnHuuedi4cKFKd3DME0TZ511FtasWYNJkybhyCOPxPr16/HAAw/gq6++ctzHWLNmDV5++WVcddVVaNWqFR566CGcd9552LJli+0zw+u1114DAIwfP97XuJYsWYJ9+/bh97//Pdq1a4f//Oc/mD9/Pr777jssWbLE1jcWi2HUqFEYOnQo5s6di5UrV+JPf/oTevfu7fgltGjRIuzevRuTJ0+Gpmm49957ce6552Lz5s3WZ8FNu3fvxo4dOxzt7dq1swLyFVdcgeeeew6XXHIJhg8fjrfffhtjxozxdd0yPfroo+jbty/OOuss5OXl4fXXX8dVV10F0zQxZcoUAMC8efNwzTXXoGXLlrjpppsAAJ06dZKek8aF4447DrNnz0ZlZSUefPBBvPfee1i3bh0OOuggq2+Q1zhtkTT15JNPEgBk5cqV5McffyRbt24lixcvJu3atSOFhYXku+++I4QQMmHCBAKAzJgxw3b8u+++SwCQhQsX2trffPNNW/sPP/xAotEoGTNmDDFN0+p34403EgBkwoQJVtvq1asJALJ69WpCCCH19fWkZ8+epHv37uTnn3+2PQ97rilTphDRS9IQYxSJHzdVeXk5AUCefPJJq+03v/kNadeunfA8//znPwkAcuedd5LNmzeTli1bkrPPPtv1ualatGjhOs5JkyaRwsJCX+dKRUuWLBG+BlTdu3cnY8aMkR7/wAMPEADk1Vdf9Xyuq6++mpSUlFj/r9566y0CgKxbt87Wj77Hy8vLrbYRI0aQESNGWNvPPvss0XWdvPvuu7ZjFyxYQACQ9957z2oDQKLRKNm0aZPV9t///pcAIPPnz3cd8zHHHENat27teW1U+/btc7TNnj2baJpGvv32W6uNfj5vv/12x/MNHjzY2qbvxXbt2pGdO3da7a+++ioBQF5//XXX8dD3uOzf9u3bCSGElJWVEQDkqquush1/ySWXEACktLTUNvbu3bs7nqu0tNTxeRa9HqNGjSK9evWytfXt29f2/5cfP31/1tbWko4dO5J+/fqR/fv3W/3eeOMNAoDceuuttnH6eY0zpYzZMiNHjkSHDh1QUlKCiy66CC1btsTSpUtx8MEH2/rx305LlixB69atcdppp2HHjh3Wv8GDB6Nly5ZYvXo1AGDlypWora113My77rrrPMe2bt06lJeX47rrrrN9iwLwdWOwMcYYVD/99BPatGkj3Hf66adj8uTJuP3223HuueeioKAgY1kubdq0wf79+7Fv376MnC/Toul8u3fvdu1XX1+PF154AePGjbP+X9Gf6wsXLgz8vEuWLMGRRx6JPn362N4j1J6k7xGqkSNH2n4VDRgwAMXFxdi8ebPr81RXV6NVq1a+x1VYWGg93rt3L3bs2IHhw4eDEIJ169Y5+vP3cE488UThmMaNG2d7/5144okA4Dl+qltvvRUrVqxw/KP23PLlywHEb7yySvezxL4eVVVV2LFjB0aMGIHNmzejqqoq8Pk++ugj/PDDD7jqqqtsXvyYMWPQp08fLFu2zHGM39c4XWXMlnn44Ydx+OGHIy8vD506dcIRRxwBXbd/d+Tl5eGQQw6xtf3vf/9DVVUVOnbsKDzvDz/8AAD49ttvAQCHHXaYbX+HDh2kQY6KWkT9+vXzf0GNPMZURFx85blz5+LVV19FWVkZFi1aJB17qs/p9qW4Z88e7Nmzx9o2DAMdOnTIyPN7iT6vVwB866238OOPP2LIkCHYtGmT1X7KKafg+eefx5w5cxzvXzf973//w4YNG6TXSd8jVN26dXP0adOmjeMeDi8/XwCstmzZgltvvRWvvfaa49x8MCsoKHCMXzYmfvz0/e01fqr+/fs77hex+vbbb6HrusMWPOKII3ydX6b33nsPpaWlWLt2rQNQqqqq0Lp160Dno5950bj69OmDNWvW2NqCvMbpKmPBfciQIVa2jEz5+fmOD4xpmq601FhBwU2NNUZZwBTdbGnXrp3rG2LdunVWQFm/fr00Yymofv75ZxQVFdkIiNfcuXMxa9Ysa7t79+62CUANqc8++wwAcOihh7r2o/8vL7zwQuH+f/3rX4FSTE3TRP/+/aVpmCUlJbZtwzCE/dy+sIF4wFi3bh22bt3qOCevWCyG0047DTt37sT06dPRp08ftGjRAtu2bcPEiRNhmqavMYmU6vgbQn4/N19//TVOPfVU9OnTB/fffz9KSkoQjUaxfPlyPPDAA47XoyEU5DVOVw12Q9WvevfujZUrV+L44493DRjdu3cHECekXr16We0//vij57ce/fb/7LPPXGlB9iZpjDECSfrZtWuXrZ3SAas+ffpg4cKFQtrYu3cvLr/8chx11FEYPnw47r33XpxzzjnCvGJeXjZVeXk5jjzySNc+l112mS2Tw+01y6T27NmDpUuXoqSkxHWMe/fuxauvvopx48YJ0/GuvfZaLFy4MFBw7927N/773//i1FNPzegcAF5jx47F888/j+eeew4zZ8507bt+/Xp89dVXePrpp3HZZZdZ7StWrGiw8WVK3bt3h2ma+Prrr21UvHHjRkffNm3aOD4zgPNz8/rrr6Ompgavvfaa7ZcHb5kB/uxaOk46Lj49eOPGjdb+bCjr5QcuvPBCxGIx3HHHHY599fX11v+0kSNHIhKJYP78+TY6mDdvnudzDBo0CD179sS8efMcbwL2XDTnnu/TGGME4m8UwzDw73//29b+yCOPOPoOGzYMhBB8/PHHjn3Tp0/Hli1b8PTTT+P+++9Hjx49MGHCBF+lA1q0aCH8oFB98sknGD58uOs5evXqhZEjR1r/jj/+eM/nTVf79+/H+PHjsXPnTtx0002uH86lS5di7969mDJlCs4//3zHvzPPPBMvvfRSoFILF154IbZt24YnnnhCOLa9e/emdF28zj//fPTv3x933XWXcLLX7t27rQwPSonse5EQYqX/NmWdccYZAICHHnrI1i76LPXu3RtVVVX49NNPrbbt27dj6dKltn6i16OqqgpPPvmk45xenwOqY489Fh07dsSCBQts75d//OMf2LBhQ9rZPeko6+Q+YsQITJ48GbNnz0ZZWRlOP/10RCIR/O9//8OSJUvw4IMP4vzzz7fyQWfPno0zzzwTo0ePxrp16/CPf/wD7du3d30OXdfx6KOPYuzYsRg4cCAuv/xydOnSBV9++SU+//xz/POf/wQQz+MG4uQ2atQoGIaBiy66qFHGCACtW7fGBRdcgPnz50PTNPTu3RtvvPGGw68FgBNOOAHt2rXDypUrbcTw9ttv45FHHkFpaSkGDRoEIJ7be/LJJ+OWW27Bvffea/WlucGsZTJ48GCsXLkS999/P7p27YqePXti6NChAICPP/4YO3fuxK9//WvPawmqO++8EwCsOQHPPvus5VfefPPNtr7btm3Dc889ByBO61988QWWLFmCiooKXH/99Zg8ebLrcy1cuBDt2rWTfkmdddZZeOKJJ7Bs2TKce+65vsY/fvx4vPjii/jd736H1atX4/jjj0csFsOXX36JF198Ef/85z89bUs/ikQiePnllzFy5EicdNJJuPDCC3H88ccjEong888/x6JFi9CmTRvcdddd6NOnD3r37o0//vGP2LZtG4qLi/HSSy81iL8bVO+++y4OHDjgaB8wYAAGDBiAgQMH4uKLL8YjjzyCqqoqDB8+HKtWrbLdH6G66KKLMH36dJxzzjm49tprsW/fPjz66KM4/PDD8cknn1j9Tj/9dESjUYwdOxaTJ0/Gnj178MQTT6Bjx47Yvn277ZyDBw/Go48+ijvvvBOHHnooOnbsKJy4F4lEMGfOHFx++eUYMWIELr74YisVskePHpg6dWoGXq0UlW66DU0T+/DDD137TZgwgbRo0UK6//HHHyeDBw8mhYWFpFWrVqR///7khhtuIN9//73VJxaLkVmzZpEuXbqQwsJCcvLJJ5PPPvuMdO/e3TUVkmrNmjXktNNOI61atSItWrQgAwYMsKWe1dfXk2uuuYZ06NCBaJrmSKPK5Bhl+vHHH8l5551HioqKSJs2bcjkyZPJZ5995kiFJISQa6+9lhx66KHWdnV1NenevTsZNGgQqaurs/WdOnUq0XWdrF271mpr3749+cUvfmHr9+WXX5KTTjqJFBYWOtI3p0+fTrp162ZL88yU4JIex6p79+5Wu6ZppLi4mPTt25dceeWV5IMPPvB8nsrKSpKXl0fGjx8v7bNv3z5SVFREzjnnHEKIv1RIQuJpcXPmzCF9+/Yl+fn5pE2bNmTw4MFk1qxZpKqqynatU6ZMcTyv3/cIIYT8/PPP5NZbbyX9+/cnRUVFpKCggPTr14/MnDnTSickhJAvvviCjBw5krRs2ZK0b9+eXHnllVbaJft+kn0++XRCmgp53333OfqCS1EUySsVkj1+//795NprryXt2rUjLVq0IGPHjiVbt24VPs9bb71F+vXrR6LRKDniiCPIc889J0yFfO2118iAAQNIQUEB6dGjB5kzZw7529/+5vj/W1FRQcaMGUNatWpFAFj/r2Wx5YUXXiDHHHMMyc/PJ23btiWXXnqplQZO5fc1zpQ0QrJwB0QpI9q8eTP69OmDf/zjHzj11FMDHUsn+bzxxhu+fjrW1NSgR48emDFjBv7whz+kOmQlpbSlaRpKS0ubTQ2obCnrnrtS6urVqxd++9vf4p577gl87OrVqzFs2DDfnuCTTz6JSCTSqLVslJSUUpcidyUlpWYlRe7+pMhdSUlJKQfVrIL7v//9b4wdOxZdu3aFpmnCRSV4vfPOOxg0aBDy8/Nx6KGHNvsC/EpKYRchJKvU3lziULMK7nv37sXRRx9tleb1Unl5OcaMGYNTTjkFZWVluO6663DFFVdYqY9KSkpKQdVc4lCz9dw1TcPSpUsdKwaxmj59OpYtW2ZNSQfiObG7du3yVTtbSUlJyU1NOQ5lfRJTQ2rt2rWOcgOjRo1yrSxXU1Njm2lmmiZ27txpqzOtpKTUeCKEYPfu3ejatWugYm4AcODAAV9rKRBCHJ/v/Px85OfnB3o+kVKJQ5lQTgf3iooKR5H9Tp06obq6Gvv37xfWPJk9e7at6JWSklLT0NatWx1VZd104MAB9OzeEhU/eK9y1LJlS1slUwAZy8hJJQ5lQjkd3FPRzJkzMW3aNGu7qqoK3bp1Q/9npsAoSv9bvLmLEOevF5OI97OPzcRj1gOk+5N/wf21t0O6rSXPy/ah54FGH1h9+HMk90na2L7g2+N/NHY/f6zjsf1cjle1WZqlDSPzwAF8d9udgerYA0BtbS0qfoih/OPuKG4lJ/7q3SZ6Dv4WW7duRXFxsdWeCWrPpnI6uHfu3BmVlZW2tsrKShQXF0u/LWU/xfQVXaFHm8fCuKlIELOFcjhTWvKuvO0cbJzT7G2EPYnGtvP93PtI9/N9+XP6OgfxNQbbuSFutz2vxkRt0WvEyuv/SVhcwsR1pmqLtmgZ/ydTLPG/pLi42BbcM6VU4lAmlNPBfdiwYdaKLlQrVqzAsGHDAp/LHLsTWo6Tu4jK/fYzmTYeOmU07yR0t310B0f74NvtgyBEcxCzK7X7abddHPcXEoJ3eyw7N+zfBUqpyQSB6fJTyG1fJpTJOBREzSq479mzx1YVrry8HGVlZWjbti26deuGmTNnYtu2bXjmmWcAxJez+vOf/4wbbrgB/+f//B+8/fbbePHFF4VLX3lJW94WWg6TOyAHQT7uaILONqiyEanmaPNF6om/vmk+E7QOABqRk7kmaINLX2sfsfeRjFO6zcjvL6xcUrqht47EUOeSFFhHgi3Skc04FETNKrh/9NFHtgUUqDc+YcIEPPXUU9i+fTu2bNli7e/ZsyeWLVuGqVOn4sEHH8QhhxyCv/zlLxg1alTg564dVQWjyFmiNIwSkTvfxn+WvOidbSccaTuOceyz7yAicpb8AnClc6Fv7kLv3GMpwfvZtu0LYUTPoDJN7tmMQ0HUbPPcG0vV1dVo3bo1+v32Lhg5Tu6uEsU03gN1o3OPNk9Pne8jOpfLcYG8dclz+ab1IKTOjV/svYf7I2ruP4CtN9yCqqqqQJ44/eyWf9kFrVxuqO7ebaJnn+2Bz9/U1azIPZuqOWU3jCLvfNlclZsfLyZ59z4iOuf72U4hon1Jlo6U1rnzeJK5X3J3DNa+rfHHyGK1nxge7jifkrLtuWdLKrj7VPTfxeEjd1kcE9KlZH9Qmvfw4f0e6+WrW9s+fH8gEVMD+Op+SF14PK8AfnzOKs1rriPEw3NXwT3U2j98D/Si+mwPo0lJ+pnw4ckDAgiVePF8ZyGlux3vK3vFpz/u5X/78NIdJO/RP/RKM7jHQBBzeWHd9jVnqeDuU/kftISRHzJyZ+VB61R+c93Zx6J9Ii9d2NfNGxeROt3vh9S59sCk7pfSfb62KfXJBaUb3Ekyl122PxelgrtP7T92H/SiYClTzV2B3/Ouvry/J3AQvvA4F/9eNI4g+eWeWS0+I00avror2SsFlpn457Y/F6WCu08VlBWFm9wZyahatu1J8277/HribpTu53h+DJLzpk3qAV87ViSkWTPpXnc90VDn8oVZn6Nfpiq4+9S+/vuhF4Xzw+VHvma3ppDLHcTXF1N+GscGOd6Pgr591NstI4pBQ8zlW9NtX3OWCu4+VbChUJG75DPgGeukROt87CsHHkiZ0IEAlO52Po9xyfo6HtMx+c2WCaPSvqGqgruSi/YdXgO9MDffBA2qIJTrl1S9+gXNaEllHNn8Ka+IPpBMotlqH4n256JUcPepwq/zYTTzEqBeCvQel/V189v5/R4etW9fW0TToucMQuhez8ke70bljtfDR6aMW7vXvlxUmtdbCwO1LiuK1uboC6qCu0/t71ELvbBZLTmbeWWLcDJJqpmm3hylvlwS8SB3v9VQm5tUcPep/O+iMAqi2R5G48rPPVJhjrYzgvoleEdfEZ1D4Jszj7088ECzR/1mutiOzVAeu5fCkj2T5nUqz13JVTWd66EXqhmqOaewBMgQq44YqCOGy37vZfiao1Rw96noTwb0AvkbJCflE2ikv2p9EKsjtPomejkdp1XXxad/7knnge5f+JnZFOB8uSaVLZOSVHD3qbqDTOiFuTqXrWGU9qSbTNzgzYTSuY7cjBvNSjGiI0bk98tiqnBYuGXs0aHXh+SGaioBKWgOvChgBsm08dU/tZmhTioXXISf10gj4hu4vo710ScsSvO1MKHBdDmJ277mLBXcfSpWQEAKc/MbPmUFJVqvz1CK6X+BJwCl+ll2u97GCthhvEeQ5jXXkTzUunruKriHWnoM0NX9VAAsIXt8KAIGa9+rEGn8piYmcX7BEHouwvTxMS7hAPlxEY9jPb/YQhi0G0kmdJguee5qsY6Qi2gqpVmqNKg11YDut01I9ane/PQ7Aclzn89got5vcaV7Q5VoiLl8eN32NWep4O5TxCAgebn5De9bGfTi/fZpcMsl0+dXmS9NTjHoiLmQu1qsI+QyanToWkhuqPqQK+wECJheN0015mZmyjdM3Whetsi38EYod4NUaAXx50shcKjgb1ear0cdyfPIc8/NF1wFd5+qbxmDXpibkx1clc33faYoOFN+d2OmZioPPqk0XwsT7tZLriY4q+DuU5EqA3pNyCYx8XKzT/we43diUiYmJfk6LnEn1G3yksf4nOf3IHy/z6GUEXnfUM3NX+QquPtUXbsQlR/IdoDJSMpgusdn9jUQpcor+VO6r533JCYV3EOtaGUe9IKQvlzppjS6+d8efVItz+ta+MvR16UPK68yBX5LIoj60maVMulU2nnuBvJcPffcfE1DGq2Cq+4QVfI3bTXRwKSgOrflnS2Tm59rFdx9KvpNPoyC3F6swyaPiOeVny6ld5nnLtif8qLVPvtLCV5G766/Avwsr2f/cnNQulpqT6w0r1+txKTkqvpD98NUC2Q3ijL9K9n1o+tyjzRbytXFI7Il04Pc1Q3VkCvyVcgXyE7DW5dlxARd3NpG8i5U7ovg3ejdi7xFZO9nHzha9zHjVWuiVlZjSktzklEdMWAoz11JptiRe0CKQpItk2llgERlNOuVZeiVkSh+svTGm6OxIntK25bRYbpkxLjta85Swd2n8j5rGW5y5+WaCeJ8LFvMmqd6qQev2R+L/HgRmRPuuGQbQ9q2c6RA517tYIhd4s0LCd0jqIUlvTLtVEi4L8iRq1MTVXD3KTKwGqSoNtvDaHby8o9tlE3k8czeT/OEOU969kHnfr3vlEBd+eqNJkXuSq4yPioOF7lLYo8bpYvilaZx+1z8dS3xl/fRefoW0jh9LDhedIyD8mX07kXuHtTuRuyaLMOGPY5XGD34NK+53mMN1XqSmwUIVHD3Ke0Xu6AVhSgVUiI33gyS5eHV14283Y6V7Uv9fPLjMkn/tmMCH6HkJjVDVcld7x0EhInceXExyqvei8hjFx1j68f75AKPXLyP2RaeizizaDSIvXfrOI7oIehL2wTU7siKEfnrtjbB87BNjpbwKN1rV3nuSq6KnPQTjBCTe0oE6nGM24dKRq9yMne2i6g73ePdzuF2jL1TasFE5b+nJjVDVclVsbfbhYrc5Qtbix9LqdzFY5dui/x1jsTd+vH58Cy9255DsC/ZnjgL+7l3UL6E5JEgcY7QeWKX0Tr/0mvWOcNp2KR73fUeee7Kcw+5Ckb+CKNFeMkdCPbz1Zva/R8nahONRXRKP+fzS/iZ9vO9jlVKKM3grpbZU3JVzVsdYETDQ+6WfHrtfmebumW+8Od2Eja/jzj7ABZtOzJoWO+dPiclc9ZjZ8ndzV8XbcOF2nlil9C6PYsmxeqROaR0r1V57kquKvxVJfJCTu4ieX0w3MhVSN+S/jzp+yFrP3TvpPj0vPdU6N7rWKX0RDzy3InKlmkaevjhh3HfffehoqICRx99NObPn48hQ4YI+z711FO4/PLLbW35+fk4cOBA4Oc9sKxjuMhdEGcIi1Ayj53fdmmTZb5IzyOk+UQWjZ48xvYYgv6y84jInffcRSQvonaBz84Tu7UpIXURsYbSd0+7nrsGzSWAp7qGarZikV81q+D+wgsvYNq0aViwYAGGDh2KefPmYdSoUdi4cSM6duwoPKa4uBgbN260trUUf+O1OFORu5tSyXyRHefHY3dSuvs5fJ3TxzjSzcrx2ud1XqXgaogZqtmMRX7VrIL7/fffjyuvvNL6BlywYAGWLVuGv/3tb5gxY4bwGE3T0Llz57Sfe/+rnXKe3F1jjshfZ9otqk+X1DVxu8Nz1+37iE7s+wTHJj15gVcflNwFFM977TKf3UHsElrnKT1MPjurtD13aDBdsuXd9smUzVjkV80muNfW1uLjjz/GzJkzrTZd1zFy5EisXbtWetyePXvQvXt3mKaJQYMG4e6770bfvn2l/WtqalBTU2NtV1dXAwBanrNdkbtAqeay+8128SZ2b7p2o/pUiF50XENk0mTqmLDLb7YM/axT5efnIz/f+ZlvrFiUrppNcN+xYwdisRg6depka+/UqRO+/PJL4TFHHHEE/va3v2HAgAGoqqrC3LlzMXz4cHz++ec45JBDhMfMnj0bs2bNcrTvealLzpO7TaLPgojeNdk2Q/JBSN2NuNk2nTuHkMbh7bvrLuTOkbmb3+5J7YzPzhO79VL5IPgweu6ZyHPXTbc89/i+kpISW3tpaSluu+02R//GikXpqtkE91Q0bNgwDBs2zNoePnw4jjzySDz22GO44447hMfMnDkT06ZNs7arq6tRUlKCgy7YFgpyTzUtLNWsGf44P0TvRetB/XlRn1Qyb0THebXH90l3KSF9W4Z42DLUKNu6dSuKi4utdhG1p6pUYlG6ajbBvX379jAMA5WVlbb2yspK3z5WJBLBMcccg02bNkn7yH6KVb1wcOjJ3ZHLzjx20LX1WLMfIyJ1eg6dOZeI6tnjdVE/Mb3L/PWUyd0ntUt9dgmxiwleUGcmzWDX3NRYee7FxcW24C5TY8WidNVsgns0GsXgwYOxatUqnH322QAA0zSxatUqXH311b7OEYvFsH79eowePTrw87ceFw5yT0WpThDxO/PUjwfO9mmIbBu/55WNT3Z8Kn2UginT2TLZjkV+1WyCOwBMmzYNEyZMwLHHHoshQ4Zg3rx52Lt3r3XH+rLLLsPBBx+M2bNnAwBuv/12/OIXv8Chhx6KXbt24b777sO3336LK664IvBzVz8fAnKXxBVRdoytnfsrypDhPXghkXMZMGBI3rGPP4+OhiN3NnOGnZWqM9Ufdab+C6V2ic/uRewy753fFxal77nrrnnu9SmkQmYzFvlVswru48aNw48//ohbb70VFRUVGDhwIN58803rxsaWLVug68n/UT///DOuvPJKVFRUoE2bNhg8eDDef/99HHXUUYGf+6CLvwsduaeSIpYKxTemHy/qIyZyf+P0O3bbMdI9/s6tFEwNUX4gm7HIrzRC1O0cN1VXV6N169Y45uK7cp/cExK+112IXUTwshx1omk+yNqH767L+hHHPkcftzx3PUW/XfOgdobSRcQuonVnnns4P6qxfTX48uJ7UVVV5csTp6Kf3TPevBKRFlFpv7q9tfjHr54IfP6mrmZF7tlUq0uU5+4lPwQUhN7TyZFPdearvJ9wKCllx8ie14/CGd7TkyocpuSq3YtC4LkL5Ndv53PXrTYHxWv2PjqzX+coX0Tg9Dz8Ppnnrgvy3BlyJ6yPbvWRk7pfareIHcm+mpDe/WXK8D+OqPQw0HwGSv66ee6q5G/Ipcg9qSCkk+mqkbJ22cc/WOXJYBQuo3m3Y4L2UUpfityVXLV7YUjIXfA+F9E735Zpcnfz4T2zZYQ58E5P3pffrtPtFKidI3WRx85SPN3H/2/g6Txs3nu616uCu5KrWlzyvSJ3pOEVp+HH+3neIOTuZ0ypHpc83rNLoPMppS4V3JVctff5ruEgd06peu4ZyZbhSR7ifXFy5/x26smD3Sb25xD57ZTUkdjn6OOf2u2kbvfZhRSfeFpdQPKy7TAo3WuOmTo008Vzd9nXnKWCu08VjKtQ5B5AqdBQoDVaM3SudH9RpHI+9+dK63AlgRqi5G9zkAruPnXghc6hIPegOe5WG0/W7ONUqF3SZqfuZJtF3LLz6ClQuwbGc4crtduyXxhS5wldmCmTeEqdb+eIVc/NGOSpdF0TZcsouSrvgh8UuWdQmQDUdD+U6VN2doKC8uiDiRAtIytjNTep4O5TdS91hBkCcufl13P3lSEDeNeI4Xxz4a8A1lNPkLRtm89td6N2rxmpTLaMxqz2pGkEWuI8rM8OwEbtLLEDco9dROssqYsyakKR4w4AmpnW4cpzV3KVce6PMBS5NwnlKmkpNYyIhy2Tq+8nFdx9qn5pB5AwkTv3fhcSvMbtcyF2IZ2D8c7B07j7jFQptYv6ODJpiPAxAPe8dp14ZsfIMmN4Ypf565TW7QQf7oyZdK+XAO7LHaZ19qYrFdz96tc7gaLwkLsjBS9L4/CrbFgUYQuyzVUmNGgqW0ZJJvJ62/CQuyagGZ7S+TbrsYDW2ccclUvJXXYMU39dmtfO1Wjn/XlY2941ZDSdwE9Ou27Vc7f77DaCh53YZbTuluceGp+dkZmBPHcoz11JJnPMz9BCRO6pimcgEROlQrxB0gCDnD9IsExt3OELxk1NhHjYMjn6v0gFd5/S3mwDLSzkTiXz3TW2zU7qVj/+MbctzZSBZL+M2EXn88hpd/jssuwY1mcHhNkxoswYAAzJ+yN2Ea07vHaEU+let0qFVHJV7WnVMIpqsj2MrCpVj1ng5Dg+sF6EK3tuWbsb6btdh2wcXtfuh9AzEULC+Esg3WtWwV3JVZG3i0MxQ5WVte4plZDck9t8fRnaRjSur4jWYZ91ym57euwa14+v+mibvUqstVmFPjtdF1UyC5Wt0c767LpuWo8tzz3xNDSPnSV2ns4d28zLLgtuYQn06V5nzNQAUx7AYy77mrNUcPepAyN2wyiqy/Ywmpz80Dz/HcFK9MEVnVN0Cj8pgn6m8Pu5aSk6t5Tyha3ux6TbV0muuOfuRu6NOJhGlAruPpW/JvfJXfr+50mdbxeQu2eVyMRjU0DqVj/hWqcQE7uoL0/sPKULHmu6d2aMbAYqS+cG57GL/HUZrdNtk2i+v2hyWWnnuStbRslN+36xB3pRfbaHkTW50Xeyj8yv9tffSeLyvm55+G5E70by3uPx2A+47vdqlz2PUnoicJ+olKuvtgruPlXwYUsY+blN7pYEwVia3872dyN4dpvfn/hnirx1N1rXmKwYLrc9Ex57UGL38thZYrdlx8Ae8Nmsa5XnnoEbqqYG4uKru+1rzlLB3af2DdoPvShEHyyfHyipk8Mf70LlfH+vgln88dI+1vlk5/B+TtmxfHBmxQejINZKGIN3g8vDlkm7pnATlQruPlXwaWF4yJ2Kf8+LvHee1iFo17y2iYDg4U3rgnbPPPYseexu/job0Nn6h7rkyyRsSj8VUk1iUnLRvn4HoBdmexTZk6sPLAAfh88uIV3beQVkrjF9RLTuax/zfG4LYngV7RKWBxCcm3/suE7Bflmbo0/OOsRypXvN6oaqkqsKvywIBbn7ep+7ELwjU8bRRlx9d/oxts889ab1QBkxGfTY+ZmnbsTO0noMzi8aVnYPXnajOhyBPu1sGeW5K7lp36G10Atzs8CQq1w+WMIsGBuJ8/2Jo912Do602ZuU7EIY7Lmc2x7tidP5LbnrRu5+qF32K0BI7iEP4g2mkKbLqODuUwXfRGHkR7M9jMaTIHDLVmVyZsmQ5LbIm2c9dyS3Lf890Wbz3t1I3TpHZmkdkM885VdPcsuIof1ZWje5LwpdI1bpWTbIB5k8latS5QdSkwruPnXgkDrohUa2h9F4cnu/iz5s0sAvznCx2nmfm6d6GvzA93MSuhvFuxE8n0Ejo3evSUdexO7IovEI4qJjlFJUCF9GFdx9KloRgVEQyfYwGleCwOI2Q9Xaz9M6299G8ITbtu+3e+iJbe48QWkdADQ9afdoDjJnCJ15DATLiBH56zyt0046iEWPMhtHtB0W+ZlA5ybluSu5qrZDPfTCHJ+hmsp7nA84goAv9OE5C0fjtq2AzPTVmT6sL2+1SShe5MOzBO+3HK/fdEaRX2/Ru4TWU8meCUuwT/86WRqQ7c89qeDuU5FdBvQDIbJlAPF7nqV0UbvEf3cQeqLNInjah9lvsiTOn4sjfzAVGt28dcAfrcf32/11rxmnfLCPEc1pt3C0TvfzdWQUtWdQ6oaqkpvqW5nQC03vjrkqQaAnbMCRee5WG+epywI206ZxgV+zPU72tW6I0m2O4GUevMYF5OQx9iBO94vInffT+T48sfvNnpHWpcnVSOSitK9ZBXclNxn7degkPKmQ8gqRbEBPdvKuMyMI7lYf4jjO1p4I8oQ9jgniMlK3umvE1t+2SlKi3WSDO+LBlTDHEE2zCJ0SufWYeXn0xDkoiVt/oTlo3TrGZTuMwTzTUp67kqvMKAGi4fmg+QrugMRjp+cg0n22c3lZL5BQvEXocPrwEoIX+fEsvXuRu19q90PsMnIXBXRdC++vxrSvXZG7kqu83iA5JlsMZwMy0eyBnyQ6E6Zf4rFGtHgbkVg4hD2A2UnPx3QmINCYffGteIAnBPEtJlADiXbuSyqelUJs7ezQU5XoJqpIboGdD+qyoBY2/z3t62WXA5Ptz0Gp4O5TWiz+L+fl4zOg8f2E9oyd2jWmWIwjpZFo3JdE8kshedNUA4l/SySeLh7uQeKBNR6g4wEejFVCrNCdDOGaRhLFopLbQOKmpnVJ6QdQntodPryE1vmgHrZgnmklfsi57s9FqeDuU2Y+AQpy9F3gJq8bqXwfvr+fG6n0L2vB0D6MhSK6kZrc534j1S0LxjoH5JkwdIhsYPZjw/gldTagS2+m5moU8lDa1+2xhqrrvmYsFdx9ytinQzfDc0PVIduNTrbdabfIFsq2+rvdVNVYRybZl+hOL95245TZ71ZWAOBvqNq9d7eyAvQXApBMXaQ3Vc3EYxOJ9kRHWQlfv1KBPhO2DJTnriRXfXEMemEYfBlGsg+Vg84Fx4hoXkTmif3JQAxhH2t/os2L0pOPndTtJ2edP0aUCskSOH/DNFVST2Uyk5KHVHBvHnr44Ydx3333oaKiAkcffTTmz5+PIUOGSPsvWbIEt9xyC7755hscdthhmDNnDkaPHh34eSM/G9D3h2wSE5UkmBNRHxdS95rAlCzzm2izrTeXJPsgRcGARHBkvlh0ndgo3m3SEk/ufODn23WNgJB4yQHabkuH1Ah0EJhE98wCCVI5MpfVVPPcsxWL/KpZBfcXXngB06ZNw4IFCzB06FDMmzcPo0aNwsaNG9GxY0dH//fffx8XX3wxZs+ejTPPPBOLFi3C2WefjU8++QT9+vUL9Nx1HUNWOAwQ+u3xdvunQbowh8b24W+wJh4ywdLez075DVlSIN30RtmNUhGpB5m4FMZA3hDSTA2ai6/utk+mbMYiv9IICbbI1OrVq3HKKacI9z322GOYPHlyRgYm0tChQ3Hcccfhz3/+MwDANE2UlJTgmmuuwYwZMxz9x40bh7179+KNN96w2n7xi19g4MCBWLBgga/nrK6uRuvWrdHrprtgFOT+Yh28ZMvnCT14lsrZ/jZyd5K6Yz/TbpvIBH6/P4K33TTVSILWGa9d4rsHJXfepmGDPbuPt2T85ruH1Z6p21uLv498BlVVVSguLvZ9HP3sdptzJ/RC+WfX3H8AW6bfHOj82YhFQRWY3H/1q1/h2muvxd13341IJF4lcceOHbj88suxZs2aBgvutbW1+PjjjzFz5kyrTdd1jBw5EmvXrhUes3btWkybNs3WNmrUKLzyyiuBn7+uew1ihbl5V91LwrRAje/D7yeObrbgJCBv8ba8nZ6bp2walJOPxaQtI3Wv0gHpkroXoXvnyodrQlNTu95sxyK/ChzcV69ejcsuuwwrVqzAokWLUF5ejt/+9rc44ogjUFZW1gBDjGvHjh2IxWLo1KmTrb1Tp0748ssvhcdUVFQI+1dUVEifp6amBjU1NdZ2dXU1ACC6ORzL7FkSfY/xfjpgBWlphgxP8yLP3cqI4Y5lMmAyuei1pguIXXMGdk0jMHTiIHc6hDyrAFmS3P1Suy3QM69n3I/ni4h5BzdajjiW+B9heHxBUMWIJu3L7osx/9P9ntvr/KL9/Phjjp+OwcX+YJTtB5Kfdar8/Hzk5+c7+jdWLEpXgYP78OHDUVZWht/97ncYNGgQTNPEHXfcgRtuuAGaA9+an2bPno1Zs2Y52usP2wezqGkRRGNIarsLaZ4w+wU+OuyE74fO2TGICD3eDm5bXOSL3W5oUk/VapEFcr8BNUjg9erP7gt6Xr/H8ftF27F07z34zHMvKSmxNZeWluK2225L77mzqJRuqH711Vf46KOPcMghh+D777/Hxo0bsW/fPrRo0SLT47PUvn17GIaByspKW3tlZSU6d+4sPKZz586B+gPAzJkzbT+fqqurUVJSgsiXReEidyqJ5+5aKIyleYbY/Syxx/ez2nW6LSF4luy96F03k6Quonh4k7vIb2e/FHTN6cPrmin8grAHfD2xPxnk+YAXthutjZUts3XrVpvnLqJ2oPFiUboKHNzvuecelJaWYtKkSbjvvvuwadMmjB8/HgMGDMBzzz2HYcOGNcQ4EY1GMXjwYKxatQpnn302gPhNjFWrVuHqq68WHjNs2DCsWrUK1113ndW2YsUK1zHKfoqZ/XZDK6pL6xpyRfwPNBuZc9t8fzvFi6nato+jc9rG99W5MfDkLMtDl1E6+5jv65X5IiZ7d0KXEW7YAnlDSCMetkxiX3Fxsa8bqo0Vi9JV4OD+4IMP4pVXXsEZZ5wBAOjXrx/+85//4MYbb8TJJ59s86szrWnTpmHChAk49thjMWTIEMybNw979+7F5ZdfDgC47LLLcPDBB2P27NkAgD/84Q8YMWIE/vSnP2HMmDFYvHgxPvroIzz++OOBnzvvv61CR+7yypBcH47eTa7NWviaJ3eW0AFAt+fHWx68H4K3yJ32SWbPJCk+vk3z3tmcd83aNqUZM4ZuepK7X2rXNZ3ZR2CSZMB3szLCmDGT9jX7JPcgymYs8qvAwX39+vVo3769rS0SieC+++7DmWeembGBiTRu3Dj8+OOPuPXWW1FRUYGBAwfizTfftG5UbNmyBbqenPkyfPhwLFq0CDfffDNuvPFGHHbYYXjllVdSyysdXA0UNdwXV1OU8J6q5IPmoHVuv4jK+ceyhalFbez53XLTbX99lN+VUbqoj6i/6HpTsVjCGMQbSpoZ/+e2P6iyGot8KnCee9hEc2WPuPbucJG7xGsHnH47v2g2nzkj9NDpcbqA4Nm+OnEez/jrhJI62HaO3uks1AS9WxObLM+d998JjIDknqeZjglPlOYptdvIHWxfO7HL7JymlhLYWKrdU4tnTnkh5Tz3nrPuhu4yR8U8cADlpTcGPn9TV7OaoZpN6cN2QS8S32DJNfmhRr8Ez3rl/H43Mgfc6Vx0jCgrJYiXHm8LnvWS7Cv30f3msnsF8FSzVpqz0r7mBrBlmoNUcPerdw8Ccp3cqWfONPFUbmsTZspISN6F4kX7RbRu7UtQuc1/twqxJ6ndonc+c0ZPZs3ws1UtekeCqnVTSu50W+a3u1E7+4XAErtJDOGXhSjAheVma7q1WDWfN1RzTSq4+1T0lJ9ghITc3SQjdhGJOile7svLCNmNvIFgPjrbP97ubxYpa6HYr0ccfFPJZXe9iRqSIN5g8vDckaNulwruPlW3sh3MXCd3Vpyd4kXrtscykvegeGLz0hH34+lxCQqnGTQWvVs0L/fe4+SepHdNT5I6O1tVt0g+OLkbXDZMnmbavjzsNG/32XUQ1MNp70jTI0Pmvas1VFOTCu4+VXj6DzBaKHIH5H6xKLvGSa0cvcuIXELCXv3FxO1eO93LS+fPIaP0VHLZ3ag8bEG8waSCu5KbDrzZEUY0vOQu89vFNdq5fbyXzvZlsmUsOrdtc8cnqDxJ8AlK1xnvnSF66CSRLQPLf9eoFw+n767rxJbrLiJ3Q3PmuBuMty7y23lqZ312EbHLar6HMUUy3WtWnruSq4rOqEReyMnd7UPmx3MX9UuV0N2O9TuDlD0uk5Tuh9BlVB7G4N3gUuSu5KYDb4SH3GU13IlV2Ytvh4PKXTNfmL42OteT+xyEzp5D52avUr/d5tu7ZM3oRJoxIyN3Qzet/HeL1qnnDmfmjBe183nuFskTO8Wzwd7I1Tt/HtLTvG5F7kquanlWRajJXZYlQyUiTmEbh0kyQue3M0npbLvf3HQ/ZM8fIzo/fy7rPD4DWBjJPiPXHL6XTQV3v9r7SufQkDuVnxx3Qmv7iijeg+CJnjyXzX/XBdkz/ExWncucsUhfkDXD+u6U2q3MGdNWY0ZE7oaeJHWr3ebBOyk9T4+5Ujuf587e/BXRuteN6VxW2p57A5QfaA5Swd2nis/9PtTkzsrVexcgkle+u18f3ivrxf1Yd/JOl9L93PiU0XnQexlKAaU8dyU37V7SNRTk7nvNVEG2DEvxrrQuo3fWX+foPU7nXN47nbWqc1kzvO/OeO3QCDQjPXLPS/jvebppzUzNY/x3XTO5bSe185kxrL3E0jq/KhMQPu893etVnruSq1pfuE2Re0JuudlelC5qC0rqjmMynP3ir787qfMBye89CdnxSmlIkbuSm6oXH5zz5C6s3y7x2qUeOwBi1e4VeOX8X1uGDNcvQeHJx3xfie9uMOSuATA4cteZWaou5G4kqJ3muIsyZajfTiled2yLqV3ks9uIHckaM2ygD6NNozz31KSCu08VX5T75B60hkmQOjOePnsDeutBaN2vr+6Woujn5mcq/rtSilLkruSm6udzn9xt4j12ps3PrFSp/+6YkWqne9s+q52AGFy9GcZbJ3pAcpd47mxtGVrP3dCJLced+u26lqzhTv31PI3JkNGS9WVk1M777LpGAOL03akMUVplrkYmRqYWS+8EKrgruemgi7/LeXIPokxRu1teuBe1ZzIbxo+3LqN1L1L347+LArdIYQjmmZa6oarkqqpFh4SG3OUzVJPbwtmodJ9O+2t2UufJXbDNz1hlvXVHNk0q5C7Ic6czVCm5W/TNZcpQz12U304pnc2SydNjrtRuI3Ykgz7bRoM+H9T9fhnkgtItoKY8dyVXtbok9z13Xn4oMWj9GH7bTwZKKjNOvXx2v8Tuh9bdSN2xLwVrJUyBvEGkbBklN+1emMOeuyhLBi4zVHmS1+37ZL67g8pFJM978emSO23nZ6gmiFyzZcnYM2U0jSBiyP12tp4M9dvZLJmIHvNF7V7EHiO6LcCHzZpJ+3pVcFdyU6tLw0fubvIzExUInp8ebw+2QpJ9v5zI+T5sP7fa736IXdaHp27R6yYj87AF8YYSe/9ftj8XpYK7T+U0uVNx7/KMkrujNowPz51myAiyZYgBe547pXXbbFXWc08SO7sSk26Ylt+uaUjSeKIaZJ4RJ3INQMRIZsMYAn896b0Ho3ae2K2gLvDbw2jRpHvNynNXclXhxdtDR+5eOdfCzBifVR+9Z5g6SdgtYyYVchdn0th/NYhSEr2I3s1CSYfklVKUsmWU3LR/cZfcJ3dGXhUhvbJlrNrvfrJlZH28ZqjytWWYv1amjE4Ag/HbtXieu57IjzOMpOdOc9Zpfnvcc49Z9WT4+u3srNQ83bSoXddMRJjHPLVHEnnbLLWzHruZeMF1EPsXBV+eOFejEqdYJr7swvFS2aSCu08VjAt3PXdWgas8eqyw5E7k3v67XzL33u9O7SKP3Q+xByJ5j0AWloCeSSW+x13356JUcPep/S+GrJ47Q+5BZ6jytWVktWRsmS6wZ8kk9yUzYvjZqbb+Bu3H+e16nNRlNWWMRDaMiNyt7BfNTuqGNSPVFFK7oTlnp+bpMU+f3dBMgBg2Yre+iHwsApKrUnnuqUkFd5/KO/+HnCd3v1kDXqTuy2dPBCs3knejeP68Qeg9XXLn20UTjXxRvCCqiMg8TIG8QaQ8dyU31b/UESQk5O7qt9M23meX5LbbyF6QJcPXc2ezZUwrXz2ROQPmOIvUEf9dbQBES/jtHL1rhmlbP5Xmt4vqybjNShXltudxFG8jdcZrjzB1Z1if3UbpIDAFxG4S3Z6+mavRSKJ0r1fZMkqu0s/ZAT3HyV0mP/nrmmQf+1jjCJh9zJO8iOJlhM2SPL+EHeBN727kHpTaRcQuo3U/VkvYAnmDSJG7kptir7YHQkLugJjepbnulNgTfaSrK4m2ee+doXHhrNQEkbOzVx1ZMvzqS8ysVA1I5LbbZ6XSKpB5RtJj57Nk2Nx2ltpZUmcJns5aFXntLLXb/HbNtAK6rpmIQbMF+DBaNJry3FOSCu5+ddZOoCg85C7y370IXuSfi4ieP0bmsbMUL+oj8uBl/rthO07W7k7ufqndjdhlgToVrz0sqzWlfZ2K3JXcRN5oGxrPXZgpw7S7rpsKbpapgNAdfR0+vDxDRlhLhs9tF1WBTFA7rQIponZau90PtVuZNAlq5/PaeWqnnjsARLSY7YvAoLTPELvYa/cuHZyLSvc6NUKgEfk53PY1Z6ng7lN1v6qCWXQg28NoUHl9iHhy1zTCkbmzn0XwHHlr3H49EWD5Npbi5R67neBl/jtP7zLfPQi5e1G7G7G72S1qpaYMSpG7kpvyVrQOVZ67mNiTvjq0xGdGkDnjy2Pn9lMCF3rsiewY3nePPxZ47QlSp/ROM2Rg89m9qV3TCKJ6zMp/p366zm2zXnuE6cN67ZTWHT474iRP/XYgEfQTr6doshTbHgale63Kc1dyVc2pu2EU1WZ7GI0qkcfuoHfmMU/p7GOW6t1onid5N4rn93kRvHNh6mRbsp87ufuldp7ORf66zHIR0XmYgnmmlfhed92fi1LB3aci7xSHh9z5u6l8rruE1GPsPj6vndvnyIyxUbmLz85mx1jPQyyfnfXYRXntySwZ08pr1zVY1C5abcktQ4Z67ckqkHaP3S07hnrrumbCTJTW1DUTIOLJVEA4i4qlfc3KllFy04ETd8Moqsv2MLImkd+efGxvs3nu9C+zj6V5lt5tj+FN8SIfnqdve7uI1O1teYKiXqJtntxFXjtP6M5tSVVJjtLDGNAzKUXuSq7Kf78VjPyQkHtCslx3aa2ZxD6iiWnd6cELPHbAns9O261ZpwKfPfE3TuvxWjLWGqmae8126rXH6dpeN4b32mWVHym1y+rHGHSGqktmjA4zGdS1+FeiyIrRQ2jPpH3NxMNXV8E93No/ZC/0oli2h9H4chA7+9ib3q1MSZbcE8dQIudJnqV8luL5dp7g6f48hp51rq+T1BnSFpC/r2JfgP2xhNp5YhfZLvTcVLLAZmg5GpEESvtaCYn/c9ufg1LB3afyP2kROnJ3qwwprC1D+1IC1wDTkfNOxJkyjP9uI3mW2OljwFpdiZI767NTb51fH5V+CRgJYtfoY6ZdVPlRtsoSWz+Gp3ZZdgzrsxuE+u3xi7KsGSK2YkRBLgw3WtNdblDZMk1cO3fuxDXXXIPXX38duq7jvPPOw4MPPoiWLVtKjzn55JPxr3/9y9Y2efJkLFiwIPDz7x+4H3pRjr4L/IildLaZtjOkzrZTewSgpM7vT5K5jOJZgqfnMXQuM4YjeN5/l9G7bCk863kkNgsAR+COH2NylM7aL2Jil5F6WIN5xpXFG6rZjFvNJrhfeuml2L59O1asWIG6ujpcfvnlmDRpEhYtWuR63JVXXonbb7/d2i4qKkrp+QvWF+Y+ufNZMhAQO+Dw4qX13S3/XULrAJPLThw570KPnZ6b5rOzGTLUZ7cqPcJR9ZGtH6NpBBGmXjufHUOJnJ2JKstp57NjHOQuIPY6GDBgIgad8duTAT5GNCvAO2enhifIp+u5azHrNoZ0f0Mpm3GrWQT3DRs24M0338SHH36IY489FgAwf/58jB49GnPnzkXXrl2lxxYVFaFz585pj2HfUQegF6Z9muYnLuDbsmYsCqfbxHaIxvwetlbd04id5nV7Fo0tS8aic1ikLvLh6Y1PADZLJV169yJ3a7k8JoADSX9dRu08sctoPcwBPZPKli2T7bjVLIL72rVrcdBBB1kvEACMHDkSuq7jgw8+wDnnnCM9duHChXjuuefQuXNnjB07FrfccktK34IFXxXkPrmzciF1Ud673YMnwgwaaIDJ++8iWndsc+TOz0BliF1LeO66nsyQYWehuvnsmkYQNZL56kGyYyxy9+mzU2IH4kE83t+00TpVmGu5Axm45izdUM123GoWwb2iogIdO3a0teXl5aFt27aoqKiQHnfJJZege/fu6Nq1Kz799FNMnz4dGzduxMsvvyw9pqamBjU1NdZ2dXU1AGB/r1rohS6/7XJRvE3D+u4crScpPrnN9uFpns5YdZA7k8LIe/EyH561VUT+O1s2gKf3iJ6kb9FkJD/legEgotcDkFM767PzxC6i9aABPUgufIzoMDRT+Jc9F7/tdbxbH/Z8/HOwz83up/vSzfP3S+70s06Vn5+P/PzUK8E2ZtwSKavBfcaMGZgzZ45rnw0bNqR8/kmTJlmP+/fvjy5duuDUU0/F119/jd69ewuPmT17NmbNmuVoz98ahZEfTXkszVI8scNO59a2zG8H85jJlLHnvRPhYwAAR+40j52tGaOBUrtzBqoG2DJjrEwZltqZfPb4F4Gz4iO/uhLtY/PZzag4n53Yid2EZnnsMSQCH0kGeZv/Dmdgz8SEJnoO2V+v5/I6TrbPbz+v5w8qzWdtmZKSElt7aWkpbrvtNkf/phi3RMpqcL/++usxceJE1z69evVC586d8cMPP9ja6+vrsXPnzkC+1NChQwEAmzZtkr5IM2fOxLRp06zt6upqlJSUoKZLHfRCw/dzNXs5qJ19zPnuvOeuMX0Yf53SPJvrTq0UIJnCGD9HMlh7ETwN1qz/LsqeyWOWutO5gC3z3b2Wx3OdmCTw2kXU7kXrfJAL20Sm9Ccx+bNltm7diuLiYqtZRu1NMW6JlNXg3qFDB3To0MGz37Bhw7Br1y58/PHHGDx4MADg7bffhmma1oX7UVlZGQCgS5cu0j6yn2LRH/OgFzQLFytzEpA7IKB1tg/nvfM0b2rJdqfPzj2mOezUZ9dIPOshEWxplUd29inrsbPVHqmFI6vRTgM9m8+ejs8eJ3jNqhkTQT1MGEkyT2TFxIgGaPE2Wr9dFthFQS4MpQkay5YpLi62BXeZmmLcEqlZRKsjjzwSv/rVr3DllVdiwYIFqKurw9VXX42LLrrIuuO8bds2nHrqqXjmmWcwZMgQfP3111i0aBFGjx6Ndu3a4dNPP8XUqVNx0kknYcCAAYHHUNs2Br0wJDNUeWqXtjF+OxfQk+0czVOS15Jt1FqhgdzhvdPgDTvB04WsWf+dluq1aJvz2nl6T3dha+FNUx/UzqY48jnxbgE9DME848pSnnu241azCO5A/O7x1VdfjVNPPdWaDPDQQw9Z++vq6rBx40bs27cPABCNRrFy5UrMmzcPe/fuRUlJCc477zzcfPPNKT1/ZLcBvS5Etgy49zxH8bz3zs9YZX12WwaMRjjy53LXacBnaN3y2AFbRoxl03B57GxWjM7YNiyxs8GdEruuEeSZbA47QT1zg5UP9JTmTWjQiQ5TMxO0Tixqt6o8arpt5qkoK4aXPUWSC/IhyppJ91q1WCK7ymV/QymbcUsjJEcLK2RI1dXVaN26NUruvQN6YQhSIb2o3bqxas+ScXjy7E1Rup8N3D4oXtftBM978LRcLxvIg9A79ebtWTLyjBlPG4Yh8IgWz55hqV3ms/PELgvqYQrorPbtjuGCgV+iqqrKl21CRT+7w0fOQl5E/tmtrzuA91eWBj5/U1ezIfdsS6/VoeshSIUU0aQjUwbQ4v/h2il5a1Y/wpJ5og9hAj372MpdTxxjctkwrF2j6wSaqVsBO6ZrVqCPEc1G7KauWb66oZuADuiEwCSaFeDNmJbw0wlg0qCrIQ+J6Y3ERCzxN566Y4L9HReL30CwAjyf9SKS7Qaq40arOKiH7WYqAGjpzlCFh+ee1tmbrlRw9ymSR0DyQkRO3DvePpGJwEHzLNELMmhkN01tFK8TO8EnLBib785kyoj8d36ZPGq9WI+ZFEf+5ilbWkC0yDXvuXv57W7UzlK+LLB7BfWw+O/pL9aRnUlM2ZYK7j5lVS0Mm1jk4S0YkUUj+hJg0UlPPnb46pw1IwvsGhfYdY250YrkY/YLwLUcAZf+yC7Fx05i4i0Zv4Gdym9glwX1sATzTMtvnnuuSQV3n9LrNOhGrv6AE8gK6potYItK/yZtGJ7aNYbk2T4aY9lo1o3XuC2jJYK9Bo0kA72pazbfnXD+u0kAQycgCXo3Y4ZF8tABQghMLZ5eqUNLWC+JbaLBTHjtJtGBRKoiiI6YRqxJRol8nXg0IHqyFK1GEx4RP14D9Piig8LZm4CYymX57GG+mQpk4IYqIdBc6NxtX3OWCu4+FSuKgYQlFZKK/y5zbAtuqgpsGFupApebqDSjIYgNY808Zfbzk5h4K4ZNgYxovC3jrO7odROVJ3YAiNIbqom0RxGxy2wYL99dKaDMxD+3/TkoFdx9KiypkMIQ4rBh6HbwNEhHGiVfype9scp48HTSEl8YjC0rQC0autg1pfp0ioPVSSYtRRCzqFxPbJvQQZfLq0WeNVmJTYVkb6LS/iKJfHcgnJUh6RdmqlLkruSqujb10Avrsz2MxpUfUmfaZYRu7WMonfZLFg5z+uqsf87WhxHRuijtkS8YJgrijglMXKEwGuRFE5bY9MeIFrOV8uWJnU13FPnrrjdThbZOeIJ82tdqkvg/t/05KBXcfSoU5QcEtxREi3VAc5YcsPrydJ5YjIMADKlzWTX0se5C8JIiYVahMBrgE4XC+MwZq2okCCJGzHrML8YR4b4AZOUGaIGwiF4PAwR1msGU9Y3vN2EiBg0GdJjUlrE8+UQlxESAl1G8vd5MeAJ6JqX5LD+Qa8rxaJU51XYNX8lfzYvcwVK4ndx1dj9D9qLSAkFK/IponV+gQ1QgjJ+olI7HDiQnKnl57Dyxi/x1R5tLQA+j995c67lnWyq4+1R0az6MgtRrOzdLMUgjzJKh7Sy9I7lNNM5np+mkDLVLC4exy+glaJ0WDdMA6IZpu/HqRu98+YEIk+MuWvyaz3WPcCV+6RJ67A3V5OP4eaJaPXSSrCETQX2S4MHm5iXLEsQpn1gFxFiF2XtP91pVKqSSq+p77ocZ0gWybQRPKdy2P0nndBEOlsql2/C/GIebt87nr7NlBfil9PjSAvzap25FwdgADiSX2aOBHoCN2O2FwpJ0LvLXRbQe5oCeUSnPXclN0U0hWCCbkW1GKmAjdumCHSyha06Kdyyrx/nstmX12H2CZfV03bRuyPILYdPZqZTeaVlfB7nrpqPOTL5R71iYIyi5JxfHTlo0tK0OsOrOmERPUnxihpwsgId5qT09zetV2TJKroodsRekKGR57oDjbpPGkDmVzrVRSk8+Ti7OwZI6EJ94xLa70bood120fF4mF+BIErndY2fLCvj12GX+umjlJS9bRimAlOeu5Ka8z1uEg9w5Yvf02hNt1F8XUbyVXcN57nFyZ4hd57JoGHK3/HeaOcOVADYSHrzOeu0Jko8YMVu9mageswif+u6ijJm4/+5N7pFEH7bsQESrdwR9QzOhExNRLYY6JOwaMKWBAQCmw3e3Ld4RwiCf/g1VuE9UytGXVAV3nzKP3g2tqC7bw2hUsXTOb4toHYCN0Gk79dPpNiVy2k9E6gCsgl8AbCsmyRa75v11WUaMG7HT1Mb42Exb/joN6oA4K4b32GUZMcmgLc6ScaybKog+6U7saU5KexKTSaC53K/QlOcebhnrWoWD3FkxFG+vCplY3IandLrPyoNMeuxERPMJErf68ATPZtYYSc8dGoFmMGmUNFuGLtJhJJfao8vssVkzESNm3ZCN6nH6ZimeVoek5E5pPaLFbJOaIhbVmzZyj2r10BEndBu106BPiO0LIJawZmIknisPJsjbJzM5g1AYSF6lQqYmFdx9SjuuClrRgWwPo1HlIHfmMRtoeHqnWS+0H0/p9DFP6ryvLsqE8UvrosU2+FmnQJLGRdUdrf0WucdvhArtFm7WqXAWKuOvu9G6W0APQzDPuEw47EbH/hyUCu4+pa1tDS1E5G5luwB2nz3xN6YJaF6UNZOgb/t2so/Ng9eZberF018BBkFyhmuC3HUxvdPaM4aWzHnnyZ1aPlEjZsuYSRJ7PHjn6/VCco8/rre+CFjf3bCRPM2mqbcFfttjmDADWjPpZpA0J6lsmdSkgrtP5Z2wE0ZRyCYxJcQTPO+38xRv+e1Wf6ZNQupA3Fdn22W0DsBG32z+evw8SYsEgOusU7d67AAsiyX+OJZ4Pv/ELvLXHQtiS0g9zAE9ozI9ZjGZuYnuKrj7VOydtkAYyF2S327z1NnMGd5PBwTkDobUia3d1k8nyQwaxmcnXNYMNEAzaAZNfOaqrpvWUnyGYZ+xmmeYtkqRESOeHWNwXjtL7jRzxg+5x/fV2zJleL89otU7qT3xRcJ+ucSIltgm1oxVwB7YvRbWzjWlfb3Kc1dyU/6pO0JJ7rzna8+YsRM6bWMpnW9jSZ2lcrpPROtAnMYBBPbXUyF2trqj28xTy4MX5LCzxC7y10W0bl/AI7zBPONSnruSm+pWtIcZDQG5J8Tnt/O0brXJvHbaxzEjNU7idmJPZN8YsGfYGEz2jJEIcJTe9UTmDJP3rmvxv5TcrQlPRszmu9MqkXmaafnvNGMmqsds5E4rQ8rIPe6txz11dmZqlHrwzLaU2mluO2MzUfFWTBhvqKqVmFKTCu4+VTiqEnktwkfugBN6dBG9c/67G6nz+3laT7Y7s2HixzYMsQPu1R1lHjufEQM4iZ3313lal5G6LLCFqT6pG3T7UsxjKaZYbqK7Cu4+dWB5RxghIHfC1/mVzEx19d11J9XzHryVRaPzbYwvb7CPmcwZncT9eKbmjG4QK2vGMIitUqTBZszoJiIMudNVmvK0mEXubC131nPP1+tttdwL9DpHpgydmUo9djZLxvLdtXjNd/ZLhvrs8dmpWuLLiPfd7QrLkr5pX6fy3JXc1GJMOMndj+fOPqYEKqN1nSNckb8uy18HEJjYAZotw9ZhZ7NekufxWytG5rF7ZcTIaF1G6iI6D0tAz6w8gnuOWl0quPvUvtc6hYLcXWelWtXAAFdfXUTqQnJP+O+Wx574mOlMO5PvbuW9a8TKpLE8dyPpu+s0WyaR757H1JmxkbueyGlPgdzZf5Te2ZmpMr/dyoVnqZ0kqT2WIPbEK2sL8GxgD5Mtk/a1KnJXclOrs7eHktwBJ72LbvhJPXfOW6dtPM2L6dwfsQPi2up+M2NYL12Wy+4nj50ndi9/3XC0JyUi9DAF9IwqFgOIS0VXMzervarg7lN7Xu4SDnKnEmXJgCVzAcWLPHeG3G0Ur8OePUO9d52hd4PJezcYemdz3hNZM5phQtMTk6Qsco//zdNN20xVN3KnOe8sudNJUPQx/QLJ1+tsmTJsJcgCvc72pWDz4C3f3e61U5897rvHgzkN8rbA3yD/w5uu0r5eRe5Kbio+7/tQkbuoSBWb0SHy3kW0Ht92J3bah9J5sq8zKwYAgmTGALQ+DJu54u2ziyo8ijJjRMRO/7LEHoTWHTdOnf97lILIJHD11VVVyHBr95KuoSJ33m93y5YhmiaoF4NkvRiG1B30ztSTIYagL6V6ltyZ+jNWrXeDyXdPEDvNdw9C7nyeO6X1PJ3z2vV6sFkylNTpzNQoJfnEl4LVDmbmauILIAK7lcMTewzJAG84Vi3PfbsmIrjmQFLkruSm1hduCxe5C0jHM1PGhdjpX1EeO2D32emxIp+dPU/QfHYAoEvexZ9TTu2ymuwynz0IsXvRumHbLw5suR7QMyqTwDXPXZF7uFW9+ODQkLuD2pEkdtrmzGPXnLQuI3WW8g3mGKuWDLuPkjssj50wfrsbudN/NL+d1pjxQ+5sPXdK7gV6nS1DpkCrt2XKRBhat+rLcFky1CKyvHZCELF9iQCmxgRvQqwA77RrwpEXmfZ1mh6TmFThsHDroIu+CxW5s3JWhcwMtdN+XtQOJLNhglI7PZalfi+v3Ss7RpYZ45fYeVqXkbowzz0kAT2jUraMkpt2PX9IaMgdgDPfnSd4QZ67kN45indkzzBtJvXVbX48Q+4a57tTgjcajtyjjLfO57nHs2VMi9h5vz2CmCBbJubIkIlqpuWz15GE5w4AHLHTwK6n60E3M2nKc09JKrj71EEXK3KnCkru4hmqYnJPJa89aMXHIF67rfIjQ+22MTDBmr4GoqwYGbGLaJ0n9LAF9EyKxGIgLnnuROW5h1tVi8JF7rL8dttjmffuQusO353NkOHz3Zm8dqvOTArkHjFi0myZfKPeVs89TurJXPd8vc41U8bNb2dz2mmWTDTxJROxvlwIdEJgJHx2A/Fgb9KsGS7Ih9GWSfuaCXG/aarIPdxqdYnKlkklW0aUA+/muQetIUOfj04uAkS1ZOptOfJ0slG8b30y00UzhTXa/XjtvM/uRexJWteEtM6SehgDekZFPPLcVXAPt3YvDEG2DO+zM+2iVZasbd2d3B0evIjsXcjdUWPG8M6WYStDsnnuESNmqwpJ67mz5J5v+e7JTJmIFrNly1BSZ/325OzVuN+eXI0pkVEjonaAofZ4ZowOIEYIDGjQNS1eb4b67dxtVlmqZC4p7Tx3r2X2iMqWCbVaXBLuGao8yctqydDHMnr3k+cuy5Zhz8N77iJyT8dvT5fa2cwYkcceb9OEN0ltBC/JaA9DUM+USCwGorl47m51Z5qxVHD3qb2LcnyGKhcrfJE7ky3jl9ytvHaB5+6ZLeOS567nyWvLRNiVmBKee8SIfxlEjZitrgz14Cm50xmqET2GfK3e1W+nee1RhurZ3Haazx6xvkDol1q8yCUN+maC2OMyrQBvv/EanmlMaV+psmWatu666y4sW7YMZWVliEaj2LVrl+cxhBCUlpbiiSeewK5du3D88cfj0UcfxWGHHRb4+QsvDmdVSFlFSFGdGTmh+6sGGbH1E89Q9ZPnLvPcM0XuPLWzYxeVD+CzYuJteuJatcRx4sDNE3qYgnrGZJJ4Gq1MDRjcsxm3mk1wr62txQUXXIBhw4bhr3/9q69j7r33Xjz00EN4+umn0bNnT9xyyy0YNWoUvvjiCxQUBKPw/YvDUxWSz5Sx2kR+O0vnLnnuNoJPxCe7ty6ZoSqrLSOqCmkkviy4eu4Rbg3ViBFDVI/BSOS15+kMuev1wqqQTs/d6beL6J3mtidpnea1JzJkCBDV7DdV418aGnToce/d+lJIfCGE7AZr2tdLPMoPNGBwz2bcajbBfdasWQCAp556yld/QgjmzZuHm2++Gb/+9a8BAM888ww6deqEV155BRdddFGg549eGL6VmHhqd60EmSBYPyswsfvypLQejN7p0neiPPcg5M6WDACSs1t5ao/vS2br8F57JBGPnD57nNp5YvdjvYQtqGdKcc9d/ounIT33bMatZhPcg6q8vBwVFRUYOXKk1da6dWsMHToUa9euDRzca5Z0Qn0YyF2UMSPIb2e346TNUDtH6sKsGfrYqi0jqAppMJkyfD13K2MmkSGTJ15DNY+ZmUrJPT8vPtOUZsewddwLjTomz91O7rzfXqDVgq6XWqDVxb9kErNSC7Q6i9qpz06/BOLZMknLJqJpiS8aDXUEiNCvBM100LrhEqRyVekuLUhMAuJiy5Am5LlnMm7lbHCvqKgAAHTq1MnW3qlTJ2ufSDU1NaipqbG2q6qqAACRM7cgryjaACNtmvIzKxUQEzuFTzdiF3nueRBRPHMsQ+3JZezoL4DENiXoBGVrGrO0HUPtesJX50k9jykZYNF+oq9uihfXiB9Hs2WcPjs7GUnTtKTfnvhLNA311uupox4spRMuoOdm2p6bqvfErznVIFxPalzTHetRF3+e6mpbe35+PvLzG/fXeqpxS6SsBvcZM2Zgzpw5rn02bNiAPn36NNKIgNmzZ1s/pVh9eMljjTYGJSUlp3766Se0bt3ad/9oNIrOnTtjTcVyz74tW7ZESUmJra20tBS33Xabo29TjFsiZTW4X3/99Zg4caJrn169eqV07s6dOwMAKisr0aVLF6u9srISAwcOlB43c+ZMTJs2zdretWsXunfvji1btgR6Y2VT1dXVKCkpwdatW1FcXJzt4fiSGnPjqDmOuaqqCt26dUPbtm0DHVdQUIDy8nLU1tZ69iWEOAqUyai9KcYtkbIa3Dt06IAOHTo0yLl79uyJzp07Y9WqVdaLUl1djQ8++AC///3vpcfJfoq1bt262XwYqIqLi9WYG0FqzI0jXQ9+v6GgoCBwZpyXmmLcEqnZ3J3ZsmULysrKsGXLFsRiMZSVlaGsrAx79uyx+vTp0wdLly4FEPc2r7vuOtx555147bXXsH79elx22WXo2rUrzj777CxdhZKSUpiU1bhFmokmTJhAp5nZ/q1evdrqA4A8+eST1rZpmuSWW24hnTp1Ivn5+eTUU08lGzduDPS8VVVVBACpqqrK0JU0vNSYG0dqzI2j5jhmqmzFLUIIaTbBPVs6cOAAKS0tJQcOHMj2UHxLjblxpMbcOGqOY24K0ghpQkmeSkpKSkoZUbPx3JWUlJSU/EsFdyUlJaUclAruSkpKSjkoFdwBPPzww+jRowcKCgowdOhQ/Oc//3Htv2TJEvTp0wcFBQXo378/li/3ngGXaQUZ8xNPPIETTzwRbdq0QZs2bTBy5EjPa2wIBX2dqRYvXgxN07KSwhp0zLt27cKUKVPQpUsX5Ofn4/DDD2/090fQMc+bNw9HHHEECgsLUVJSgqlTp+LAgQONMtZ///vfGDt2LLp27QpN0/DKK694HvPOO+9g0KBByM/Px6GHHuq7KFfolO07utnW4sWLSTQaJX/729/I559/Tq688kpy0EEHkcrKSmH/9957jxiGQe69917yxRdfkJtvvplEIhGyfv36JjvmSy65hDz88MNk3bp1ZMOGDWTixImkdevW5LvvvmuyY6YqLy8nBx98MDnxxBPJr3/968YZbEJBx1xTU0OOPfZYMnr0aLJmzRpSXl5O3nnnHVJWVtZkx7xw4UKSn59PFi5cSMrLy8k///lP0qVLFzJ16tRGGe/y5cvJTTfdRF5++WUCgCxdutS1/+bNm0lRURGZNm0a+eKLL8j8+fOJYRjkzTffbJTxNieFPrgPGTKETJkyxdqOxWKka9euZPbs2cL+F154IRkzZoytbejQoWTy5MkNOk5WQcfMq76+nrRq1Yo8/fTTDTVEh1IZc319PRk+fDj5y1/+QiZMmNDowT3omB999FHSq1cvUltb21hDdCjomKdMmUJ++ctf2tqmTZtGjj/++AYdp0h+gvsNN9xA+vbta2sbN24cGTVqVAOOrHkq1LZMbW0tPv74Y1t5TV3XMXLkSKxdu1Z4zNq1a239AWDUqFHS/plWKmPmtW/fPtTV1QWu1ZGqUh3z7bffjo4dO+K3v/1tYwzTplTG/Nprr2HYsGGYMmUKOnXqhH79+uHuu+9GLNY4a3SmMubhw4fj448/tqybzZs3Y/ny5Rg9enSjjDmosv35a07K2ZK/frRjxw7EYjFhec0vv/xSeExFRUVGynGmqlTGzGv69Ono2rWr40PSUEplzGvWrMFf//pXlJWVNcIInUplzJs3b8bbb7+NSy+9FMuXL8emTZtw1VVXoa6uDqWlpU1yzJdccgl27NiBE044AYQQ1NfX43e/+x1uvPHGBh9vKpJ9/qqrq7F//34UFhZmaWRNT6Em9zDqnnvuweLFi7F06dKMF1TKlHbv3o3x48fjiSeeQPv27bM9HN8yTRMdO3bE448/jsGDB2PcuHG46aabsGDBgmwPTap33nkHd999Nx555BF88sknePnll7Fs2TLccccd2R6aUpoKNbm3b98ehmGgsrLS1l5ZWWmV3uTVuXPnQP0zrVTGTDV37lzcc889WLlyJQYMGNCQw7Qp6Ji//vprfPPNNxg7dqzVZpqJxTTy8rBx40b07t27SY0ZALp06YJIJALDMKy2I488EhUVFaitrUU02rCLvaQy5ltuuQXjx4/HFVdcAQDo378/9u7di0mTJuGmm25KqRJjQ0r2+SsuLlbUzqlp/Z9rZEWjUQwePBirVq2y2kzTxKpVqzBs2DDhMcOGDbP1B4AVK1ZI+2daqYwZiC+6e8cdd+DNN9/Escce2xhDtRR0zH369MH69eutCnplZWU466yzcMopp6CsrMyxqEJTGDMAHH/88di0aZP1RQQAX331Fbp06dLggT3VMe/bt88RwOmXE2mClUmy/flrVsr2Hd1sa/HixSQ/P5889dRT5IsvviCTJk0iBx10EKmoqCCEEDJ+/HgyY8YMq/97771H8vLyyNy5c8mGDRtIaWlpVlIhg4z5nnvuIdFolPz9738n27dvt/7t3r27yY6ZVzayZYKOecuWLaRVq1bk6quvJhs3biRvvPEG6dixI7nzzjub7JhLS0tJq1atyPPPP082b95M3nrrLdK7d29y4YUXNsp4d+/eTdatW0fWrVtHAJD777+frFu3jnz77beEEEJmzJhBxo8fb/WnqZD/9//+X7Jhwwby8MMPq1RIiUIf3AkhZP78+aRbt24kGo2SIUOGkP/3//6ftW/EiBFkwoQJtv4vvvgiOfzww0k0GiV9+/Yly5Yta+QRBxtz9+7dhWVHS0tLm+yYeWUjuBMSfMzvv/8+GTp0KMnPzye9evUid911F6mvr2+yY66rqyO33XYb6d27NykoKCAlJSXkqquuIj///HOjjHX16tXC9yYd44QJE8iIESMcxwwcOJBEo1HSq1cvW7lcpaRUVUglJSWlHFSoPXclJSWlXJUK7kpKSko5KBXclZSUlHJQKrgrKSkp5aBUcFdSUlLKQangrqSkpJSDUsFdSUlJKQelgruSkpJSDkoFdyUlJaUclAruSjmtk08+Gdddd122h6Gk1OhSwV1JSUkpB6VqyyjlrCZOnIinn37a1lZeXo4ePXpkZ0BKSo0oFdyVclZVVVU444wz0K9fP9x+++0AgA4dOtgW01BSylWFeiUmpdxW69atEY1GUVRU1GgrZSkpNRUpz11JSUkpB6WCu5KSklIOSgV3pZxWNBpFLBbL9jCUlBpdKrgr5bR69OiBDz74AN988w127NhhW7xaSSmXpYK7Uk7rj3/8IwzDwFFHHYUOHTpgy5Yt2R6SklKjSKVCKikpKeWgFLkrKSkp5aBUcFdSUlLKQangrqSkpJSDUsFdSUlJKQelgruSkpJSDkoFdyUlJaUclAruSkpKSjkoFdyVlJSUclAquCspKSnloFRwV1JSUspBqeCupKSklINSwV1JSUkpB/X/AZQ5fc+k9D0ZAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy.io import loadmat\n",
    "def gen_testdata():\n",
    "    data = loadmat(\"/kaggle/input/allen-cahn/Allen_Cahn.mat\")\n",
    "\n",
    "    t = data[\"t\"]\n",
    "    x = data[\"x\"]\n",
    "    u = data[\"u\"]\n",
    "\n",
    "    dt = dx = 0.01\n",
    "    xx, tt = np.meshgrid(x, t)\n",
    "    X = np.vstack((np.ravel(xx), np.ravel(tt))).T\n",
    "    y = u.flatten()[:, None]\n",
    "    return X, y\n",
    "\n",
    "X, y_true = gen_testdata()\n",
    "\n",
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(X, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "433993ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T06:16:50.567055Z",
     "iopub.status.busy": "2024-10-16T06:16:50.566433Z",
     "iopub.status.idle": "2024-10-16T06:16:50.572084Z",
     "shell.execute_reply": "2024-10-16T06:16:50.570776Z"
    },
    "papermill": {
     "duration": 0.099028,
     "end_time": "2024-10-16T06:16:50.574018",
     "exception": false,
     "start_time": "2024-10-16T06:16:50.474990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Loss Res: 0.001584, Loss_IC: 0.000000, loss_bc: 0.000029', 'Loss Res: 0.000277, Loss_IC: 0.000000, loss_bc: 0.000004', 'Loss Res: 0.000101, Loss_IC: 0.000000, loss_bc: 0.000002', 'Loss Res: 0.000101, Loss_IC: 0.000000, loss_bc: 0.000002', 'Loss Res: 0.000101, Loss_IC: 0.000000, loss_bc: 0.000002']\n"
     ]
    }
   ],
   "source": [
    "print(loss_recorder)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5827901,
     "sourceId": 9563008,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30787,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12436.317809,
   "end_time": "2024-10-16T06:16:52.086370",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-16T02:49:35.768561",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
