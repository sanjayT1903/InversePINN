{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4d75cf2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T00:20:29.496080Z",
     "iopub.status.busy": "2024-10-11T00:20:29.495664Z",
     "iopub.status.idle": "2024-10-11T00:20:32.676515Z",
     "shell.execute_reply": "2024-10-11T00:20:32.675504Z"
    },
    "papermill": {
     "duration": 3.19031,
     "end_time": "2024-10-11T00:20:32.678863",
     "exception": false,
     "start_time": "2024-10-11T00:20:29.488553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "17ee90b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T00:20:32.691328Z",
     "iopub.status.busy": "2024-10-11T00:20:32.690939Z",
     "iopub.status.idle": "2024-10-11T00:20:32.713289Z",
     "shell.execute_reply": "2024-10-11T00:20:32.712429Z"
    },
    "papermill": {
     "duration": 0.030516,
     "end_time": "2024-10-11T00:20:32.715138",
     "exception": false,
     "start_time": "2024-10-11T00:20:32.684622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "# @article{zhao2023pinnsformer,\n",
    "#   title={PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks},\n",
    "#   author={Zhao, Leo Zhiyuan and Ding, Xueying and Prakash, B Aditya},\n",
    "#   journal={arXiv preprint arXiv:2307.11833},\n",
    "#   year={2023}\n",
    "# }\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(2, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        # pdb.set_trace()\n",
    "        # raise Exception('stop')\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c7ffd47c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T00:20:32.727093Z",
     "iopub.status.busy": "2024-10-11T00:20:32.726586Z",
     "iopub.status.idle": "2024-10-11T00:20:32.731330Z",
     "shell.execute_reply": "2024-10-11T00:20:32.730449Z"
    },
    "papermill": {
     "duration": 0.012889,
     "end_time": "2024-10-11T00:20:32.733330",
     "exception": false,
     "start_time": "2024-10-11T00:20:32.720441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1e-05\n"
     ]
    }
   ],
   "source": [
    "gamma_2_AC = 0.01\n",
    "gamma_1 = 10e-6\n",
    "print(gamma_1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "715e01d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T00:20:32.745055Z",
     "iopub.status.busy": "2024-10-11T00:20:32.744782Z",
     "iopub.status.idle": "2024-10-11T00:20:32.823296Z",
     "shell.execute_reply": "2024-10-11T00:20:32.822274Z"
    },
    "papermill": {
     "duration": 0.086576,
     "end_time": "2024-10-11T00:20:32.825262",
     "exception": false,
     "start_time": "2024-10-11T00:20:32.738686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d35f7c11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T00:20:32.838945Z",
     "iopub.status.busy": "2024-10-11T00:20:32.838590Z",
     "iopub.status.idle": "2024-10-11T00:20:33.054937Z",
     "shell.execute_reply": "2024-10-11T00:20:33.053951Z"
    },
    "papermill": {
     "duration": 0.225175,
     "end_time": "2024-10-11T00:20:33.057480",
     "exception": false,
     "start_time": "2024-10-11T00:20:32.832305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data([-1, 1], [0, 1], 51, 51)\n",
    "res_test, _, _, _, _ = get_data([-1, 1], [0, 1], 101, 101)\n",
    "\n",
    "# Define the initial condition for u(x, 0)\n",
    "#def u_init(x):\n",
    "   \n",
    "    #return np.sin(n * np.pi * x / L)\n",
    "#print(res[:, 0])\n",
    "\n",
    "# Apply the initial condition to the spatial points at t=0\n",
    "#init_cond = u_init(res[:, 0])  # Assuming t=0 corresponds to the first time point\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=5, step=1e-4)\n",
    "b_left = make_time_sequence(b_left, num_step=5, step=1e-4)\n",
    "b_right = make_time_sequence(b_right, num_step=5, step=1e-4)\n",
    "b_upper = make_time_sequence(b_upper, num_step=5, step=1e-4)\n",
    "b_lower = make_time_sequence(b_lower, num_step=5, step=1e-4)\n",
    "res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Initial condition as tensor\n",
    "#init_cond = torch.tensor(init_cond, dtype=torch.float32).to(device)\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "x_res, t_res = res[:, :, 0:1], res[:, :, 1:2]\n",
    "x_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2]\n",
    "x_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2]\n",
    "x_upper, t_upper = b_upper[:,:,0:1], b_upper[:,:,1:2]\n",
    "x_lower, t_lower = b_lower[:,:,0:1], b_lower[:,:,1:2]\n",
    "\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ff74ac5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T00:20:33.072289Z",
     "iopub.status.busy": "2024-10-11T00:20:33.071965Z",
     "iopub.status.idle": "2024-10-11T00:20:34.435411Z",
     "shell.execute_reply": "2024-10-11T00:20:34.434036Z"
    },
    "papermill": {
     "duration": 1.373167,
     "end_time": "2024-10-11T00:20:34.437582",
     "exception": false,
     "start_time": "2024-10-11T00:20:33.064415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=2, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453561\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8dc50ce8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T00:20:34.450411Z",
     "iopub.status.busy": "2024-10-11T00:20:34.450000Z",
     "iopub.status.idle": "2024-10-11T00:20:34.456376Z",
     "shell.execute_reply": "2024-10-11T00:20:34.455660Z"
    },
    "papermill": {
     "duration": 0.014774,
     "end_time": "2024-10-11T00:20:34.458213",
     "exception": false,
     "start_time": "2024-10-11T00:20:34.443439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_minibatch(data, batch_index, num_batches=1):\n",
    "    \"\"\"\n",
    "    Splits the data into `num_batches` parts and returns the part corresponding to `batch_index`.\n",
    "    \n",
    "    Args:\n",
    "    - data: Tensor of shape (N, *, *) where N is the number of data points (could be res, b_left, b_right, etc.)\n",
    "    - batch_index: Index of the batch to return (between 0 and num_batches-1)\n",
    "    - num_batches: Total number of batches to split the data into (default: 5)\n",
    "\n",
    "    Returns:\n",
    "    - A subset of the data corresponding to the specified batch.\n",
    "    \"\"\"\n",
    "    total_size = data.size(0)\n",
    "    batch_size = total_size // num_batches\n",
    "    start_idx = batch_index * batch_size\n",
    "    end_idx = start_idx + batch_size\n",
    "\n",
    "    # Ensure we get all remaining data for the last batch\n",
    "    if batch_index == num_batches - 1:\n",
    "        end_idx = total_size\n",
    "\n",
    "    return data[start_idx:end_idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "18e71044",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T00:20:34.470543Z",
     "iopub.status.busy": "2024-10-11T00:20:34.470245Z",
     "iopub.status.idle": "2024-10-11T04:04:25.646723Z",
     "shell.execute_reply": "2024-10-11T04:04:25.645556Z"
    },
    "papermill": {
     "duration": 13431.185571,
     "end_time": "2024-10-11T04:04:25.649290",
     "exception": false,
     "start_time": "2024-10-11T00:20:34.463719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1200 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      " 17%|█▋        | 199/1200 [1:03:43<5:10:33, 18.62s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 33%|███▎      | 399/1200 [2:08:14<4:22:39, 19.67s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 50%|████▉     | 599/1200 [2:50:59<52:54,  5.28s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 67%|██████▋   | 799/1200 [3:08:34<35:12,  5.27s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 83%|████████▎ | 999/1200 [3:26:09<17:40,  5.28s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████▉| 1199/1200 [3:43:45<00:05,  5.28s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1200/1200 [3:43:51<00:00, 11.19s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "import random \n",
    "list1 = [0]\n",
    "random.choice(list1)\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "\n",
    "#t_ic = torch.zeros_like(x_right_batch)\n",
    "k=0\n",
    "batch_index = 0\n",
    "x_res_batch = get_minibatch(x_res, batch_index)\n",
    "t_res_batch = get_minibatch(t_res, batch_index)\n",
    "\n",
    "x_left_batch = get_minibatch(x_left, batch_index)\n",
    "t_left_batch = get_minibatch(t_left, batch_index)\n",
    "x_right_batch = get_minibatch(x_right, batch_index)            \n",
    "t_right_batch = get_minibatch(t_right, batch_index)\n",
    "            \n",
    "x_upper_batch = get_minibatch(x_upper, batch_index)\n",
    "t_upper_batch = get_minibatch(t_upper, batch_index)\n",
    "x_lower_batch = get_minibatch(x_lower, batch_index)\n",
    "t_lower_batch = get_minibatch(t_lower, batch_index)\n",
    "t_ic = torch.zeros_like(x_right_batch)\n",
    "error_finish = False\n",
    "error_finish_threshold = .0005\n",
    "for i in tqdm(range(1200)):\n",
    "    k+=1\n",
    "    if k == 200:\n",
    "        \n",
    "            print(\"progress\")\n",
    "            k=0\n",
    "    def closure():\n",
    "        t_ic = torch.zeros_like(x_right_batch)\n",
    "        pred_res = model(x_res_batch, t_res_batch)\n",
    "        pred_left = model(x_left_batch, t_left_batch) #  Left boundary of the spatial domain (x=0) over all times.\n",
    "        pred_right = model(x_right_batch, t_right_batch) # t_right is 1\n",
    "        #print(x_right_batch)\n",
    "        pred_ic = model(x_right_batch,t_ic )\n",
    "        #print(pred_ic)\n",
    "        #return\n",
    "        pred_upper = model(x_upper_batch, t_upper_batch) #  All spatial points at the final time step (x=1).\n",
    "        pred_lower = model(x_lower_batch, t_lower_batch) #  All spatial points at the initial time step (x=-1).\n",
    "        pred_res_t0 = pred_res[:, 0, :]\n",
    "        #print(t_lower_batch) #LOWER BATCH IS X=-1 Higher is X=1\n",
    "#         print(t_right_batch)\n",
    "\n",
    "\n",
    "        u_x = torch.autograd.grad(pred_res, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res_batch, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         u_x_left = torch.autograd.grad(pred_left, x_left_batch, grad_outputs=torch.ones_like(pred_left), retain_graph=True, create_graph=True)[0]\n",
    "#         u_x_right = torch.autograd.grad(pred_right, x_right_batch, grad_outputs=torch.ones_like(pred_right), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        # Compute u_x at x = -1 and x = 1\n",
    "        u_x_lower = torch.autograd.grad(pred_lower, x_lower_batch, grad_outputs=torch.ones_like(pred_lower), retain_graph=True, create_graph=True)[0]\n",
    "        u_x_upper = torch.autograd.grad(pred_upper, x_upper_batch, grad_outputs=torch.ones_like(pred_upper), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        \n",
    "        check_nan(u_x, 'u_x')\n",
    "        check_nan(u_xx, 'u_xx')\n",
    "        check_nan(u_t, 'u_t')\n",
    "        check_nan(pred_res, 'pred_res')\n",
    "        check_nan(pred_ic, 'pred_ic')\n",
    "        check_nan(pred_upper, 'pred_upper')\n",
    "        check_nan(pred_lower, 'pred_lower')\n",
    "       \n",
    "        #alpha =a   # thermal diffusivity (can be modified)\n",
    "        #1. PDE LOSS eesidual\n",
    "        interm = (gamma_2_AC * (pred_res**3 - pred_res)) - (gamma_1 * u_xx )\n",
    "        interm_x =  torch.autograd.grad(interm, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "        interm_xx =  torch.autograd.grad(interm_x, x_res_batch, grad_outputs=torch.ones_like(interm_x), retain_graph=True, create_graph=True)[0]\n",
    "        loss_res =torch.mean((u_t - interm_xx)**2)\n",
    "\n",
    "        #2. Loss for initial condition\n",
    "        #print(pred_ic)\n",
    "        initial_condition = -1 * torch.cos(2*torch.pi * x_right_batch)\n",
    "        #initial_condition = (x_right_batch**2) * torch.cos(torch.pi * x_right_batch)\n",
    "        loss_ic = torch.mean((pred_ic-initial_condition) ** 2)\n",
    "        \n",
    "        \n",
    "        # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "        loss_bc_1 = torch.mean((pred_upper - pred_lower) ** 2)\n",
    "        loss_bc_2 = torch.mean((u_x_lower - u_x_upper) ** 2)\n",
    "        \n",
    "        #loss_bc_2 =  torch.mean((pred_left-pred_right) ** 2) \n",
    "        loss_bc = torch.mean((loss_bc_1 + loss_bc_2)**2)\n",
    "        \n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = 10*loss_res + 100*loss_ic + loss_bc\n",
    "        #print(loss)\n",
    "        #print(loss_track[-1])\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        \n",
    "        if loss_res <= error_finish_threshold and loss_ic<= error_finish_threshold and loss_bc<= error_finish_threshold:\n",
    "            error_finish = True\n",
    "        \n",
    "        return loss\n",
    "    if error_finish:\n",
    "        print(\"finish early\")\n",
    "        print(\"Iteration end on\")\n",
    "        print(k)\n",
    "        break\n",
    "    else:\n",
    "        optim.step(closure)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "714731b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T04:04:25.851491Z",
     "iopub.status.busy": "2024-10-11T04:04:25.851103Z",
     "iopub.status.idle": "2024-10-11T04:04:25.856201Z",
     "shell.execute_reply": "2024-10-11T04:04:25.855309Z"
    },
    "papermill": {
     "duration": 0.10772,
     "end_time": "2024-10-11T04:04:25.858252",
     "exception": false,
     "start_time": "2024-10-11T04:04:25.750532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of loss_track: 15183\n"
     ]
    }
   ],
   "source": [
    "print(f\"Length of loss_track: {len(loss_track)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b2abc9e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T04:04:26.057682Z",
     "iopub.status.busy": "2024-10-11T04:04:26.056967Z",
     "iopub.status.idle": "2024-10-11T04:04:26.064993Z",
     "shell.execute_reply": "2024-10-11T04:04:26.064088Z"
    },
    "papermill": {
     "duration": 0.10964,
     "end_time": "2024-10-11T04:04:26.066975",
     "exception": false,
     "start_time": "2024-10-11T04:04:25.957335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "# import random \n",
    "# list1 = [0]\n",
    "# random.choice(list1)\n",
    "# def check_nan(tensor, name):\n",
    "#     if torch.isnan(tensor).any():\n",
    "#         print(f\"NaNs detected in {name}\")\n",
    "# loss_track = []\n",
    "\n",
    "# #t_ic = torch.zeros_like(x_right_batch)\n",
    "# k=0\n",
    "# batch_index = 0\n",
    "# x_res_batch = get_minibatch(x_res, batch_index)\n",
    "# t_res_batch = get_minibatch(t_res, batch_index)\n",
    "\n",
    "# x_left_batch = get_minibatch(x_left, batch_index)\n",
    "# t_left_batch = get_minibatch(t_left, batch_index)\n",
    "# x_right_batch = get_minibatch(x_right, batch_index)            \n",
    "# t_right_batch = get_minibatch(t_right, batch_index)\n",
    "            \n",
    "# x_upper_batch = get_minibatch(x_upper, batch_index)\n",
    "# t_upper_batch = get_minibatch(t_upper, batch_index)\n",
    "# x_lower_batch = get_minibatch(x_lower, batch_index)\n",
    "# t_lower_batch = get_minibatch(t_lower, batch_index)\n",
    "# t_ic = torch.zeros_like(x_right_batch)\n",
    "# for i in tqdm(range(10)):\n",
    "#     k+=1\n",
    "#     if k == 200:\n",
    "    \n",
    "#             print(\"progress\")\n",
    "#             k=0\n",
    "#     def closure():\n",
    "#         t_ic = torch.zeros_like(x_right_batch)\n",
    "#         pred_res = model(x_res_batch, t_res_batch)\n",
    "#         pred_left = model(x_left_batch, t_left_batch) #  Left boundary of the spatial domain (x=0) over all times.\n",
    "#         pred_right = model(x_right_batch, t_right_batch) # t_right is 1\n",
    "#         #print(x_right_batch)\n",
    "#         pred_ic = model(x_right_batch,t_ic )\n",
    "#         #print(pred_ic)\n",
    "#         #return\n",
    "#         pred_upper = model(x_upper_batch, t_upper_batch) #  All spatial points at the final time step (x=1).\n",
    "#         pred_lower = model(x_lower_batch, t_lower_batch) #  All spatial points at the initial time step (x=-1).\n",
    "#         pred_res_t0 = pred_res[:, 0, :]\n",
    "#         #print(t_lower_batch) #LOWER BATCH IS X=-1 Higher is X=1\n",
    "# #         print(t_right_batch)\n",
    "\n",
    "\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "#         u_xx = torch.autograd.grad(u_x, x_res_batch, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res_batch, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "# #         u_x_left = torch.autograd.grad(pred_left, x_left_batch, grad_outputs=torch.ones_like(pred_left), retain_graph=True, create_graph=True)[0]\n",
    "# #         u_x_right = torch.autograd.grad(pred_right, x_right_batch, grad_outputs=torch.ones_like(pred_right), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         # Compute u_x at x = -1 and x = 1\n",
    "#         u_x_lower = torch.autograd.grad(pred_lower, x_lower_batch, grad_outputs=torch.ones_like(pred_lower), retain_graph=True, create_graph=True)[0]\n",
    "#         u_x_upper = torch.autograd.grad(pred_upper, x_upper_batch, grad_outputs=torch.ones_like(pred_upper), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        \n",
    "#         check_nan(u_x, 'u_x')\n",
    "#         check_nan(u_xx, 'u_xx')\n",
    "#         check_nan(u_t, 'u_t')\n",
    "#         check_nan(pred_res, 'pred_res')\n",
    "#         check_nan(pred_ic, 'pred_ic')\n",
    "#         check_nan(pred_upper, 'pred_upper')\n",
    "#         check_nan(pred_lower, 'pred_lower')\n",
    "       \n",
    "#         #alpha =a   # thermal diffusivity (can be modified)\n",
    "#         #1. PDE LOSS eesidual\n",
    "#         loss_res =torch.mean((u_t - gamma_1 * u_xx + gamma_2_AC * (pred_res**3 - pred_res))**2)\n",
    "\n",
    "#         #2. Loss for initial condition\n",
    "#         #print(pred_ic)\n",
    "#         initial_condition = (x_right_batch**2) * torch.sin(2*torch.pi * x_right_batch)\n",
    "#         #initial_condition = (x_right_batch**2) * torch.cos(torch.pi * x_right_batch)\n",
    "#         loss_ic = torch.mean((pred_ic-initial_condition) ** 2)\n",
    "        \n",
    "        \n",
    "#         # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "#         loss_bc_1 = torch.mean((pred_upper - pred_lower) ** 2)\n",
    "#         loss_bc_2 = torch.mean((u_x_lower - u_x_upper) ** 2)\n",
    "        \n",
    "#         #loss_bc_2 =  torch.mean((pred_left-pred_right) ** 2) \n",
    "#         loss_bc = torch.mean((loss_bc_1 + loss_bc_2)**2)\n",
    "        \n",
    "#         loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "#         loss = 10*loss_res + 100*loss_ic + loss_bc\n",
    "#         #print(loss)\n",
    "#         #print(loss_track[-1])\n",
    "#         optim.zero_grad()\n",
    "#         loss.backward()\n",
    "        \n",
    "#         return loss\n",
    "    \n",
    "#     optim.step(closure)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "515a3929",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T04:04:26.268138Z",
     "iopub.status.busy": "2024-10-11T04:04:26.267735Z",
     "iopub.status.idle": "2024-10-11T04:04:26.285862Z",
     "shell.execute_reply": "2024-10-11T04:04:26.284755Z"
    },
    "papermill": {
     "duration": 0.121237,
     "end_time": "2024-10-11T04:04:26.287888",
     "exception": false,
     "start_time": "2024-10-11T04:04:26.166651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.000101, Loss_IC: 0.000002, loss_bc: 0.000010\n",
      "Train Loss: 0.000113\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1febd994",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T04:04:26.490119Z",
     "iopub.status.busy": "2024-10-11T04:04:26.489685Z",
     "iopub.status.idle": "2024-10-11T04:04:26.910710Z",
     "shell.execute_reply": "2024-10-11T04:04:26.909842Z"
    },
    "papermill": {
     "duration": 0.525443,
     "end_time": "2024-10-11T04:04:26.913085",
     "exception": false,
     "start_time": "2024-10-11T04:04:26.387642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "863c3549",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T04:04:27.115637Z",
     "iopub.status.busy": "2024-10-11T04:04:27.115272Z",
     "iopub.status.idle": "2024-10-11T04:04:27.691886Z",
     "shell.execute_reply": "2024-10-11T04:04:27.690907Z"
    },
    "papermill": {
     "duration": 0.680765,
     "end_time": "2024-10-11T04:04:27.694137",
     "exception": false,
     "start_time": "2024-10-11T04:04:27.013372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2601, 5, 2])\n",
      "torch.Size([10201, 5, 1])\n",
      "torch.Size([2601, 5, 1])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2]\n",
    "print(res.shape)\n",
    "print(x_test.shape)\n",
    "print(x_res.shape)\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()  # Move to CPU before converting to NumPy\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "# Visualization of predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred.png')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "666837b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T04:04:27.900119Z",
     "iopub.status.busy": "2024-10-11T04:04:27.899057Z",
     "iopub.status.idle": "2024-10-11T04:04:28.607913Z",
     "shell.execute_reply": "2024-10-11T04:04:28.606919Z"
    },
    "papermill": {
     "duration": 0.813087,
     "end_time": "2024-10-11T04:04:28.609923",
     "exception": false,
     "start_time": "2024-10-11T04:04:27.796836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2601, 5, 2])\n",
      "torch.Size([10201, 5, 1])\n",
      "torch.Size([2601, 5, 1])\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEiCAYAAAD+lrlwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABjL0lEQVR4nO19eZwUxfn+0z2zs7scu3IfupweKEdUVAIeYFwlongrHkHgq4LxFhMRNeCNGKOoUVETjyhGJRE1SlBATET5eSAYD8SDVdC4KFF3YYHdnen6/THbvX1UVVd191w79fhp2al66613erqe9623qrs1QgiBgoKCgkLRQM+1AQoKCgoK2YUifgUFBYUigyJ+BQUFhSKDIn4FBQWFIoMifgUFBYUigyJ+BQUFhSKDIn4FBQWFIoMifgUFBYUigyJ+BQUFhSJDmyP+fv36YfLkydbn1157DZqm4bXXXsuZTW64bYwKF1xwAY488sjI9boxf/589OnTB42NjRnvK9/w6KOPQtM0fPnll1bZmDFjMGbMmJzZFDUmT56MDh065NqMvEc+cosoIiV+c1CYR1lZGfbcc09cdNFF2Lx5c5RdZRyLFy/Gddddl2szhFFTU4M//elPuPrqqyPTecstt+C5557zlE+ePBlNTU144IEHIuvLxLfffourrroKhx9+ODp27MgdWP369bOuNV3Xscsuu2Do0KGYOnUq3nrrrUD9H3TQQdA0Dffff3+Ib5Fd1NfX4/rrr8fPfvYzdOjQAeXl5RgyZAhmzJiB//73v7k2jwmTOFnHU089lWsTAQD33XcfHn300VybESnimVB6ww03oH///ti5cydWrlyJ+++/H4sXL8aHH36Idu3aZaJLJg477DDs2LEDiURCqt3ixYtx7733Fgz533XXXejfvz8OP/zwyHTecsstOOWUU3DCCSc4ysvKyjBp0iTccccduPjii6FpWmR9rl+/HnPnzsUee+yBoUOHYtWqVVz5fffdF1dccQUAYOvWrVi3bh0WLlyIhx56CJdffjnuuOMO4b4/++wzvPPOO+jXrx8WLFiAX//616G+SzawYcMGVFdXY+PGjTj11FMxdepUJBIJ/Oc//8Gf//xnLFq0CJ9++mmuzeTikksuwYEHHugpHzlyZA6s8eK+++5D165dPbP0oNySD8gI8R999NE44IADAADnnnsuunTpgjvuuAPPP/88zjjjDGqbhoYGtG/fPnJbdF1HWVlZ5HrzCc3NzViwYAHOP//8rPV52mmn4bbbbsOKFSvwi1/8IjK9w4cPx//+9z907twZf/vb33Dqqady5XfddVf86le/cpTNnTsXZ555Ju68807ssccewgT+xBNPoHv37vjDH/6AU045BV9++SX69esX9KtkHMlkEieddBI2b96M1157DYcccoij/uabb8bcuXNzZJ04Dj30UJxyyim5NkMahcwtWcnxm8RQU1MDoDWH+MUXX2DcuHHo2LEjzjrrLACAYRiYN28eBg8ejLKyMvTo0QPTpk3Djz/+6NBJCMFNN92E3XbbDe3atcPhhx+Ojz76yNM3Kw/31ltvYdy4cejUqRPat2+PYcOG4a677rLsu/feewHAMfU0EbWNNLDs/vLLL6FpmmPquXLlSmzZsgXV1dUO2UmTJqGsrAzr1q1zlI8dOxadOnXipgE0TUNDQwMee+wx6/vbI57hw4ejc+fOeP7554W+jyg6duyIzp07h9JRXl6Oxx9/HJ07d8bNN98M0QfQPvnkkzjllFNw7LHHorKyEk8++WRgGxobGzF79mzsvvvuKC0tRVVVFa688krPuoimabjooovw3HPPYciQISgtLcXgwYOxZMkS3z7+/ve/4/3338c111zjIX0AqKiowM0332x9fv3113HqqaeiT58+lk2XX345duzYQdX/zTff4IQTTkCHDh3QrVs3/OY3v0EqlbLqzWvx9ttvx4MPPoiBAweitLQUBx54IN555x3RUyWExsZGXH755ejWrRs6duyI4447Dl9//TU0TXPMyidPnkx11tddd51nZvrII4/gF7/4Bbp3747S0lLss88+nhRfv3798NFHH+Ff//qXNQ7M9RzWGF24cCGGDx+O8vJydO3aFb/61a/wzTffOGRMDvQ7x5lCRiJ+N7744gsAQJcuXayyZDKJsWPH4pBDDsHtt99upYCmTZuGRx99FFOmTMEll1yCmpoa/PGPf8SaNWvwxhtvoKSkBAAwa9Ys3HTTTRg3bhzGjRuH9957D0cddRSampp87Vm6dCmOPfZY9OrVC5deeil69uyJdevW4cUXX8Sll16KadOm4b///S+WLl2Kxx9/3NM+GzbK4M0334Smadhvv/0c5XfddRdeffVVTJo0CatWrUIsFsMDDzyAV155BY8/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zajCjkGDBmHBggXUKKWhoQFTpkzBPvvsg1GjRuG2227DiSeeSN037YZf6qumpgZ77703V+bss8927DjhnbMosW3bNixatAhVVVVcGxsaGvD8889jwoQJ1C2Fl1xyCRYsWCBF/AMHDsT777+PI444ItJ7HNwYP348/vrXv+KJJ57AzJkzubIffPABPv30Uzz22GM4++yzrfKlS5dmzL6o0LdvXxiGgS+++MIRTa9fv94j26lTJ8+YAbzj5h//+AcaGxvxwgsvOGYs7jQcIJYCNu007XJvcV6/fr1Vnw/Iq0c2nHbaaUilUrjxxhs9dclk0vpBq6urUVJSgnvuuccRVcybN8+3j/333x/9+/fHvHnzPBeIXZd5T4FbJhs2AumLKBaL4d///rej/L777vPIjhw5EoQQrF692lM3Y8YMbNy4EY899hjuuOMO9OvXD5MmTRJ63EL79u2pg8jEe++9h1GjRnF1DBgwANXV1dZx8MEH+/YbFjt27MDEiRPxww8/4JprruEO3EWLFqGhoQEXXnghTjnlFM9x7LHH4u9//7vU4ylOO+00fPPNN3jooYeotjU0NAT6Xm6ccsopGDp0KG6++WbqjW5bt261dqKY0aX9WiSEWFuY8xlHH300AODuu+92lNPG0sCBA1FXV4f//Oc/Vtm3336LRYsWOeRo56Ourg6PPPKIR6ffODBxwAEHoHv37pg/f77jevnnP/+JdevWhd6FFCXyKuIfPXo0pk2bhjlz5mDt2rU46qijUFJSgs8++wwLFy7EXXfdhVNOOcXa7zpnzhwce+yxGDduHNasWYN//vOf6Nq1K7cPXddx//33Y/z48dh3330xZcoU9OrVC5988gk++ugjvPzyywDS+9SBdMQ3duxYxGIxnH766VmxEQAqKytx6qmn4p577oGmaRg4cCBefPFFT34YAA455BB06dIFy5Ytc0Qar776Ku677z7Mnj0b+++/P4D03uUxY8bgd7/7HW677TZL1tz7bE/DDB8+HMuWLcMdd9yB3r17o3///hgxYgQAYPXq1fjhhx9w/PHH+34XWdx0000AYN3z8Pjjj1v50WuvvdYh+8033+CJJ54AkI7yP/74YyxcuBC1tbW44oorMG3aNG5fCxYsQJcuXZgO7LjjjsNDDz2El156CSeddJKQ/RMnTsQzzzyD888/HytWrMDBBx+MVCqFTz75BM888wxefvll31SoCEpKSvDss8+iuroahx12GE477TQcfPDBKCkpwUcffYQnn3wSnTp1ws0334xBgwZh4MCB+M1vfoNvvvkGFRUV+Pvf/56VfLIfXn/9dezcudNTPmzYMAwbNgz77rsvzjjjDNx3332oq6vDqFGjsHz5csd6jInTTz8dM2bMwIknnohLLrkE27dvx/33348999wT7733niV31FFHIZFIYPz48Zg2bRq2bduGhx56CN27d8e3337r0Dl8+HDcf//9uOmmm7D77ruje/fu1JsWS0pKMHfuXEyZMgWjR4/GGWecYW3n7NevHy6//PIIzlZEiHKLkLnV7Z133uHKTZo0ibRv355Z/+CDD5Lhw4eT8vJy0rFjRzJ06FBy5ZVXkv/+97+WTCqVItdffz3p1asXKS8vJ2PGjCEffvgh6du3L3c7p4mVK1eSI488knTs2JG0b9+eDBs2zLF9LplMkosvvph069aNaJrm2QoWpY0sfP/99+Tkk08m7dq1I506dSLTpk0jH374oWc7JyGEXHLJJWT33Xe3PtfX15O+ffuS/fffnzQ3NztkL7/8cqLrOlm1apVV1rVrV/Lzn//cIffJJ5+Qww47jJSXl3u2oM6YMYP06dPHsVU1KoCzxc+Ovn37WuWappGKigoyePBgct5555G33nrLt5/NmzeTeDxOJk6cyJTZvn07adeuHTnxxBMJIWLbOQlJb+2bO3cuGTx4MCktLSWdOnUiw4cPJ9dffz2pq6tzfNcLL7zQ06/oNUIIIT/++COZNWsWGTp0KGnXrh0pKysjQ4YMITNnzrS2RBJCyMcff0yqq6tJhw4dSNeuXcl5551nbR21X0+s8eneEmlu5/z973/vkYVrmyUNfts57e137NhBLrnkEtKlSxfSvn17Mn78eLJp0yZqP6+88goZMmQISSQSZK+99iJPPPEEdTvnCy+8QIYNG0bKyspIv379yNy5c8nDDz/s+X1ra2vJMcccQzp27EgAWL81i1uefvppst9++5HS0lLSuXNnctZZZ1lb2U2InuNMQSMkByswCpFjw4YNGDRoEP75z3/iiCOOkGpr3uD04osvCk1HGxsb0a9fP1x11VW49NJLg5qsoBAamqZh9uzZBfNMrXxBXuX4FYJjwIABOOecc3DrrbdKt12xYgVGjhwpnIN85JFHUFJSktVn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cLFz504ye/ZssnPnzlybIoVCtZuQwrVd2Z19FLLtuYRGSBt8EIWCgoKCAhMFk+NXUFBQUIgGivgVFBQUigyK+BUUFBSKDIr4Adx7773o168fysrKMGLECLz99ttc+YULF2LQoEEoKyvD0KFDsXix2N1/UUPG7oceegiHHnooOnXqhE6dOqG6utr3e2YSsufcxFNPPQVN03K2JVfW7p9++gkXXnghevXqhdLSUuy55545uV5k7Z43bx722msvlJeXo6qqCpdffnmgp9qGwb///W+MHz8evXv3hqZpeO6553zbvPbaa9h///1RWlqK3XffXfjhZ0WHXK8u5xpPPfUUSSQS5OGHHyYfffQROe+888guu+xCNm/eTJV/4403SCwWI7fddhv5+OOPybXXXktKSkrIBx98kNd2n3nmmeTee+8la9asIevWrSOTJ08mlZWV5Ouvv86q3YTI226ipqaG7LrrruTQQw8lxx9/fHaMtUHW7sbGRnLAAQeQcePGkZUrV5Kamhry2muvkbVr1+a13QsWLCClpaVkwYIFpKamhrz88sukV69e5PLLL8+q3YsXLybXXHMNefbZZwkAsmjRIq78hg0bSLt27cj06dPJxx9/TO655x4Si8XIkiVLsmNwAaHoif+ggw4iF154ofU5lUqR3r17kzlz5lDlTzvtNHLMMcc4ykaMGEGmTZuWUTvdkLXbjWQySTp27Egee+yxTJnIRBDbk8kkGTVqFPnTn/5EJk2alBPil7X7/vvvJwMGDCBNTU3ZMpEKWbsvvPBC8otf/MJRNn36dHLwwQdn1E4eRIj/yiuvJIMHD3aUTZgwgYwdOzaDlhUmijrV09TUhNWrVzsecarrOqqrq5mPOF21apVDHgDGjh0b7FHPARHEbje2b9+O5uZm6WechEVQ22+44QZ0794d55xzTjbM9CCI3S+88AJGjhyJCy+8ED169MCQIUNwyy23IJXK3jtcg9g9atQorF692koHbdiwAYsXL8a4ceOyYnNQ5MPYLBQUzJ27mcCWLVuQSqWojzj95JNPqG1qa2tDPxI1LILY7caMGTPQu3dvz0DJNILYvnLlSvz5z3/G2rVrs2AhHUHs3rBhA1599VWcddZZWLx4MT7//HNccMEFaG5uxuzZs7NhdiC7zzzzTGzZsgWHHHIICCFIJpM4//zzcfXVV2fD5MBgjc36+nrs2LED5eXlObIs/1DUEX+x4tZbb8VTTz2FRYsW5f3jK7Zu3YqJEyfioYceQteuXXNtjhQMw0D37t3x4IMPYvjw4ZgwYQKuueYazJ8/P9emcfHaa6/hlltuwX333Yf33nsPzz77LF566SXceOONuTZNISIUdcTftWtXxGIxbN682VG+efNm6/GnbvTs2VNKPhMIYreJ22+/HbfeeiuWLVuGYcOGZdJMKmRt/+KLL/Dll19i/PjxVpnR8taueDyO9evXY+DAgZk1GsHOea9evVBSUoJYLGaV7b333qitrUVTUxMSiURGbQaC2f273/0OEydOxLnnngsAGDp0qPVsmGuuuSbQkzCzAdbYrKioUNG+C/n5C2YJiUQCw4cPx/Lly60ywzCwfPlyjBw5ktpm5MiRDnkAWLp0KVM+EwhiN5B+SfONN96IJUuW4IADDsiGqR7I2j5o0CB88MEH1lML165di+OOOw6HH3441q5d63krUr7YDQAHH3wwPv/8c8tRAcCnn36KXr16ZYX0gWB2b9++3UPupvMiefyEl3wYmwWDXK8u5xpPPfUUKS0tJY8++ij5+OOPydSpU8kuu+xCamtrCSGETJw4kVx11VWW/BtvvEHi8Ti5/fbbybp168js2bNztp1Txu5bb72VJBIJ8re//Y18++231rF169as2h3EdjdytatH1u6NGzeSjh07kosuuoisX7+evPjii6R79+7kpptuymu7Z8+eTTp27Ej++te/kg0bNpBXXnmFDBw4kJx22mlZtXvr1q1kzZo1ZM2aNQQAueOOO8iaNWvIV199RQgh5KqrriITJ0605M3tnL/97W/JunXryL333qu2czJQ9MRPCCH33HMP6dOnD0kkEuSggw4i/+///T+rbvTo0WTSpEkO+WeeeYbsueeeJJFIkMGDB5OXXnopyxanIWN33759CdIvgXQcs2fPzr7hRP6c25Er4idE3u4333yTjBgxgpSWlpIBAwaQm2++mSSTySxbLWd3c3Mzue6668jAgQNJWVkZqaqqIhdccAH58ccfs2rzihUrqNesaeukSZPI6NGjPW323XdfkkgkyIABA8gjjzySVZsLBerpnAoKCgpFhqLO8SsoKCgUIxTxKygoKBQZFPErKCgoFBkU8SsoKCgUGRTxKygoKBQZFPErKCgoFBkU8SsoKCgUGRTxKygoKBQZFPErKCgoFBkU8SsUFcaMGYPLLrss12YoKOQUivgVFBQUigzqWT0KRYPJkyfjsccec5TV1NSgX79+uTFIQSFHUMSvUDSoq6vD0UcfjSFDhuCGG24AAHTr1s3xohQFhWJAUb+BS6G4UFlZiUQigXbt2mX1jWkKCvkGleNXUFBQKDIo4ldQUFAoMijiVygqJBIJpFKpXJuhoJBTKOJXKCr069cPb731Fr788kts2bLF8SJ0BYVigSJ+haLCb37zG8RiMeyzzz7o1q0bNm7cmGuTFBSyDrWdU0FBQaHIoCJ+BQUFhSKDIn4FBQWFIoMifgUFBYUigyJ+BQUFhSKDIn4FBQWFIoMifgUFBYUigyJ+BQUFhSKDIn4FBQWFIoMifgUFBYUigyJ+BQUFhSKDIn4FBQWFIoMifgUFBYUiw/8HNenHAb1zSy8AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:, :, 0:1], res_test[:, :, 1:2]\n",
    "print(res.shape)\n",
    "print(x_test.shape)\n",
    "print(x_res.shape)\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()  # Move to CPU before converting to NumPy\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "# Rotate the prediction 90 degrees to the left\n",
    "pred = np.rot90(pred, k=1)  # k=1 rotates 90 degrees counterclockwise\n",
    "\n",
    "# Visualization of predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred_rotated.png')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "78b3e468",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T04:04:28.816118Z",
     "iopub.status.busy": "2024-10-11T04:04:28.815683Z",
     "iopub.status.idle": "2024-10-11T04:04:29.727051Z",
     "shell.execute_reply": "2024-10-11T04:04:29.725509Z"
    },
    "papermill": {
     "duration": 1.017221,
     "end_time": "2024-10-11T04:04:29.729115",
     "exception": false,
     "start_time": "2024-10-11T04:04:28.711894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x400 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create the x grid (spatial domain) and select specific time steps for visualization\n",
    "x_values = np.linspace(-1, 1, 101)  # Spatial domain from -1 to 1 with 101 points\n",
    "time_steps = [0.0, 0.25, 0.75, 1.0]  # The time steps you want to visualize\n",
    "time_steps = [0.0] \n",
    "# Plot the predicted solutions at specific time steps\n",
    "fig, axes = plt.subplots(1, 4, figsize=(16, 4), sharey=True)\n",
    "\n",
    "for idx, t in enumerate(time_steps):\n",
    "    # Extract the prediction for the current time step 't'\n",
    "    x_test_tensor = torch.tensor(x_values, dtype=torch.float32).unsqueeze(1).to(device)\n",
    "    t_test_tensor = torch.tensor(np.full_like(x_values, t), dtype=torch.float32).unsqueeze(1).to(device)\n",
    "\n",
    "    with torch.no_grad():\n",
    "        pred_u = model(x_test_tensor, t_test_tensor).cpu().numpy()  # Predicted u(x, t) from the model\n",
    "#         print(pred_u)\n",
    "#         print(x_test_tensor.shape)\n",
    "#         print(t_test_tensor)\n",
    "    # Plotting predicted solutions only\n",
    "    axes[idx].plot(x_values, pred_u, 'r--', label='Prediction')  # Predicted solution in red dashed line\n",
    "    axes[idx].set_title(f'$t={t}$')\n",
    "    axes[idx].set_xlabel('$x$')\n",
    "    axes[idx].set_xlim([-1, 1])\n",
    "    axes[idx].set_ylim([-1, 1])\n",
    "    axes[idx].legend()\n",
    "\n",
    "axes[0].set_ylabel('$u(t,x)$')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9692dd42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-11T04:04:29.934446Z",
     "iopub.status.busy": "2024-10-11T04:04:29.934055Z",
     "iopub.status.idle": "2024-10-11T04:04:31.344913Z",
     "shell.execute_reply": "2024-10-11T04:04:31.343962Z"
    },
    "papermill": {
     "duration": 1.516126,
     "end_time": "2024-10-11T04:04:31.347109",
     "exception": false,
     "start_time": "2024-10-11T04:04:29.830983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy.io import loadmat\n",
    "def gen_testdata():\n",
    "    data = loadmat(\"/kaggle/input/allen-cahn/Allen_Cahn.mat\")\n",
    "\n",
    "    t = data[\"t\"]\n",
    "    x = data[\"x\"]\n",
    "    u = data[\"u\"]\n",
    "\n",
    "    dt = dx = 0.01\n",
    "    xx, tt = np.meshgrid(x, t)\n",
    "    X = np.vstack((np.ravel(xx), np.ravel(tt))).T\n",
    "    y = u.flatten()[:, None]\n",
    "    return X, y\n",
    "\n",
    "X, y_true = gen_testdata()\n",
    "\n",
    "# Move the tensor to CPU and detach it from the computation graph before using NumPy\n",
    "# res_test = make_time_sequence(res_test, num_step=5, step=1e-4)\n",
    "# res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(X, extent=[0, 1, -1, 1], aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.title('Predicted u(x,t) - 1D Allen Cahn Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5827901,
     "sourceId": 9563008,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30787,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13446.296016,
   "end_time": "2024-10-11T04:04:32.975200",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-11T00:20:26.679184",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
